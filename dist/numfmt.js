"use strict";const e=2,t=4,n=8,a=16,r=32,i=64,s=128,o=256,m=512,d=-1,l=1,u=6,c="general",p="hash",f="zero",h="qmark",g="slash",b="group",y="scale",v="comma",_="break",j="text",k="plus",M="minus",x="point",F="space",w="percent",z="digit",C="calendar",S="error",A="datetime",E="duration",I="condition",D="dbnum",O="natnum",T="locale",N="color",P="modifier",Y="ampm",R="escaped",L="string",U="skip",H="exp",B="fill",G="paren",J="char",$=["#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#800","#080","#008","#880","#808","#088","#CCC","#888","#99F","#936","#FFC","#CFF","#606","#F88","#06C","#CCF","#008","#F0F","#FF0","#0FF","#808","#800","#088","#00F","#0CF","#CFF","#CFC","#FF9","#9CF","#F9C","#C9F","#FC9","#36F","#3CC","#9C0","#FC0"],V=["¤","$","£","¥","֏","؋","৳","฿","៛","₡","₦","₩","₪","₫","€","₭","₮","₱","₲","₴","₸","₹","₺","₼","₽","₾","₿"],K=new RegExp("["+V.join("")+"]");function Z(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,t||"default");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function W(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?W(Object(n),!0).forEach((function(t){Z(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):W(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var q=Object.freeze({1078:"af",1052:"sq",1118:"am",5121:"ar_DZ",15361:"ar_BH",3073:"ar_EG",2049:"ar_IQ",11265:"ar_JO",13313:"ar_KW",12289:"ar_LB",4097:"ar_LY",6145:"ar_MA",8193:"ar_OM",16385:"ar_QA",1025:"ar_SA",10241:"ar_SY",7169:"ar_TN",14337:"ar_AE",9217:"ar_YE",1067:"hy",1101:"as",2092:"az_AZ",1068:"az_AZ",1069:"eu",1059:"be",2117:"bn",1093:"bn_IN",5146:"bs",1026:"bg",1109:"my",1027:"ca",2052:"zh_CN",3076:"zh_HK",5124:"zh_MO",4100:"zh_SG",1028:"zh_TW",1050:"hr",1029:"cs",1030:"da",1125:"dv",2067:"nl_BE",1043:"nl_NL",1126:"bin",3081:"en_AU",10249:"en_BZ",4105:"en_CA",9225:"en_CB",2057:"en_GB",16393:"en_IN",6153:"en_IE",8201:"en_JM",5129:"en_NZ",13321:"en_PH",7177:"en_ZA",11273:"en_TT",1033:"en_US",12297:"en_ZW",1061:"et",1071:"mk",1080:"fo",1065:"fa",1124:"fil",1035:"fi",2060:"fr_BE",11276:"fr_CM",3084:"fr_CA",9228:"fr_CG",12300:"fr_CI",1036:"fr_FR",5132:"fr_LU",13324:"fr_ML",6156:"fr_MC",14348:"fr_MA",10252:"fr_SN",4108:"fr_CH",7180:"fr",1122:"fy_NL",2108:"gd_IE",1084:"gd",1110:"gl",1079:"ka",3079:"de_AT",1031:"de_DE",5127:"de_LI",4103:"de_LU",2055:"de_CH",1032:"el",1140:"gn",1095:"gu",1279:"en",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig_NG",1057:"id",1040:"it_IT",2064:"it_CH",1041:"ja",1099:"kn",1120:"ks",1087:"kk",1107:"km",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1142:"la",1062:"lv",1063:"lt",2110:"ms_BN",1086:"ms_MY",1100:"ml",1082:"mt",1112:"mni",1153:"mi",1102:"mr",1104:"mn",2128:"mn",1121:"ne",1044:"no_NO",2068:"no_NO",1096:"or",1045:"pl",1046:"pt_BR",2070:"pt_PT",1094:"pa",1047:"rm",2072:"ro_MO",1048:"ro_RO",1049:"ru",2073:"ru_MO",1083:"se",1103:"sa",3098:"sr_SP",2074:"sr_SP",1072:"st",1074:"tn",1113:"sd",1115:"si",1051:"sk",1060:"sl",1143:"so",1070:"sb",11274:"es_AR",16394:"es_BO",13322:"es_CL",9226:"es_CO",5130:"es_CR",7178:"es_DO",12298:"es_EC",17418:"es_SV",4106:"es_GT",18442:"es_HN",2058:"es_MX",19466:"es_NI",6154:"es_PA",15370:"es_PY",10250:"es_PE",20490:"es_PR",1034:"es_ES",14346:"es_UY",8202:"es_VE",1089:"sw",2077:"sv_FI",1053:"sv_SE",1114:"syc",1064:"tg",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1073:"ts",1055:"tr",1090:"tk",1058:"uk",1056:"ur",2115:"uz_UZ",1091:"uz_UZ",1075:"ve",1066:"vi",1106:"cy",1076:"xh",1085:"yi",1077:"zu"});const Q=/^([a-z\d]+)(?:[_-]([a-z\d]+))?(?:\.([a-z\d]+))?(?:@([a-z\d]+))?$/i,ee={},te=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.replace(/~/g,t).split(";")},ne=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e.mmm||(e.mmm=t<1?e.mmmm.concat():e.mmmm.map((e=>{const n=e.slice(0,t%10);return n+(t<10||e===n?"":".")}))),e.ddd||(e.ddd=n<1?e.dddd.concat():e.dddd.map((e=>{const t=e.slice(0,n%10);return t+(n<10||e===t?"":".")}))),!e.mmm6&&e.mmmm6&&(e.mmm6=e.mmmm6),e},ae={group:" ",decimal:".",positive:"+",negative:"-",percent:"%",exponent:"E",nan:"NaN",infinity:"∞",ampm:te("AM;PM"),mmmm6:te("Muharram;Safar;Rabiʻ I;Rabiʻ II;Jumada I;Jumada II;Rajab;Shaʻban;Ramadan;Shawwal;Dhuʻl-Qiʻdah;Dhuʻl-Hijjah"),mmm6:te("Muh.;Saf.;Rab. I;Rab. II;Jum. I;Jum. II;Raj.;Sha.;Ram.;Shaw.;Dhuʻl-Q.;Dhuʻl-H."),mmmm:te("January;February;March;April;May;June;July;August;September;October;November;December"),mmm:te("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec"),dddd:te("Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday"),ddd:te("Sun;Mon;Tue;Wed;Thu;Fri;Sat")};function re(e){const t=Q.exec(e);if(!t)throw new SyntaxError("Malformed locale: ".concat(e));return{lang:t[1]+(t[2]?"_"+t[2]:""),language:t[1],territory:t[2]||""}}function ie(e){if("number"==typeof e)return q[65535&e]||null;const t=parseInt(e,16);return isFinite(t)&&q[65535&t]?q[65535&t]||null:Q.test(e)?e:null}function se(e){const t=ie(e);let n=null;if(t){const e=re(t);n=ee[e.lang]||ee[e.language]||null}return n}function oe(e){return Object.assign({},ae,e)}function me(e,t){const n="object"==typeof t?t:re(t);return ee[n.lang]=oe(e),n.language===n.lang||ee[n.language]||(ee[n.language]=oe(e)),ee[n.lang]}const de=oe({group:","});de.isDefault=!0,me({group:",",ampm:te("上午;下午"),mmmm:te("一月;二月;三月;四月;五月;六月;七月;八月;九月;十月;十一月;十二月"),mmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:te("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:te("周日;周一;周二;周三;周四;周五;周六")},"zh_CN");const le={group:",",ampm:te("上午;下午"),mmmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),mmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:te("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:te("周日;周一;周二;周三;周四;周五;周六")};me(X(X({},le),{},{nan:"非數值",dddd:te("~日;~一;~二;~三;~四;~五;~六","星期")}),"zh_TW"),me(X(X({},le),{},{dddd:te("~日;~一;~二;~三;~四;~五;~六","星期")}),"zh_HK"),me(X(X({},le),{},{ampm:te("午前;午後"),dddd:te("日~;月~;火~;水~;木~;金~;土~","曜日"),ddd:te("日;月;火;水;木;金;土")}),"ja"),me({group:",",ampm:te("오전;오후"),mmmm:te("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),mmm:te("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),dddd:te("일요일;월요일;화요일;수요일;목요일;금요일;토요일"),ddd:te("일;월;화;수;목;금;토")},"ko"),me({group:",",ampm:te("ก่อนเที่ยง;หลังเที่ยง"),mmmm:te("มกร~;กุมภาพันธ์;มีน~;เมษายน;พฤษภ~;มิถุนายน;กรกฎ~;สิงห~;กันยายน;ตุล~;พฤศจิกายน;ธันว~","าคม"),mmm:te("ม.ค.;ก.พ.;มี.ค.;เม.ย.;พ.ค.;มิ.ย.;ก.ค.;ส.ค.;ก.ย.;ต.ค.;พ.ย.;ธ.ค."),dddd:te("วันอาทิตย์;วันจันทร์;วันอังคาร;วันพุธ;วันพฤหัสบดี;วันศุกร์;วันเสาร์"),ddd:te("อา.;จ.;อ.;พ.;พฤ.;ศ.;ส.")},"th"),me(ne({decimal:",",ampm:te("dop.;odp."),mmmm:te("ledna;února;března;dubna;května;června;července;srpna;září;října;listopadu;prosince"),mmm:te("I;II;III;IV;V;VI;VII;VIII;IX;X;XI;XII"),dddd:te("neděle;pondělí;úterý;středa;čtvrtek;pátek;sobota")},-1,2),"cs"),me(ne({group:".",decimal:",",mmmm:te("januar;februar;marts;april;maj;juni;juli;august;september;oktober;november;december"),dddd:te("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag")},13,13),"da"),me(ne({group:".",decimal:",",ampm:te("a.m.;p.m."),mmmm:te("januari;februari;maart;april;mei;juni;juli;augustus;september;oktober;november;december"),mmm:te("jan.;feb.;mrt.;apr.;mei;jun.;jul.;aug.;sep.;okt.;nov.;dec."),dddd:te("zondag;maandag;dinsdag;woensdag;donderdag;vrijdag;zaterdag")},-1,2),"nl"),me({group:","},"en"),me({group:","},"en_AU"),me({group:","},"en_CA"),me({group:","},"en_GB"),me({group:",",mmm:te("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sept;Oct;Nov;Dec")},"en_IE"),me(ne({decimal:",",nan:"epäluku",ampm:te("ap.;ip."),mmmm:te("tammi~;helmi~;maalis~;huhti~;touko~;kesä~;heinä~;elo~;syys~;loka~;marras~;joulu~","kuuta"),mmm:te("tammik.;helmik.;maalisk.;huhtik.;toukok.;kesäk.;heinäk.;elok.;syysk.;lokak.;marrask.;jouluk."),dddd:te("sunnun~;maanan~;tiis~;keskiviikkona;tors~;perjan~;lauan~","taina")},-1,2),"fi");const ue=ne({group:" ",decimal:",",mmmm:te("janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre"),mmm:te("janv.;févr.;mars;avr.;mai;juin;juil.;août;sept.;oct.;nov.;déc."),dddd:te("~manche;lun~;mar~;mercre~;jeu~;vendre~;same~","di")},-1,13);me(X({},ue),"fr"),me(X(X({},ue),{},{mmm:te("janv.;févr.;mars;avr.;mai;juin;juill.;août;sept.;oct.;nov.;déc.")}),"fr_CA"),me(X({group:"'",decimal:"."},ue),"fr_CH");const ce=ne({mmmm:te("Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember"),mmm:te("Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sept.;Okt.;Nov.;Dez."),dddd:te("Sonn~;Mon~;Diens~;Mittwoch;Donners~;Frei~;Sams~","tag")},-1,12);me(X({group:".",decimal:","},ce),"de"),me(X({group:"'",decimal:"."},ce),"de_CH"),me(ne({group:".",decimal:",",ampm:te("π.μ.;μ.μ."),mmmm:te("Ιανουαρ~;Φεβρουαρ~;Μαρτ~;Απριλ~;Μαΐου;Ιουν~;Ιουλ~;Αυγούστου;Σεπτεμβρ~;Οκτωβρ~;Νοεμβρ~;Δεκεμβρ~","ίου"),mmm:te("Ιαν;Φεβ;Μαρ;Απρ;Μαΐ;Ιουν;Ιουλ;Αυγ;Σεπ;Οκτ;Νοε;Δεκ"),dddd:te("Κυριακή;Δευτέρα;Τρίτη;Τετάρτη;Πέμπτη;Παρασκευή;Σάββατο")},-1,3),"el"),me({decimal:",",ampm:te("de.;du."),mmmm:te("január;február;március;április;május;június;július;augusztus;szeptember;október;november;december"),mmm:te("jan.;febr.;márc.;ápr.;máj.;jún.;júl.;aug.;szept.;okt.;nov.;dec."),dddd:te("vasárnap;hétfő;kedd;szerda;csütörtök;péntek;szombat"),ddd:te("V;H;K;Sze;Cs;P;Szo")},"hu"),me(ne({group:".",decimal:",",ampm:te("f.h.;e.h."),mmmm:te("janúar;febrúar;mars;apríl;maí;júní;júlí;ágúst;september;október;nóvember;desember"),dddd:te("sunnu~;mánu~;þriðju~;miðviku~;fimmtu~;föstu~;laugar~","dagur")},13,13),"is"),me(ne({group:".",decimal:",",mmmm:te("Januari;Februari;Maret;April;Mei;Juni;Juli;Agustus;September;Oktober;November;Desember"),dddd:te("Minggu;Senin;Selasa;Rabu;Kamis;Jumat;Sabtu")},3,3),"id");const pe=ne({mmmm:te("gennaio;febbraio;marzo;aprile;maggio;giugno;luglio;agosto;settembre;ottobre;novembre;dicembre"),dddd:te("domenica;lunedì;martedì;mercoledì;giovedì;venerdì;sabato")},3,3);me(X({group:".",decimal:","},pe),"it"),me(X({group:"'",decimal:"."},pe),"it_CH");const fe={decimal:",",ampm:te("a.m.;p.m."),mmmm:te("januar;februar;mars;april;mai;juni;juli;august;september;oktober;november;desember"),mmm:te("jan.;feb.;mar.;apr.;mai;jun.;jul.;aug.;sep.;okt.;nov.;des."),dddd:te("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag")};me(ne(X({},fe),-1,13),"nb"),me(ne(X({},fe),-1,13),"no"),me(ne({decimal:",",mmmm:te("stycznia;lutego;marca;kwietnia;maja;czerwca;lipca;sierpnia;września;października;listopada;grudnia"),dddd:te("niedziela;poniedziałek;wtorek;środa;czwartek;piątek;sobota"),ddd:te("niedz.;pon.;wt.;śr.;czw.;pt.;sob.")},3,-1),"pl");const he={group:".",decimal:",",mmmm:te("janeiro;fevereiro;março;abril;maio;junho;julho;agosto;setembro;outubro;novembro;dezembro"),dddd:te("domingo;segunda-feira;terça-feira;quarta-feira;quinta-feira;sexta-feira;sábado")};me(ne(he,13,13),"pt"),me(ne(he,13,13),"pt_BR"),me({decimal:",",nan:"не число",mmmm:te("января;февраля;марта;апреля;мая;июня;июля;августа;сентября;октября;ноября;декабря"),mmm:te("янв.;февр.;мар.;апр.;мая;июн.;июл.;авг.;сент.;окт.;нояб.;дек."),dddd:te("воскресенье;понедельник;вторник;среда;четверг;пятница;суббота"),ddd:te("вс;пн;вт;ср;чт;пт;сб"),mmmm6:te("рамадан;шавваль;зуль-каада;зуль-хиджжа;мухаррам;раби-уль-авваль;раби-уль-ахир;джумад-уль-авваль;джумад-уль-ахир;раджаб;шаабан;рамадан"),mmm6:te("рам.;шав.;зуль-к.;зуль-х.;мух.;раб. I;раб. II;джум. I;джум. II;радж.;шааб.;рам.")},"ru"),me(ne({decimal:",",mmmm:te("januára;februára;marca;apríla;mája;júna;júla;augusta;septembra;októbra;novembra;decembra"),dddd:te("nedeľa;pondelok;utorok;streda;štvrtok;piatok;sobota")},3,2),"sk");const ge={group:".",decimal:",",ampm:te("a. m.;p. m."),mmmm:te("enero;febrero;marzo;abril;mayo;junio;julio;agosto;septiem~;octu~;noviem~;diciem~","bre"),mmm:te("ene;feb;mar;abr;may;jun;jul;ago;sept;oct;nov;dic"),dddd:te("domingo;lunes;martes;miércoles;jueves;viernes;sábado"),ddd:te("dom;lun;mar;mié;jue;vie;sáb")},be=te("ene;feb;mar;abr;may;jun;jul;ago;sep;oct;nov;dic"),ye=te("ene.;feb.;mar.;abr.;may.;jun.;jul.;ago.;sept.;oct.;nov.;dic.");me(X({},ge),"es"),me(X({},ge),"es_AR"),me(X({},ge),"es_BO"),me(X({},ge),"es_CL"),me(X({},ge),"es_CO"),me(X({},ge),"es_EC"),me(X(X({},ge),{},{mmm:be,ampm:te("a.m.;p.m.")}),"es_MX"),me(X(X({},ge),{},{mmm:ye}),"es_PY"),me(X(X({},ge),{},{mmm:ye}),"es_UY"),me(X(X({},ge),{},{mmm:ye,mmmm:te("enero;febrero;marzo;abril;mayo;junio;julio;agosto;setiembre;octubre;noviembre;diciembre")}),"es_VE"),me({decimal:",",ampm:te("fm;em"),mmmm:te("januari;februari;mars;april;maj;juni;juli;augusti;september;oktober;november;december"),mmm:te("jan.;feb.;mars;apr.;maj;juni;juli;aug.;sep.;okt.;nov.;dec."),dddd:te("sön~;mån~;tis~;ons~;tors~;fre~;lör~","dag"),ddd:te("sön;mån;tis;ons;tors;fre;lör")},"sv"),me(ne({group:".",decimal:",",ampm:te("ÖÖ;ÖS"),mmmm:te("Ocak;Şubat;Mart;Nisan;Mayıs;Haziran;Temmuz;Ağustos;Eylül;Ekim;Kasım;Aralık"),mmm:te("Oca;Şub;Mar;Nis;May;Haz;Tem;Ağu;Eyl;Eki;Kas;Ara"),dddd:te("Pazar;Pazartesi;Salı;Çarşamba;Perşembe;Cuma;Cumartesi"),ddd:te("Paz;Pzt;Sal;Çar;Per;Cum;Cmt")},3,-1),"tr"),me({group:",",ampm:te("yb;yh"),mmmm:te("Ionawr;Chwefror;Mawrth;Ebrill;Mai;Mehefin;Gorffennaf;Awst;Medi;Hydref;Tachwedd;Rhagfyr"),mmm:te("Ion;Chwef;Maw;Ebr;Mai;Meh;Gorff;Awst;Medi;Hyd;Tach;Rhag"),dddd:te("Dydd Sul;Dydd Llun;Dydd Mawrth;Dydd Mercher;Dydd Iau;Dydd Gwener;Dydd Sadwrn"),ddd:te("Sul;Llun;Maw;Mer;Iau;Gwen;Sad")},"cy"),me({group:".",decimal:",",mmmm:te("yanvar;fevral;mart;aprel;may;iyun;iyul;avqust;sentyabr;oktyabr;noyabr;dekabr"),mmm:te("yan;fev;mar;apr;may;iyn;iyl;avq;sen;okt;noy;dek"),dddd:te("bazar;bazar ertəsi;çərşənbə axşamı;çərşənbə;cümə axşamı;cümə;şənbə"),ddd:te("B.;B.e.;Ç.a.;Ç.;C.a.;C.;Ş.")},"az"),me(ne({decimal:",",mmmm:te("студзеня;лютага;сакавіка;красавіка;мая;чэрвеня;ліпеня;жніўня;верасня;кастрычніка;лістапада;снежня"),dddd:te("нядзеля;панядзелак;аўторак;серада;чацвер;пятніца;субота"),ddd:te("нд;пн;аў;ср;чц;пт;сб")},3,-1),"be"),me({decimal:",",ampm:te("пр.об.;сл.об."),mmmm:te("януари;февруари;март;април;май;юни;юли;август;септември;октомври;ноември;декември"),mmm:te("яну;фев;март;апр;май;юни;юли;авг;сеп;окт;ное;дек"),dddd:te("неделя;понеделник;вторник;сряда;четвъртък;петък;събота"),ddd:te("нд;пн;вт;ср;чт;пт;сб")},"bg"),me({group:".",decimal:",",mmmm:te("de gener;de febrer;de març;d’abril;de maig;de juny;de juliol;d’agost;de setembre;d’octubre;de novembre;de desembre"),mmm:te("de gen.;de febr.;de març;d’abr.;de maig;de juny;de jul.;d’ag.;de set.;d’oct.;de nov.;de des."),dddd:te("diumenge;dilluns;dimarts;dimecres;dijous;divendres;dissabte"),ddd:te("dg.;dl.;dt.;dc.;dj.;dv.;ds."),ampm:te("a. m.;p. m.")},"ca"),me(ne({group:",",decimal:".",mmmm:te("Enero;Pebrero;Marso;Abril;Mayo;Hunyo;Hulyo;Agosto;Setyembre;Oktubre;Nobyembre;Disyembre"),dddd:te("Linggo;Lunes;Martes;Miyerkules;Huwebes;Biyernes;Sabado")},3,3),"fil"),me({group:",",decimal:".",mmmm:te("જાન્યુઆરી;ફેબ્રુઆરી;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટેમ્બર;ઑક્ટોબર;નવેમ્બર;ડિસેમ્બર"),mmm:te("જાન્યુ;ફેબ્રુ;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટે;ઑક્ટો;નવે;ડિસે"),dddd:te("રવિ~;સોમ~;મંગળ~;બુધ~;ગુરુ~;શુક્ર~;શનિ~","વાર"),ddd:te("રવિ;સોમ;મંગળ;બુધ;ગુરુ;શુક્ર;શનિ")},"gu"),me({group:",",decimal:".",ampm:te("לפנה״צ;אחה״צ"),dddd:te("~ראשון;~שני;~שלישי;~רביעי;~חמישי;~שישי;~שבת","יום "),ddd:te("~א׳;~ב׳;~ג׳;~ד׳;~ה׳;~ו׳;שבת","יום "),mmmm:te("ינואר;פברואר;מרץ;אפריל;מאי;יוני;יולי;אוגוסט;ספטמבר;אוקטובר;נובמבר;דצמבר"),mmm:te("ינו׳;פבר׳;מרץ;אפר׳;מאי;יוני;יולי;אוג׳;ספט׳;אוק׳;נוב׳;דצמ׳"),mmmm6:te("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע אל־אוול;רביע א־ת׳אני;ג׳ומאדא אל־אולא;ג׳ומאדא א־ת׳אניה;רג׳ב;שעבאן;רמדאן"),mmm6:te("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע א׳;רביע ב׳;ג׳ומאדא א׳;ג׳ומאדא ב׳;רג׳ב;שעבאן;רמדאן")},"he"),me(ne({group:".",decimal:",",mmmm:te("siječnja;veljače;ožujka;travnja;svibnja;lipnja;srpnja;kolovoza;rujna;listopada;studenoga;prosinca"),mmm:te("sij;velj;ožu;tra;svi;lip;srp;kol;ruj;lis;stu;pro"),dddd:te("nedjelja;ponedjeljak;utorak;srijeda;četvrtak;petak;subota")},-1,3),"hr"),me({decimal:",",mmmm:te("հունվարի;փետրվարի;մարտի;ապրիլի;մայիսի;հունիսի;հուլիսի;օգոստոսի;սեպտեմբերի;հոկտեմբերի;նոյեմբերի;դեկտեմբերի"),mmm:te("հնվ;փտվ;մրտ;ապր;մյս;հնս;հլս;օգս;սեպ;հոկ;նոյ;դեկ"),dddd:te("կիրակի;երկուշաբթի;երեքշաբթի;չորեքշաբթի;հինգշաբթի;ուրբաթ;շաբաթ"),ddd:te("կիր;երկ;երք;չրք;հնգ;ուր;շբթ")},"hy"),me(ne({decimal:",",mmmm:te("იანვარი;თებერვალი;მარტი;აპრილი;მაისი;ივნისი;ივლისი;აგვისტო;სექტემბერი;ოქტომბერი;ნოემბერი;დეკემბერი"),dddd:te("კვირა;ორშაბათი;სამშაბათი;ოთხშაბათი;ხუთშაბათი;პარასკევი;შაბათი")},3,3),"ka"),me(ne({decimal:",",mmmm:te("қаңтар;ақпан;наурыз;сәуір;мамыр;маусым;шілде;тамыз;қыркүйек;қазан;қараша;желтоқсан"),dddd:te("жексенбі;дүйсенбі;сейсенбі;сәрсенбі;бейсенбі;жұма;сенбі"),ddd:te("жс;дс;сс;ср;бс;жм;сб")},13,-1),"kk"),me({group:",",mmmm:te("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿಲ್;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂಬರ್;ಅಕ್ಟೋಬರ್;ನವೆಂಬರ್;ಡಿಸೆಂಬರ್"),mmm:te("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿ;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂ;ಅಕ್ಟೋ;ನವೆಂ;ಡಿಸೆಂ"),dddd:te("ಭಾನು~;ಸೋಮ~;ಮಂಗಳ~;ಬುಧ~;ಗುರು~;ಶುಕ್ರ~;ಶನಿ~","ವಾರ"),ddd:te("ಭಾನು;ಸೋಮ;ಮಂಗಳ;ಬುಧ;ಗುರು;ಶುಕ್ರ;ಶನಿ"),ampm:te("ಪೂರ್ವಾಹ್ನ;ಅಪರಾಹ್ನ")},"kn"),me({decimal:",",mmmm:te("sausio;vasario;kovo;balandžio;gegužės;birželio;liepos;rugpjūčio;rugsėjo;spalio;lapkričio;gruodžio"),mmm:te("saus.;vas.;kov.;bal.;geg.;birž.;liep.;rugp.;rugs.;spal.;lapkr.;gruod."),dddd:te("sekmadienis;pirmadienis;antradienis;trečiadienis;ketvirtadienis;penktadienis;šeštadienis"),ddd:te("sk;pr;an;tr;kt;pn;št"),ampm:te("priešpiet;popiet")},"lt"),me({decimal:",",mmmm:te("janvāris;februāris;marts;aprīlis;maijs;jūnijs;jūlijs;augusts;septembris;oktobris;novembris;decembris"),mmm:te("janv.;febr.;marts;apr.;maijs;jūn.;jūl.;aug.;sept.;okt.;nov.;dec."),dddd:te("svētdiena;pirmdiena;otrdiena;trešdiena;ceturtdiena;piektdiena;sestdiena"),ddd:te("svētd.;pirmd.;otrd.;trešd.;ceturtd.;piektd.;sestd."),ampm:te("priekšpusdienā;pēcpusdienā")},"lv"),me({group:",",decimal:".",mmmm:te("ജനുവരി;ഫെബ്രുവരി;മാർച്ച്;ഏപ്രിൽ;മേയ്;ജൂൺ;ജൂലൈ;ഓഗസ്റ്റ്;സെപ്റ്റംബർ;ഒക്‌ടോബർ;നവംബർ;ഡിസംബർ"),mmm:te("ജനു;ഫെബ്രു;മാർ;ഏപ്രി;മേയ്;ജൂൺ;ജൂലൈ;ഓഗ;സെപ്റ്റം;ഒക്ടോ;നവം;ഡിസം"),dddd:te("ഞായറാഴ്‌ച;തിങ്കളാഴ്‌ച;ചൊവ്വാഴ്ച;ബുധനാഴ്‌ച;വ്യാഴാഴ്‌ച;വെള്ളിയാഴ്‌ച;ശനിയാഴ്‌ച"),ddd:te("ഞായർ;തിങ്കൾ;ചൊവ്വ;ബുധൻ;വ്യാഴം;വെള്ളി;ശനി")},"ml"),me({group:",",decimal:".",mmmm:te("нэгдүгээ~;хоёрдугаа~;гуравдугаа~;дөрөвдүгээ~;тавдугаа~;зургаадугаа~;долоодугаа~;наймдугаа~;есдүгээ~;аравдугаа~;арван нэгдүгээ~;арван хоёрдугаа~","р сар"),mmm:te("1~;2~;3~;4~;5~;6~;7~;8~;9~;10~;11~;12~","-р сар"),dddd:te("ням;даваа;мягмар;лхагва;пүрэв;баасан;бямба"),ddd:te("Ня;Да;Мя;Лх;Пү;Ба;Бя"),ampm:te("ү.ө.;ү.х.")},"mn"),me({group:",",decimal:".",mmmm:te("जानेवारी;फेब्रुवारी;मार्च;एप्रिल;मे;जून;जुलै;ऑगस्ट;सप्टेंबर;ऑक्टोबर;नोव्हेंबर;डिसेंबर"),mmm:te("जाने;फेब्रु;मार्च;एप्रि;मे;जून;जुलै;ऑग;सप्टें;ऑक्टो;नोव्हें;डिसें"),dddd:te("रविवार;सोमवार;मंगळवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:te("रवि;सोम;मंगळ;बुध;गुरु;शुक्र;शनि")},"mr"),me(ne({group:",",decimal:".",mmmm:te("ဇန်နဝါရီ;ဖေဖော်ဝါရီ;မတ်;ဧပြီ;မေ;ဇွန်;ဇူလိုင်;ဩဂုတ်;စက်တင်ဘာ;အောက်တိုဘာ;နိုဝင်ဘာ;ဒီဇင်ဘာ"),mmm:te("ဇန်;ဖေ;မတ်;ဧ;မေ;ဇွန်;ဇူ;ဩ;စက်;အောက်;နို;ဒီ"),dddd:te("တနင်္ဂနွေ;တနင်္လာ;အင်္ဂါ;ဗုဒ္ဓဟူး;ကြာသပတေး;သောကြာ;စနေ"),ampm:te("နံနက်;ညနေ")},-1,0),"my"),me({group:",",decimal:".",mmmm:te("ਜਨਵਰੀ;ਫ਼ਰਵਰੀ;ਮਾਰਚ;ਅਪ੍ਰੈਲ;ਮਈ;ਜੂਨ;ਜੁਲਾਈ;ਅਗਸਤ;ਸਤੰਬਰ;ਅਕਤੂਬਰ;ਨਵੰਬਰ;ਦਸੰਬਰ"),mmm:te("ਜਨ;ਫ਼ਰ;ਮਾਰਚ;ਅਪ੍ਰੈ;ਮਈ;ਜੂਨ;ਜੁਲਾ;ਅਗ;ਸਤੰ;ਅਕਤੂ;ਨਵੰ;ਦਸੰ"),dddd:te("ਐਤਵਾਰ;ਸੋਮਵਾਰ;ਮੰਗਲਵਾਰ;ਬੁੱਧਵਾਰ;ਵੀਰਵਾਰ;ਸ਼ੁੱਕਰਵਾਰ;ਸ਼ਨਿੱਚਰਵਾਰ"),ddd:te("ਐਤ;ਸੋਮ;ਮੰਗਲ;ਬੁੱਧ;ਵੀਰ;ਸ਼ੁੱਕਰ;ਸ਼ਨਿੱਚਰ"),ampm:te("ਪੂ.ਦੁ.;ਬਾ.ਦੁ.")},"pa"),me({group:".",decimal:",",mmmm:te("ianuarie;februarie;martie;aprilie;mai;iunie;iulie;august;septem~;octom~;noiem~;decem~","brie"),mmm:te("ian.;feb.;mar.;apr.;mai;iun.;iul.;aug.;sept.;oct.;nov.;dec."),dddd:te("duminică;luni;marți;miercuri;joi;vineri;sâmbătă"),ddd:te("dum.;lun.;mar.;mie.;joi;vin.;sâm."),ampm:te("a.m.;p.m.")},"ro"),me(ne({group:".",decimal:",",mmmm:te("januar;februar;marec;april;maj;junij;julij;avgust;september;oktober;november;december"),mmm:te("jan.;feb.;mar.;apr.;maj;jun.;jul.;avg.;sep.;okt.;nov.;dec."),dddd:te("nedelja;ponedeljek;torek;sreda;četrtek;petek;sobota"),ampm:te("dop.;pop.")},-1,13),"sl"),me(ne({group:".",decimal:",",mmmm:te("јануар;фебруар;март;април;мај;јун;јул;август;септембар;октобар;новембар;децембар"),dddd:te("недеља;понедељак;уторак;среда;четвртак;петак;субота")},3,3),"sr"),me({group:",",decimal:".",mmmm:te("ஜனவரி;பிப்ரவரி;மார்ச்;ஏப்ரல்;மே;ஜூன்;ஜூலை;ஆகஸ்ட்;செப்டம்பர்;அக்டோபர்;நவம்பர்;டிசம்பர்"),mmm:te("ஜன.;பிப்.;மார்.;ஏப்.;மே;ஜூன்;ஜூலை;ஆக.;செப்.;அக்.;நவ.;டிச."),dddd:te("ஞாயிறு;திங்கள்;செவ்வாய்;புதன்;வியாழன்;வெள்ளி;சனி"),ddd:te("ஞாயி.;திங்.;செவ்.;புத.;வியா.;வெள்.;சனி")},"ta"),me({group:",",decimal:".",mmmm:te("జనవరి;ఫిబ్రవరి;మార్చి;ఏప్రిల్;మే;జూన్;జులై;ఆగస్టు;సెప్టెంబర్;అక్టోబర్;నవంబర్;డిసెంబర్"),mmm:te("జన;ఫిబ్ర;మార్చి;ఏప్రి;మే;జూన్;జులై;ఆగ;సెప్టెం;అక్టో;నవం;డిసెం"),dddd:te("ఆదివారం;సోమవారం;మంగళవారం;బుధవారం;గురువారం;శుక్రవారం;శనివారం"),ddd:te("ఆది;సోమ;మంగళ;బుధ;గురు;శుక్ర;శని")},"te"),me({decimal:",",mmmm:te("січня;лютого;березня;квітня;травня;червня;липня;серпня;вересня;жовтня;листопада;грудня"),mmm:te("січ.;лют.;бер.;квіт.;трав.;черв.;лип.;серп.;вер.;жовт.;лист.;груд."),dddd:te("неділю;понеділок;вівторок;середу;четвер;пʼятницю;суботу"),ddd:te("нд;пн;вт;ср;чт;пт;сб"),ampm:te("дп;пп")},"uk"),me({group:".",decimal:",",mmmm:te("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","tháng "),mmm:te("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","thg "),dddd:te("Chủ Nhật;Thứ Hai;Thứ Ba;Thứ Tư;Thứ Năm;Thứ Sáu;Thứ Bảy"),ddd:te("CN;Th 2;Th 3;Th 4;Th 5;Th 6;Th 7"),ampm:te("SA;CH")},"vi"),me(ne({group:"٬",decimal:"٫",ampm:te("ص;م"),mmmm:te("يناير;فبراير;مارس;أبريل;مايو;يونيو;يوليو;أغسطس;سبتمبر;أكتوبر;نوفمبر;ديسمبر"),dddd:te("الأحد;الاثنين;الثلاثاء;الأربعاء;الخميس;الجمعة;السبت"),mmmm6:te("رمضان;شوال;ذو القعدة;ذو الحجة;محرم;ربيع الأول;ربيع الآخرة;جمادى الأولى;جمادى الآخرة;رجب;شعبان;رمضان")},0,0,0),"ar"),me({group:",",decimal:".",mmmm:te("জানুয়ারী;ফেব্রুয়ারী;মার্চ;এপ্রিল;মে;জুন;জুলাই;আগস্ট;সেপ্টেম্বর;অক্টোবর;নভেম্বর;ডিসেম্বর"),mmm:te("জানু;ফেব;মার্চ;এপ্রি;মে;জুন;জুল;আগ;সেপ্টেঃ;অক্টোঃ;নভেঃ;ডিসেঃ"),dddd:te("রবিবার;সোমবার;মঙ্গলবার;বুধবার;বৃহস্পতিবার;শুক্রবার;শনিবার"),ddd:te("রবি;সোম;মঙ্গল;বুধ;বৃহস্পতি;শুক্র;শনি")},"bn"),me({group:",",decimal:".",mmmm:te("जनवरी;फ़रवरी;मार्च;अप्रैल;मई;जून;जुलाई;अगस्त;सितंबर;अक्तूबर;नवंबर;दिसंबर"),mmm:te("जन॰;फ़र॰;मार्च;अप्रैल;मई;जून;जुल॰;अग॰;सित॰;अक्तू॰;नव॰;दिस॰"),dddd:te("रविवार;सोमवार;मंगलवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:te("रवि;सोम;मंगल;बुध;गुरु;शुक्र;शनि"),ampm:te("am;pm")},"hi");const ve={overflow:"######",dateErrorThrows:!1,dateErrorNumber:!0,dateSpanLarge:!0,leap1900:!0,nbsp:!1,throws:!0,invalid:"######",locale:"",ignoreTimezone:!1,grouping:[3,3],indexColors:!0,skipChar:"",repeatChar:""};function _e(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if("number"!=typeof e)return e;if(e<0)return-_e(-e,t);if(t){const n=10**t||1;return _e(e*n,0)/n}return Math.round(e)}const je=1e-13;function ke(e){const t=e<0?-1:1,n=10**((arguments.length>1&&void 0!==arguments[1]?arguments[1]:2)||2),a=10**((arguments.length>2&&void 0!==arguments[2]?arguments[2]:2)||2);let r,i,s=Math.abs(e),o=0,m=0,d=0,l=1;if((e=s)%1==0)i=[e*t,1];else if(e<1e-19)i=[t,1e19];else if(e>1e19)i=[1e19*t,1];else{do{if(s=1/(s-Math.floor(s)),r=l,l=l*Math.floor(s)+o,o=r,m=d,d=Math.floor(e*l+.5),d>=n||l>=a)return[t*m,o]}while(Math.abs(e-d/l)>=je&&s!==Math.floor(s));i=[t*d,l]}return i}const Me=Math.floor;function xe(e){if((!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&e>=0){if(0===e)return[1900,1,0];if(60===e)return[1900,2,29];if(e<60)return[1900,e<32?1:2,(e-1)%31+1]}let t=e+68569+2415019;const n=Me(4*t/146097);t-=Me((146097*n+3)/4);const a=Me(4e3*(t+1)/1461001);t=t-Me(1461*a/4)+31;const r=Me(80*t/2447),i=t-Me(2447*r/80);t=Me(r/11);return[0|100*(n-49)+a+t,0|r+2-12*t,0|i]}function Fe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const a=Me(e);return t===u?function(e){if(60===e)throw new Error("#VALUE!");if(e<=1)return[1317,8,29];if(e<60)return[1317,e<32?9:10,1+(e-2)%30];const t=10631/30,n=.1335;let a=e+466935;const r=Me(a/10631);a-=10631*r;const i=Me((a-n)/t);a-=Me(i*t+n);const s=Me((a+28.5001)/29.5);return 13===s?[30*r+i,12,30]:[30*r+i,s,a-Me(29.5001*s-29)]}(a):t===d?function(e){return xe(e+1462)}(a):xe(a,n)}const we=Math.floor,ze=86400;function Ce(e,t){let n=null;if(Array.isArray(e)){const[t,a,r,i,s,o]=e;n=Date.UTC(t,null==a?0:a-1,null!=r?r:1,i||0,s||0,o||0)}else if(e instanceof Date&&(n=1*e,!t||!t.ignoreTimezone)){const t=new Date;t.setUTCFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t.setUTCHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n=1*t}if(null!=n&&isFinite(n)){const e=n/864e5;return e-(e<=-25509?-25568:-25569)}return null}const Se={};function Ae(e,t){if(e){const n=e[0];t[n]=t[n]||{},Ae(e.slice(1),t[n])}else t.$=!0}["d-F-y","d-F-Y","d-M-y","d-M-Y","F-d-y","F-d-Y","F-j-y","F-j-Y","j-F-y","j-F-Y","j-M-y","j-M-Y","M-d-y","M-d-Y","M-j-y","M-j-Y","m-d-y","m-d-Y","m-j-y","m-j-Y","n-d-y","n-d-Y","n-j-y","n-j-Y","y-F-d","y-F-j","y-M-d","y-M-j","Y-F-d","Y-F-j","Y-M-d","Y-m-d","Y-M-j","Y-m-j","Y-n-d","Y-n-j","j-F","j-M","d-F","d-M","n-d","n-j","n-Y","m-d","m-j","m-Y","M-Y","M-y","F-y","F-Y","Y-M","Y-n","Y-m","Y-F","Y-M"].forEach((e=>{Ae(e,Se),Ae(e+" x",Se),Ae(e+" l",Se),Ae(e+" l x",Se),Ae("l "+e,Se),Ae("l "+e+" x",Se),Ae(e+" D",Se),Ae(e+" D x",Se),Ae("D "+e,Se),Ae("D "+e+" x",Se)}));const Ee={jan:1,feb:2,mar:3,apr:4,may:5,jun:6,jul:7,aug:8,sep:9,oct:10,nov:11,dec:12},Ie={january:1,february:2,march:3,april:4,june:6,july:7,august:8,september:9,october:10,november:11,december:12},De={sunday:"l",monday:"l",tuesday:"l",wednesday:"l",thursday:"l",friday:"l",saturday:"l",sun:"D",mon:"D",tue:"D",wed:"D",thu:"D",fri:"D",sat:"D"},Oe=(new Date).getUTCFullYear();function Te(e){const t=new RegExp("^([\\s+%"+V.join("")+"(-]*)(((?:(?:\\d[\\d,]*)(?:\\.\\d*)?|(?:\\.\\d+)))([eE][+-]?\\d+)?)([\\s%"+V.join("")+")]*)$").exec(e);if(t){const[,e,n,a,r,i]=t;let s=1,o="",m=!1,d=!1,l=!1,u=!1,c=!1,p=null,f=!1,h=parseFloat(n.replace(/,/g,""));if(!isFinite(h))return null;for(let t=0;t<e.length;t++){const n=e[t];if("-"===n){if(m||d)return null;m=!0,s=-1}else if(K.test(n)){if(c)return null;c=!0,p=n}else if("("===n){if(d||m)return null;d=!0,s=-1}else if("%"===n){if(u)return null;u=!0}}for(let e=0;e<i.length;e++){const t=i[e];if(K.test(t)){if(c)return null;c=!0,p=t,f=!0}else if(")"===t){if(l||!d)return null;l=!0}else if("%"===t){if(u)return null;u=!0}}if(r){if(u||c)return null;o="0.00E+00"}else if(u){if(c)return null;o=a.includes(".")?"0.00%":"0%",h*=.01}else if(c){const e=a.includes(".")?"#,##0.00":"#,##0";o=f?e+p:p+e}else a.includes(",")&&(o=a.includes(".")?"#,##0.00":"#,##0");const g={v:h*s};return o&&(g.z=o),g}return null}const Ne=(e,t,n)=>{const a=n.path||"",r=Object.keys(t);for(let i=0;i<r.length;i++){let s;const o=r[i];if(t[o]){if("$"===o||"€"===o)e||(s=n);else if("-"===o){const r=/^(\s*([./-]|,\s)\s*|\s+)/.exec(e);if(r){const i="-"===r[1]||"/"===r[1]||"."===r[1]?r[1]:" ";if(!n.sep||n.sep===i){const m=r[0].replace(/\s+/g," ");s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{sep:i,path:a+m}))}}}else if(" "===o){const r=/^[,.]?\s+/.exec(e);if(r){const i=r[0].replace(/\s+/g," ");s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{path:a+i}))}}else if("j"===o||"d"===o){const r=/^(0?[1-9]|1\d|2\d|3[01])\b/.exec(e);r&&(s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{day:r[0],path:a+o})))}else if("n"===o||"m"===o){const r=/^(0?[1-9]|1[012])\b/.exec(e);r&&(s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{month:+r[0],_mon:r[0],path:a+o})))}else if("F"===o||"M"===o){const r=/^([a-z]{3,9})\b/i.exec(e),i=r&&("F"===o?Ie:Ee)[r[0].toLowerCase()];i&&(s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{month:i,_mon:r[0],path:a+o})))}else if("l"===o||"D"===o){const r=/^([a-z]{3,9})\b/i.exec(e);(r&&De[r[0].toLowerCase()])===o&&(s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{path:a+o})))}else if("y"===o){const r=/^\d\d\b/.exec(e);if(r){const i=+r[0]>=30?+r[0]+1900:+r[0]+2e3;s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{year:i,path:a+o}))}}else if("Y"===o){const r=/^\d\d\d\d\b/.exec(e);r&&(s=Ne(e.slice(r[0].length),t[o],X(X({},n),{},{year:+r[0],path:a+o})))}else{if("x"!==o)throw new Error('Unknown date token "'.concat(o,'"'));{const r=Ye(e);r&&(s=Ne("",t[o],X(X({},n),{},{time:r.v,tf:r.z,path:a+o})))}}if(s)return s}}};function Pe(e){const t=Ne(e.trim(),Se,{path:""});if(t){var n;if("."===t.sep&&3===t.path.length)return null;const e=+(null!==(n=t.year)&&void 0!==n?n:Oe);if(t.day||(t.day=1),!function(e,t,n){if(n<1)return!1;if(t<1||t>12)return!1;if(2===t){if(n>(e%4==0&&e%100!=0||e%400==0||1900===e?29:28))return!1}else if((4===t||6===t||9===t||11===t)&&n>30||(1===t||3===t||5===t||7===t||8===t||10===t||12===t)&&n>31)return!1;return!0}(e,t.month,t.day))return null;let a=-1/0;if(e<1900)return null;e<=1900&&t.month<=2?a=25568:e<1e4&&(a=25569);const r=Date.UTC(e,t.month-1,t.day)/864e5+a+(t.time||0);if(r>=0&&r<=2958465){const e="0"===t._mon[0]||"0"===t.day[0]||2===t._mon.length&&2===t.day.length;return{v:r,z:t.path.replace(/[jdlDnmMFyYx-]/g,(n=>"j"===n||"d"===n?e?"dd":"d":"D"===n?"ddd":"l"===n?"dddd":"n"===n||"m"===n?e?"mm":"m":"M"===n?"mmm":"F"===n?"mmmm":"y"===n?"yy":"x"===n?t.tf||"":"Y"===n?"yyyy":n))}}}return null}function Ye(e){const t=/^\s*([10]?\d|2[0-4])(?::([0-5]\d|\d))?(?::([0-5]\d|\d))?(\.\d{1,10})?(?:\s*([AP])M?)?\s*$/i.exec(e);if(t){const[,e,n,a,r,i]=t;if(r&&!a)return null;if(!i&&!n&&!a)return null;let s=1*(e||0);if(i){if(s>=13)return null;"p"!==i[0]&&"P"!==i[0]||(s+=12)}return{v:(60*s*60+60*(1*(n||0))+1*(a||0)+1*(r||0))/86400,z:(2===e.length?"hh":"h")+":mm"+(a?":ss":"")+(i?" AM/PM":"")}}return null}function Re(e){return/^\s*true\s*$/i.test(e)?{v:!0}:/^\s*false\s*$/i.test(e)?{v:!1}:null}function Le(e,t,n){return t[n+"_max"]=e.length,t[n+"_min"]=e.replace(/#/g,"").length,t}function Ue(e,t){"string"==typeof e?t.push({type:"string",value:e}):t.push(e)}function He(e,t){const n=e&&e.type;return n===p||n===f||n===h||n===z&&"den"===t}function Be(d){const p=[],h={scale:1,percent:!1,text:!1,date:0,date_eval:!1,date_system:l,sec_decimals:0,general:!1,clock:24,int_pattern:[],frac_pattern:[],man_pattern:[],den_pattern:[],num_pattern:[],tokens:p};let P="int",$=null;const V=[];let K,Z=!1,W=-1,X=!1,q="",Q=!1;for(;++W<d.length&&!X;){var ee;const re=d[W],se=re.type||S;if(q+=re.raw,se===c)h.general=!0,Ue(re,p);else if(He(re,P)){var te;const e=h[P+"_pattern"];He(K,P)||(null===(te=K)||void 0===te?void 0:te.type)===b?(e.push((e.pop()||"")+re.value),$.num+=re.value):(e.push(re.value),$={type:P,num:re.value},Ue($,p))}else if(se===G)"("===re.value&&(h.parens=!0),Ue(re.value,p);else if(se===z)Ue(re.value,p);else if(se===g)if(Q=!0,h[P+"_pattern"].length){if(!$)throw new SyntaxError("Format pattern is missing a numerator");h.fractions=!0,h.num_pattern.push(h[P+"_pattern"].pop()),$.type="num",P="den",Ue({type:"div"},p)}else Ue(re.value,p);else if(se===v)Ue(",",p);else if(se===y)h.scale=.001**re.raw.length;else if(se===b){if("int"===P&&(h.grouping=!0),"den"===P)throw new SyntaxError("Cannot group denominator digits")}else if(se===F)Ue(re,p);else{if(se===_){X=!0;break}if(se===j)h.text=!0,Ue(re,p);else if(se===k||se===M)Ue(re,p);else if(se===E){const e=re.value.toLowerCase(),t=e[0],n={type:"",size:0,date:1,pad:e.length};"h"===t?(n.size=a,n.type="hour-elap"):"m"===t?(n.size=r,n.type="min-elap"):(n.size=i,n.type="sec-elap"),h.date=h.date|n.size,V.push(n),Ue(n,p)}else if(h.date&&se===x&&(null===(ee=d[W+1])||void 0===ee?void 0:ee.type)===f){var ne,ae;let e=1;W++;let t="0";(null===(ne=d[W+1])||void 0===ne?void 0:ne.type)===f&&(t+="0",e=2,W++),(null===(ae=d[W+1])||void 0===ae?void 0:ae.type)===f&&(t+="0",e=3,W++),q+=t;const n=[i,s,o,m][e];h.date=h.date|n,h.date_eval=!0,h.sec_decimals=Math.max(h.sec_decimals,e),Ue({type:"subsec",size:n,decimals:e,date:1},p)}else if(se===C)Z||("B2"===re.value||"b2"===re.value?h.date_system=u:h.date_system=l);else if(se===A){const s={type:"",size:0,date:1},o=re.value.toLowerCase(),m=o[0];if("y"===o||"yy"===o)s.size=e,s.type="year-short";else if("y"===m||"e"===m)s.size=e,s.type="year";else if("b"===o||"bb"===o)s.size=e,s.type="b-year-short";else if("b"===m)s.size=e,s.type="b-year";else if("d"===o||"dd"===o)s.size=n,s.type="day",s.pad=/dd/.test(o);else if("ddd"===o||"aaa"===o)s.size=n,s.type="weekday-short";else if("d"===m||"a"===m)s.size=n,s.type="weekday";else if("h"===m)s.size=a,s.type="hour",s.pad=/hh/i.test(o);else if("m"===m){3===o.length?(s.size=t,s.type="monthname-short"):5===o.length?(s.size=t,s.type="monthname-single"):o.length>=4&&(s.size=t,s.type="monthname");const e=V[V.length-1];!s.type&&e&&!e.used&&e.size&(a|i)&&(e.used=!0,s.size=r,s.type="min",s.pad=/mm/.test(o)),s.type||(s.size=t,s.type="month",s.pad=/mm/.test(o),s.indeterminate=!0)}else if("s"===m){s.size=i,s.type="sec",s.pad=/ss/.test(o);const e=V[V.length-1];e&&e.size&r?s.used=!0:e&&e.indeterminate&&(delete e.indeterminate,e.size=r,e.type="min",s.used=!0)}h.date=h.date|s.size,h.date_eval=!0,V.push(s),Ue(s,p)}else if(se===Y)h.clock=12,h.date=h.date|a,h.date_eval=!0,re.short="A/P"===re.value,Ue(re,p);else if(se===L||se===R||se===J)Ue(re.value,p);else if(se===I)h.condition=[re.value[0],parseFloat(re.value[1])];else if(se===T){const e=re.value.split("-"),t=e.length<2?"":e.slice(1).join("-"),n=e[0];n&&Ue(n,p);const a=ie(t);a&&(h.locale=a);const r=parseInt(t,16);if(isFinite(r)&&16711680&r){6===(r>>16&255)&&(h.date_system=u)}Z=!0}else if(se===N){let e,t=re.value.toLowerCase();(e=/^color\s*(\d+)$/i.exec(t))&&(t=parseInt(e[1],10)),h.color=t}else if(se===w)h.scale=100,h.percent=!0,Ue("%",p);else if(se===x)Ue(re,p),h.date||(h.dec_fractions=!0,P="frac");else if(se===H)h.exponential=!0,h.exp_plus=re.value.includes("+"),P="man",Ue({type:"exp",plus:h.exp_plus},p);else if(se===U)Ue(re,p);else if(se===B)Ue(re,p);else if(se!==D&&se!==O)throw se===S?new SyntaxError("Illegal character: ".concat(q)):new SyntaxError("Unknown token ".concat(se," in ").concat(q))}K=re}if(h.tokensUsed=W,h.pattern=q,/^((?:\[[^\]]+\])+)(;|$)/.test(h.pattern)&&!/^\[(?:h+|m+|s+)\]/.test(h.pattern)&&Ue({type:"text"},p),h.fractions&&h.dec_fractions||h.grouping&&!h.int_pattern.length||h.fractions&&h.exponential||h.fractions&&h.den_pattern.length*h.num_pattern.length==0||Q&&!h.fractions&&!h.date||h.exponential&&(h.int_pattern.length||h.frac_pattern.length)*h.man_pattern.length==0)throw new SyntaxError("Invalid pattern: ".concat(q));const re=h.int_pattern.join(""),se=h.man_pattern.join(""),oe=h.frac_pattern.join("");Le(re,h,"int");let me=0;for(let e=0;e<re.length;e++){const t=re[re.length-1-e];/^[0-9?]/.test(t)&&(me=e+1)}h.int_min=me,Le(oe,h,"frac"),Le(se,h,"man");let de=h.num_pattern.join(""),le=h.den_pattern[0]||"";if(le.includes("?")||de.includes("?")?(le=le.replace(/\d/g,"?"),le=le.replace(/#$/g,"?"),Le(de,h,"num"),Le(le,h,"den"),de=de.replace(/#$/g,"?")):(Le(de,h,"num"),Le(le,h,"den")),h.int_p=re,h.man_p=se,h.num_p=de,h.den_p=le,h.den_pattern.length&&(h.denominator=parseInt(h.den_pattern.join("").replace(/\D/g,""),10)),h.integer=!!re.length,!h.integer&&!h.exponential&&oe.length){const e=h.tokens.findIndex((e=>"point"===e.type));h.tokens.splice(e,0,{type:"int",value:"#"}),h.integer=!0,h.int_pattern=["#"],h.int_p="#"}if(h.fractions)for(let e=0;e<p.length-1;e++){const t=p[e];if("string"!==t.type&&"space"!==t.type)continue;const n=p[e+1].type;"num"===n?t.rule="num+int":"div"===n?t.rule="num":"den"===n&&(t.rule="den")}return h.grouping&&h.int_pattern.length>1&&(h.grouping=!1),h}const Ge={total:1,sign:0,period:0,int:1,frac:0};const Je=(e,t)=>e.replace(/\./,t.decimal);function $e(e,t,n,a){const r=0|n;if("string"==typeof n)e.push(n);else if(n===r)e.push(Math.abs(r));else{const t=Math.abs(n);let r=t?Math.floor(Math.log10(t)):0,i=t*10**-r;10===i&&(i=1,r++);const s=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Math.abs(e);if(!n)return Ge;const a=t&&e<0?1:0,r=Math.floor(n),i=Math.floor(Math.log10(n)+1);let s=0,o=0;if(r!==n){s=1;const e=String(_e(n*10**-i,15));let t=e.length,a=!0,r=0;for(;r<=e.length;){if("."===e[r]){t--;break}"0"===e[r]&&a?t--:a=!1,r++}o=t-i,o<0&&(o=0,s=0)}return{total:a+Math.max(i,1)+s+o,digits:Math.max(i,0)+o,sign:a,period:s,int:Math.max(i,1),frac:o}}(t),o=()=>{const t=Math.abs(r);let n;n=1===i?i:_e(i,5),e.push(Je(n+"",a),a.exponent,r<0?a.negative:a.positive,t<10?"0":"",t)};if(r>=-4&&r<=-1){const n=t.toPrecision(10+r).replace(/\.?0+$/,"");e.push(Je(n,a))}else if(10===r){const n=t.toFixed(10).slice(0,12).replace(/\.$/,"");e.push(Je(n,a))}else if(Math.abs(r)<=9)if(s.total<=11){const n=_e(t,9).toFixed(s.frac);e.push(Je(n,a))}else 9===r?e.push(Math.floor(t)):r>=0&&r<9?e.push(_e(t,9-r)):o();else s.total>=12?o():Math.floor(t)===t?e.push(Math.floor(t)):e.push(Je(_e(t,9).toFixed(s.frac),a))}return e}function Ve(e){return"0"===e?"0":"?"===e?arguments.length>1&&void 0!==arguments[1]&&arguments[1]?" ":" ":""}const Ke=86400,Ze=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Math.floor(Math.log10(e));return t>1?Math.floor(n/t)*t:n},We=(e,t,n)=>n?e<-694324||t>=35830291:e<0||t>=2958466;function Xe(e,t,n,a){var r,i;let d="",l="",c="",p="",f="",h="",g=0,b=0|e,y=0,v=0,_=1,j=0,k=0,M=0,x=0,F=0,w=0;const z=a||de;if(!t.text&&isFinite(t.scale)&&1!==t.scale&&(e=function(e){if(0===e)return e;const t=Math.ceil(Math.log10(e<0?-e:e)),n=10**(16-Math.floor(t));return isFinite(n)?Math.round(e*n)/n:0}(e*t.scale)),t.exponential){let n=Math.abs(e);if(n){const e=10**-Ze(n,t.int_max),a=_e(n*e,t.frac_max)/e;g=Ze(a,t.int_max)}e&&!t.integer&&g++,n*=10**-g,e=e<0?-n:n,d+=Math.abs(g)}if(t.integer){const n=Math.abs(_e(e,t.fractions?1:t.frac_max));h+=n<1?"":Math.floor(n)}const C=null!==(r=n.grouping[0])&&void 0!==r?r:3,S=null!==(i=n.grouping[1])&&void 0!==i?i:C;t.dec_fractions&&(f=String(_e(e,t.frac_max)).split(".")[1]||"");const A=!t.error&&(t.num_p.includes("0")||t.den_p.includes("0"));let E=A;if(t.fractions){E=A||!!(e%1);const n=Math.abs(t.integer?e%1:e);if(n)if(E=!0,t.denominator&&isFinite(t.denominator))p+=t.denominator,c+=_e(n*t.denominator),"0"===c&&(c="",p="",E=A);else{const e=ke(n,1/0,t.den_max);c+=e[0],p+=e[1],t.integer&&"0"===c&&(c="",p="",E=A)}else e||t.integer||(E=!0,c="0",p="1");!t.integer||E||Math.trunc(e)||(h="0")}if(t.date){b=Math.trunc(e);const a=Ke*(e-b);if(y=Math.floor(a),w=a-y,Math.abs(w)<1e-6?w=0:w>.9999&&(w=0,y+=1,y===Ke&&(y=0,b+=1)),w){const e=t.date&m||t.date&o||t.date&s;(e===m&&w>.9995||e===o&&w>.995||e===s&&w>.95||!e&&w>=.5)&&(y++,w=0)}if(b||t.date_system){const a=Fe(e,t.date_system,n.leap1900);v=a[0],_=a[1],j=a[2]}if(y){const e=y<0?Ke+y:y;F=Math.floor(e)%60,x=Math.floor(e/60)%60,M=Math.floor(e/60/60)%60}if(k=(6+b)%7,t.date_eval&&We(e,b+y/Ke,n.dateSpanLarge)){if(n.dateErrorThrows)throw new Error("Date out of bounds");if(n.dateErrorNumber){return $e(e<0?[z.negative]:[],0,e,z).join("")}return n.overflow}}const I=Ve("?",n.nbsp);g<0?l="-":t.exp_plus&&(l="+");const D=[],O=(e,t,a,r)=>{const i=!r&&e.length>t.length?a.length+e.length-t.length:a.length;e.length<t.length&&(r+=e.length-t.length);for(let t=0;t<i;t++)D.push(e[t+r]||Ve(a[t],n.nbsp));return i};let T=!1;const N={int:0,frac:0,man:0,num:0,den:0};for(let r=0,i=t.tokens.length;r<i;r++){const i=t.tokens[r],s=i.type,o=i.num?i.num.length:0;if("string"===s)i.rule?"num"===i.rule?E?D.push(i.value.replace(/ /g,I)):(t.num_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,I)):"num+int"===i.rule?E&&h?D.push(i.value.replace(/ /g,I)):t.den_min>0&&(h||t.num_min)&&D.push(i.value.replace(/./g,I)):"den"===i.rule&&(E?D.push(i.value.replace(/ /g,I)):(t.den_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,I))):D.push(i.value.replace(/ /g,I));else if("space"===s)"num+int"===i.rule?(E||t.num_min||t.den_min)&&(h||t.num_min)&&D.push(I):D.push(I);else if("error"===s)D.push(n.invalid);else if("point"===s)D.push(t.date?i.value:z.decimal);else if("general"===s)$e(D,0,e,z);else if("exp"===s)D.push(z.exponent);else if("minus"===s)i.volatile&&t.date||i.volatile&&(e>=0||"number"!=typeof e)||(i.volatile&&!t.fractions&&(t.integer||t.dec_fractions)?(e<0&&h&&"0"!==h||f)&&D.push(z.negative):D.push(z.negative));else if("plus"===s)D.push(z.positive);else if("text"===s)D.push(e);else if("fill"===s)n.fillChar&&D.push(n.fillChar,i.value);else if("skip"===s)n.skipChar?D.push(n.skipChar,i.value):D.push(n.nbsp?" ":" ");else if("div"===s)E?D.push("/"):t.num_min>0||t.den_min>0?D.push(I):D.push(Ve("#",n.nbsp));else if("int"===s)if(1===t.int_pattern.length){const e=t.int_p;let a="";for(let r=Math.max(t.int_min,h.length);r>0;r--){const i=h.charAt(h.length-r),s=i?"":e.charAt(e.length-r)||e[0];let o="";if(t.grouping){const e=r-1-C;e>=0&&!(e%S)&&(o=i||"0"===s?z.group:Ve("?",n.nbsp))}a+=(i||Ve(s,n.nbsp))+o}D.push(a)}else N.int+=O(h,t.int_p,i.num,N.int);else if("frac"===s){const e=N.frac;for(let t=0;t<o;t++)D.push(f[t+e]||Ve(i.num[t],n.nbsp));N.frac+=o}else if("man"===s)N[s]||N.man||D.push(l),N.man+=O(d,t.man_p,i.num,N.man);else if("num"===s)N.num+=O(c,t.num_p,i.num,N.num);else if("den"===s){const e=N.den;for(let t=0;t<o;t++){let a=p[t+e];if(!a){const e=i.num[t];"123456789".includes(e)||T&&"0"===e?(T=!0,a=n.nbsp?" ":" "):a=T||t!==o-1||"0"!==e||p?Ve(e,n.nbsp):"1"}D.push(a)}N.den+=o}else if("year"===s)v<0&&D.push(z.negative),D.push(String(Math.abs(v)).padStart(4,"0"));else if("year-short"===s){const e=v%100;D.push(e<10?"0":"",e)}else if("month"===s)D.push(i.pad&&_<10?"0":"",_);else if("monthname-single"===s)t.date_system===u?D.push(z.mmmm6[_-1].charAt(0)):D.push(z.mmmm[_-1].charAt(0));else if("monthname-short"===s)t.date_system===u?D.push(z.mmm6[_-1]):D.push(z.mmm[_-1]);else if("monthname"===s)t.date_system===u?D.push(z.mmmm6[_-1]):D.push(z.mmmm[_-1]);else if("weekday-short"===i.type)D.push(z.ddd[k]);else if("weekday"===s)D.push(z.dddd[k]);else if("day"===s)D.push(i.pad&&j<10?"0":"",j);else if("hour"===s){const e=M%t.clock||(t.clock<24?t.clock:0);D.push(i.pad&&e<10?"0":"",e)}else if("min"===s)D.push(i.pad&&x<10?"0":"",x);else if("sec"===s)D.push(i.pad&&F<10?"0":"",F);else if("subsec"===s){D.push(z.decimal);const e=w.toFixed(t.sec_decimals);D.push(e.slice(2,2+i.decimals))}else if("ampm"===s){const e=M<12?0:1;i.short&&!a?D.push("AP"[e]):D.push(z.ampm[e])}else if("hour-elap"===s){e<0&&D.push(z.negative);const t=24*b+Math.floor(Math.abs(y)/3600);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("min-elap"===s){e<0&&D.push(z.negative);const t=1440*b+Math.floor(Math.abs(y)/60);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("sec-elap"===s){e<0&&D.push(z.negative);const t=b*Ke+Math.abs(y);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("b-year"===s)D.push(v+543);else if("b-year-short"===s){const e=(v+543)%100;D.push(e<10?"0":"",e)}}return D.join("")}const qe=Be([{type:j,value:"@",raw:"@"}]);function Qe(e,t){for(let n=0;n<3;n++){const a=t[n];if(a){let t;if(a.condition){const n=a.condition[0],r=a.condition[1];"="===n?t=e===r:">"===n?t=e>r:"<"===n?t=e<r:">="===n?t=e>=r:"<="===n?t=e<=r:"<>"===n&&(t=e!==r)}else t=!0;if(t)return a}}}function et(e){return!!(e[0]&&e[0].percent||e[1]&&e[1].percent||e[2]&&e[2].percent||e[3]&&e[3].percent)}function tt(e){return!!(e[0]&&e[0].date||e[1]&&e[1].date||e[2]&&e[2].date||e[3]&&e[3].date)}function nt(e){const[t,n,a,r]=e;return!(t&&!t.generated||n&&!n.generated||a&&!a.generated||!r||!r.text||r.generated)}const at={text:15,datetime:10.8,date:10.8,time:10.8,percent:10.6,currency:10.4,grouped:10.2,scientific:6,number:4,fraction:2,general:0,error:0},rt=[["DMY",1],["DM",2],["MY",3],["MDY",4],["MD",5],["hmsa",6],["hma",7],["hms",8],["hm",9]];const it=[[c,/^General/i,0],[p,/^#/,0],[f,/^0/,0],[h,/^\?/,0],[g,/^\//,0],[_,/^;/,0],[j,/^@/,0],[k,/^\+/,0],[M,/^-/,0],[x,/^\./,0],[F,/^ /,0],[w,/^%/,0],[z,/^[1-9]/,0],[C,/^(?:B[12])/i,0],[S,/^B$/,0],[A,/^(?:[hH]+|[mM]+|[sS]+|[yY]+|[bB]+|[dD]+|[gG]+|[aA]{3,}|e+)/,0],[E,/^(?:\[(h+|m+|s+)\])/i,1],[I,/^\[(<[=>]?|>=?|=)\s*(-?[.\d]+)\]/,[1,2]],[D,/^\[(DBNum[0-4]?\d)\]/i,1],[O,/^\[(NatNum[0-4]?\d)\]/i,1],[T,/^\[\$([^\]]+)\]/,1],[N,/^\[(black|blue|cyan|green|magenta|red|white|yellow|color\s*\d+)\]/i,1],[P,/^\[([^\]]+)\]/,1],[Y,/^(?:AM\/PM|am\/pm|A\/P)/,0],[R,/^\\(.)/,1],[L,/^"([^"]*?)"/,1],[U,/^_(\\.|.)/,1],[H,/^[Ee]([+-])/,1],[B,/^\*(\\.|.)/,1],[G,/^[()]/,0],[S,/^[EÈÉÊËèéêëĒēĔĕĖėĘęĚěȄȅȆȇȨȩNnÑñŃńŅņŇňǸǹ["*/\\_]/,0],[J,/^./,0]],st=e=>{const t=(e||"\0").charCodeAt(0);return 63===t||35===t||t>=48&&t<=57};function ot(e){let t=0;const n=[],a=[];for(;t<e.length;){const r=e.slice(t);let i=0;const s=/^(,+)(.)?/.exec(r);if(s){const r=s[1];i=r.length;const o=e[t-1]||"";let m=!1,d=!1;st(o)?(m=!0,d=!0):"."===o&&(d=!0);const l=s[2]||"";if(!m||l&&";"!==l||(m=!1),d&&st(l)&&(d=!1),m&&!d)n.push({type:b,value:",",raw:r});else if(!m&&d)n.push({type:y,value:",",raw:r});else if(m&&d){const e={type:y,value:",",raw:r};n.push(e),a.push(e)}else n.push({type:v,value:",",raw:r})}else{let e;for(const[t,a,s]of it){const o=a.exec(r);if(o){e={type:t,value:Array.isArray(s)?s.map((e=>o[e])):o[s||0],raw:o[0]},n.push(e),i=o[0].length;break}}a.length&&";"===e.raw&&(a.length=0),a.length&&st(e.raw)&&(a.forEach((e=>e.type=b)),a.length=0)}if(!i){const e=r[0];i=1,n.push({type:J,value:e,raw:e})}t+=i}return n}const mt=e=>{const t=e.condition;t&&t[1]<0&&("<"===t[0]||"<="===t[0]||"="===t[0])||e.tokens.unshift({type:"minus",volatile:!0})},dt=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n={};for(const t in e)Array.isArray(e[t])?n[t]=[...e[t]]:n[t]=e[t];return t&&n.tokens.unshift(t),n.generated=!0,n};const lt=Object.create({});function ut(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e||(e="General");let n=lt[e];if(!n)try{n=function(e){const t=[];let n,a=!1,r=null,i=0,s=!1,o=0,m=0,d=ot(e);do{var l;if(s=Be(d),(s.date||s.general)&&(s.int_pattern.length||s.frac_pattern.length||1!==s.scale||s.text))throw new Error("Illegal format");if(s.condition&&(m++,a=!0),s.text){if(r)throw new Error("Unexpected partition");r=s}s.locale&&(n=ie(s.locale)),t.push(s),i="break"===(null===(l=d[s.tokensUsed])||void 0===l?void 0:l.type)?1:0,d=d.slice(s.tokensUsed+i),o++}while(i&&o<4&&m<3);if(i)throw new Error("Unexpected partition");if(m>2)throw new Error("Unexpected condition");const u=t[3];if(u&&(u.int_pattern.length||u.frac_pattern.length||u.date))throw new Error("Unexpected partition");if(a){const e=t.length;if(1===e&&(t[1]=Be(ot("General")),t[1].generated=!0),e<3){const e=t[0],n=t[1];if(mt(e),n.condition)mt(n);else{const t=e.condition;("="===t[0]||t[1]>=0&&(">"===t[0]||">="===t[0]))&&n.tokens.unshift({type:"minus",volatile:!0})}}else t.forEach(mt)}else{if(t.length<4&&r)for(let e=0,n=t.length;e<n;e++)t[e]===r&&t.splice(e,1);if(t.length<1&&r&&(t[0]=Be(ot("General")),t[0].generated=!0),t.length<2){const e={type:"minus",volatile:!0};t.push(dt(t[0],e))}if(t.length<3&&t.push(dt(t[0])),t.length<4)if(r)t.push(r);else{const e=Be(ot("@"));e.generated=!0,t.push(e)}t[0].condition=[">",0],t[1].condition=["<",0],t[2].condition=null}return{pattern:e,partitions:t,locale:n}}(e),lt[e]=n}catch(a){if(t)throw a;const r={tokens:[{type:"error"}],error:a.message};n={pattern:e,partitions:[r,r,r,r],error:a.message,locale:null}}return n}const ct=Object.freeze({AMPM:Y,BREAK:_,CALENDAR:C,CHAR:J,COLOR:N,COMMA:v,CONDITION:I,DATETIME:A,DBNUM:D,DIGIT:z,DURATION:E,ERROR:S,ESCAPED:R,EXP:H,FILL:B,GENERAL:c,GROUP:b,HASH:p,LOCALE:T,MINUS:M,MODIFIER:P,NATNUM:O,PAREN:G,PERCENT:w,PLUS:k,POINT:x,QMARK:h,SCALE:y,SKIP:U,SLASH:g,SPACE:F,STRING:L,TEXT:j,ZERO:f});exports.addLocale=me,exports.dateFromSerial=function(e,t){let n=0|e;const a=ze*(e-n);let r=we(a);a-r>.9999&&(r+=1,r===ze&&(r=0,n+=1));const i=r<0?ze+r:r,[s,o,m]=Fe(e,0,t&&t.leap1900);return[s,o,m,we(i/60/60)%60,we(i/60)%60,we(i)%60]},exports.dateToSerial=Ce,exports.dec2frac=ke,exports.format=function(e,t){var n;let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=Object.assign({},ve,a),i=ut(e,r.throws);return function(e,t,n){const a=t.partitions,r=se(t.locale||n.locale),i=a[3]?a[3]:qe;if("boolean"==typeof e&&(e=e?"TRUE":"FALSE"),null==e)return"";if("number"!=typeof e)return Xe(e,i,n,r);if(!isFinite(e)){const t=r||de;return isNaN(e)?t.nan:(e<0?t.negative:"")+t.infinity}const s=Qe(e,a);return s?Xe(e,s,n,r):n.overflow}(null!==(n=Ce(t,r))&&void 0!==n?n:t,i,r)},exports.formatColor=function(e,t,n){var a;const r=Object.assign({},ve,n),i=ut(e,r.throws);return function(e,t,n){const a=t.partitions;let r=a[3],i=null;return"number"==typeof e&&isFinite(e)&&(r=Qe(e,a)),r&&r.color&&(i=r.color),i&&"number"==typeof i&&n.indexColors&&(i=$[i-1]||"#000"),i}(null!==(a=Ce(t,r))&&void 0!==a?a:t,i,r)},exports.getFormatDateInfo=function(s){const o=ut(s,!1);return o.dateInfo||(o.dateInfo=function(s){const[o]=s;return{year:!!(o.date&e),month:!!(o.date&t),day:!!(o.date&n),hours:!!(o.date&a),minutes:!!(o.date&r),seconds:!!(o.date&i),clockType:12===o.clock?12:24}}(o.partitions)),o.dateInfo},exports.getFormatInfo=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=ut(e,!1);return n.info||(n.info=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const[a,r]=e,i=a.frac_max,s={type:"general",isDate:tt(e),isText:nt(e),isPercent:et(e),maxDecimals:a.general?9:i,scale:null!==(t=a.scale)&&void 0!==t?t:1,color:0,parentheses:0,grouped:a.grouping?1:0},o=!s.isDate&&!s.isText&&!a.error&&a.tokens.some((e=>"string"===e.type&&(n?e.value===n:K.test(e.value))));let m="G",d=i>=0?Math.min(15,i):"",l="",u="";if(r&&r.color&&(u="-",s.color=1),a.parens&&(l="()",s.parentheses=1),o)m="C",s.type="currency";else if(a.error)s.type="error",s.maxDecimals=0;else if(s.isDate){let e=0,t=0,n="";a.tokens.forEach((a=>{const r=a.type;/^(b-)?year/.test(r)?(n+="Y",t++):r.startsWith("month")?(n+="M",t++):/^(week)?day/.test(r)?(n+="D",t++):"hour"!==r&&"min"!==r&&"sec"!==r&&"ampm"!==r||(n+=r[0],e++)})),s.type="date",t&&e?s.type="datetime":!t&&e&&(s.type="time");const r=rt.find((e=>n.startsWith(e[0])));m=r?"D":"G",d=r?r[1]:""}else s.isText?(m="G",s.type="text",d="",s.maxDecimals=0):a.general?(m="G",s.type="general",d=""):a.fractions?(m="G",s.type="fraction",d=""):a.exponential?(m="S",s.type="scientific"):s.isPercent?(m="P",s.type="percent"):a.grouping?(m=",",s.type="grouped"):(a.int_max||i)&&(m="F",s.type="number");return s.code=m+d+u+l,s.level=at[s.type],Object.freeze(s)}(n.partitions,null==t?void 0:t.currency)),n.info},exports.getLocale=se,exports.isDateFormat=function(e){return tt(ut(e,!1).partitions)},exports.isPercentFormat=function(e){return et(ut(e,!1).partitions)},exports.isTextFormat=function(e){return nt(ut(e,!1).partitions)},exports.isValidFormat=function(e){try{return ut(e,!0),!0}catch(e){return!1}},exports.parseBool=Re,exports.parseDate=Pe,exports.parseLocale=re,exports.parseNumber=Te,exports.parseTime=Ye,exports.parseValue=function(e){var t,n,a;return null!==(t=null!==(n=null!==(a=Te(e))&&void 0!==a?a:Pe(e))&&void 0!==n?n:Ye(e))&&void 0!==t?t:Re(e)},exports.round=_e,exports.tokenTypes=ct,exports.tokenize=ot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
