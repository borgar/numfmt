"use strict";const e=2,t=4,n=8,r=16,a=32,i=64,o=128,s=256,m=512,d=-1,l=1,u=6,c="general",p="hash",f="zero",h="qmark",g="slash",b="group",y="scale",v="comma",_="break",j="text",M="plus",k="minus",F="point",x="space",A="percent",w="digit",S="calendar",z="error",C="datetime",E="duration",I="condition",D="dbnum",O="natnum",N="locale",T="color",Y="modifier",P="ampm",R="escaped",L="string",U="skip",H="exp",G="fill",B="paren",J="char",V=["#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#800","#080","#008","#880","#808","#088","#CCC","#888","#99F","#936","#FFC","#CFF","#606","#F88","#06C","#CCF","#008","#F0F","#FF0","#0FF","#808","#800","#088","#00F","#0CF","#CFF","#CFC","#FF9","#9CF","#F9C","#C9F","#FC9","#36F","#3CC","#9C0","#FC0"],$=["¤","$","£","¥","֏","؋","৳","฿","៛","₡","₦","₩","₪","₫","€","₭","₮","₱","₲","₴","₸","₹","₺","₼","₽","₾","₿"],W=new RegExp("["+$.join("")+"]");function Z(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){Z(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var q=Object.freeze({1078:"af",1052:"sq",1118:"am",5121:"ar_DZ",15361:"ar_BH",3073:"ar_EG",2049:"ar_IQ",11265:"ar_JO",13313:"ar_KW",12289:"ar_LB",4097:"ar_LY",6145:"ar_MA",8193:"ar_OM",16385:"ar_QA",1025:"ar_SA",10241:"ar_SY",7169:"ar_TN",14337:"ar_AE",9217:"ar_YE",1067:"hy",1101:"as",2092:"az_AZ",1068:"az_AZ",1069:"eu",1059:"be",2117:"bn",1093:"bn_IN",5146:"bs",1026:"bg",1109:"my",1027:"ca",2052:"zh_CN",3076:"zh_HK",5124:"zh_MO",4100:"zh_SG",1028:"zh_TW",1050:"hr",1029:"cs",1030:"da",1125:"dv",2067:"nl_BE",1043:"nl_NL",1126:"bin",3081:"en_AU",10249:"en_BZ",4105:"en_CA",9225:"en_CB",2057:"en_GB",16393:"en_IN",6153:"en_IE",8201:"en_JM",5129:"en_NZ",13321:"en_PH",7177:"en_ZA",11273:"en_TT",1033:"en_US",12297:"en_ZW",1061:"et",1071:"mk",1080:"fo",1065:"fa",1124:"fil",1035:"fi",2060:"fr_BE",11276:"fr_CM",3084:"fr_CA",9228:"fr_CG",12300:"fr_CI",1036:"fr_FR",5132:"fr_LU",13324:"fr_ML",6156:"fr_MC",14348:"fr_MA",10252:"fr_SN",4108:"fr_CH",7180:"fr",1122:"fy_NL",2108:"gd_IE",1084:"gd",1110:"gl",1079:"ka",3079:"de_AT",1031:"de_DE",5127:"de_LI",4103:"de_LU",2055:"de_CH",1032:"el",1140:"gn",1095:"gu",1279:"en",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig_NG",1057:"id",1040:"it_IT",2064:"it_CH",1041:"ja",1099:"kn",1120:"ks",1087:"kk",1107:"km",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1142:"la",1062:"lv",1063:"lt",2110:"ms_BN",1086:"ms_MY",1100:"ml",1082:"mt",1112:"mni",1153:"mi",1102:"mr",1104:"mn",2128:"mn",1121:"ne",1044:"no_NO",2068:"no_NO",1096:"or",1045:"pl",1046:"pt_BR",2070:"pt_PT",1094:"pa",1047:"rm",2072:"ro_MO",1048:"ro_RO",1049:"ru",2073:"ru_MO",1083:"se",1103:"sa",3098:"sr_SP",2074:"sr_SP",1072:"st",1074:"tn",1113:"sd",1115:"si",1051:"sk",1060:"sl",1143:"so",1070:"sb",11274:"es_AR",16394:"es_BO",13322:"es_CL",9226:"es_CO",5130:"es_CR",7178:"es_DO",12298:"es_EC",17418:"es_SV",4106:"es_GT",18442:"es_HN",2058:"es_MX",19466:"es_NI",6154:"es_PA",15370:"es_PY",10250:"es_PE",20490:"es_PR",1034:"es_ES",14346:"es_UY",8202:"es_VE",1089:"sw",2077:"sv_FI",1053:"sv_SE",1114:"syc",1064:"tg",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1073:"ts",1055:"tr",1090:"tk",1058:"uk",1056:"ur",2115:"uz_UZ",1091:"uz_UZ",1075:"ve",1066:"vi",1106:"cy",1076:"xh",1085:"yi",1077:"zu"});const Q=/^([a-z\d]+)(?:[_-]([a-z\d]+))?(?:\.([a-z\d]+))?(?:@([a-z\d]+))?$/i,ee={},te=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.replace(/~/g,t).split(";")},ne=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e.mmm||(e.mmm=t<1?e.mmmm.concat():e.mmmm.map((e=>{const n=e.slice(0,t%10);return n+(t<10||e===n?"":".")}))),e.ddd||(e.ddd=n<1?e.dddd.concat():e.dddd.map((e=>{const t=e.slice(0,n%10);return t+(n<10||e===t?"":".")}))),!e.mmm6&&e.mmmm6&&(e.mmm6=e.mmmm6),e},re={group:" ",decimal:".",positive:"+",negative:"-",percent:"%",exponent:"E",nan:"NaN",infinity:"∞",ampm:te("AM;PM"),mmmm6:te("Muharram;Safar;Rabiʻ I;Rabiʻ II;Jumada I;Jumada II;Rajab;Shaʻban;Ramadan;Shawwal;Dhuʻl-Qiʻdah;Dhuʻl-Hijjah"),mmm6:te("Muh.;Saf.;Rab. I;Rab. II;Jum. I;Jum. II;Raj.;Sha.;Ram.;Shaw.;Dhuʻl-Q.;Dhuʻl-H."),mmmm:te("January;February;March;April;May;June;July;August;September;October;November;December"),mmm:te("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec"),dddd:te("Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday"),ddd:te("Sun;Mon;Tue;Wed;Thu;Fri;Sat"),bool:te("TRUE;FALSE"),preferMDY:!1};function ae(e){const t=Q.exec(e);if(!t)throw new SyntaxError("Malformed locale: ".concat(e));return{lang:t[1]+(t[2]?"_"+t[2]:""),language:t[1],territory:t[2]||""}}function ie(e){if("number"==typeof e)return q[65535&e]||null;const t=parseInt(e,16);return isFinite(t)&&q[65535&t]?q[65535&t]||null:Q.test(e)?e:null}function oe(e){const t=ie(e);let n=null;if(t){const e=ae(t);n=ee[e.lang]||ee[e.language]||null}return n}function se(e){return Object.assign({},re,e)}function me(e,t){const n="object"==typeof t?t:ae(t);return ee[n.lang]=se(e),n.language===n.lang||ee[n.language]||(ee[n.language]=se(e)),ee[n.lang]}const de=se({group:",",preferMDY:!0});de.isDefault=!0,me({group:",",ampm:te("上午;下午"),mmmm:te("一月;二月;三月;四月;五月;六月;七月;八月;九月;十月;十一月;十二月"),mmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:te("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:te("周日;周一;周二;周三;周四;周五;周六")},"zh_CN");const le={group:",",ampm:te("上午;下午"),mmmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),mmm:te("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:te("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:te("周日;周一;周二;周三;周四;周五;周六")};me(X(X({},le),{},{nan:"非數值",dddd:te("~日;~一;~二;~三;~四;~五;~六","星期")}),"zh_TW"),me(X(X({},le),{},{dddd:te("~日;~一;~二;~三;~四;~五;~六","星期")}),"zh_HK"),me(X(X({},le),{},{ampm:te("午前;午後"),dddd:te("日~;月~;火~;水~;木~;金~;土~","曜日"),ddd:te("日;月;火;水;木;金;土")}),"ja"),me({group:",",ampm:te("오전;오후"),mmmm:te("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),mmm:te("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),dddd:te("일요일;월요일;화요일;수요일;목요일;금요일;토요일"),ddd:te("일;월;화;수;목;금;토")},"ko"),me({group:",",ampm:te("ก่อนเที่ยง;หลังเที่ยง"),mmmm:te("มกร~;กุมภาพันธ์;มีน~;เมษายน;พฤษภ~;มิถุนายน;กรกฎ~;สิงห~;กันยายน;ตุล~;พฤศจิกายน;ธันว~","าคม"),mmm:te("ม.ค.;ก.พ.;มี.ค.;เม.ย.;พ.ค.;มิ.ย.;ก.ค.;ส.ค.;ก.ย.;ต.ค.;พ.ย.;ธ.ค."),dddd:te("วันอาทิตย์;วันจันทร์;วันอังคาร;วันพุธ;วันพฤหัสบดี;วันศุกร์;วันเสาร์"),ddd:te("อา.;จ.;อ.;พ.;พฤ.;ศ.;ส.")},"th"),me(ne({decimal:",",ampm:te("dop.;odp."),mmmm:te("ledna;února;března;dubna;května;června;července;srpna;září;října;listopadu;prosince"),mmm:te("I;II;III;IV;V;VI;VII;VIII;IX;X;XI;XII"),dddd:te("neděle;pondělí;úterý;středa;čtvrtek;pátek;sobota"),bool:te("PRAVDA;NEPRAVDA")},-1,2),"cs"),me(ne({group:".",decimal:",",mmmm:te("januar;februar;marts;april;maj;juni;juli;august;september;oktober;november;december"),dddd:te("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag"),bool:te("SAND;FALSK")},13,13),"da"),me(ne({group:".",decimal:",",ampm:te("a.m.;p.m."),mmmm:te("januari;februari;maart;april;mei;juni;juli;augustus;september;oktober;november;december"),mmm:te("jan.;feb.;mrt.;apr.;mei;jun.;jul.;aug.;sep.;okt.;nov.;dec."),dddd:te("zondag;maandag;dinsdag;woensdag;donderdag;vrijdag;zaterdag"),bool:te("WAAR;ONWAAR")},-1,2),"nl"),me({group:",",preferMDY:!0},"en"),me({group:",",preferMDY:!0},"en_US"),me({group:","},"en_AU"),me({group:","},"en_CA"),me({group:","},"en_GB"),me({group:",",mmm:te("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sept;Oct;Nov;Dec")},"en_IE"),me(ne({decimal:",",nan:"epäluku",ampm:te("ap.;ip."),mmmm:te("tammi~;helmi~;maalis~;huhti~;touko~;kesä~;heinä~;elo~;syys~;loka~;marras~;joulu~","kuuta"),mmm:te("tammik.;helmik.;maalisk.;huhtik.;toukok.;kesäk.;heinäk.;elok.;syysk.;lokak.;marrask.;jouluk."),dddd:te("sunnun~;maanan~;tiis~;keskiviikkona;tors~;perjan~;lauan~","taina"),bool:te("TOSI;EPÄTOSI")},-1,2),"fi");const ue=ne({group:" ",decimal:",",mmmm:te("janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre"),mmm:te("janv.;févr.;mars;avr.;mai;juin;juil.;août;sept.;oct.;nov.;déc."),dddd:te("~manche;lun~;mar~;mercre~;jeu~;vendre~;same~","di"),bool:te("VRAI;FAUX")},-1,13);me(X({},ue),"fr"),me(X(X({},ue),{},{mmm:te("janv.;févr.;mars;avr.;mai;juin;juill.;août;sept.;oct.;nov.;déc.")}),"fr_CA"),me(X({group:"'",decimal:"."},ue),"fr_CH");const ce=ne({mmmm:te("Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember"),mmm:te("Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sept.;Okt.;Nov.;Dez."),dddd:te("Sonn~;Mon~;Diens~;Mittwoch;Donners~;Frei~;Sams~","tag"),bool:te("WAHR;FALSCH")},-1,12);me(X({group:".",decimal:","},ce),"de"),me(X({group:"'",decimal:"."},ce),"de_CH"),me(ne({group:".",decimal:",",ampm:te("π.μ.;μ.μ."),mmmm:te("Ιανουαρ~;Φεβρουαρ~;Μαρτ~;Απριλ~;Μαΐου;Ιουν~;Ιουλ~;Αυγούστου;Σεπτεμβρ~;Οκτωβρ~;Νοεμβρ~;Δεκεμβρ~","ίου"),mmm:te("Ιαν;Φεβ;Μαρ;Απρ;Μαΐ;Ιουν;Ιουλ;Αυγ;Σεπ;Οκτ;Νοε;Δεκ"),dddd:te("Κυριακή;Δευτέρα;Τρίτη;Τετάρτη;Πέμπτη;Παρασκευή;Σάββατο")},-1,3),"el"),me({decimal:",",ampm:te("de.;du."),mmmm:te("január;február;március;április;május;június;július;augusztus;szeptember;október;november;december"),mmm:te("jan.;febr.;márc.;ápr.;máj.;jún.;júl.;aug.;szept.;okt.;nov.;dec."),dddd:te("vasárnap;hétfő;kedd;szerda;csütörtök;péntek;szombat"),ddd:te("V;H;K;Sze;Cs;P;Szo"),bool:te("IGAZ;HAMIS")},"hu"),me(ne({group:".",decimal:",",ampm:te("f.h.;e.h."),mmmm:te("janúar;febrúar;mars;apríl;maí;júní;júlí;ágúst;september;október;nóvember;desember"),dddd:te("sunnu~;mánu~;þriðju~;miðviku~;fimmtu~;föstu~;laugar~","dagur")},13,13),"is"),me(ne({group:".",decimal:",",mmmm:te("Januari;Februari;Maret;April;Mei;Juni;Juli;Agustus;September;Oktober;November;Desember"),dddd:te("Minggu;Senin;Selasa;Rabu;Kamis;Jumat;Sabtu")},3,3),"id");const pe=ne({mmmm:te("gennaio;febbraio;marzo;aprile;maggio;giugno;luglio;agosto;settembre;ottobre;novembre;dicembre"),dddd:te("domenica;lunedì;martedì;mercoledì;giovedì;venerdì;sabato"),bool:te("VERO;FALSO")},3,3);me(X({group:".",decimal:","},pe),"it"),me(X({group:"'",decimal:"."},pe),"it_CH");const fe={decimal:",",ampm:te("a.m.;p.m."),mmmm:te("januar;februar;mars;april;mai;juni;juli;august;september;oktober;november;desember"),mmm:te("jan.;feb.;mar.;apr.;mai;jun.;jul.;aug.;sep.;okt.;nov.;des."),dddd:te("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag"),bool:te("SANN;USANN")};me(ne(X({},fe),-1,13),"nb"),me(ne(X({},fe),-1,13),"no"),me(ne({decimal:",",mmmm:te("stycznia;lutego;marca;kwietnia;maja;czerwca;lipca;sierpnia;września;października;listopada;grudnia"),dddd:te("niedziela;poniedziałek;wtorek;środa;czwartek;piątek;sobota"),ddd:te("niedz.;pon.;wt.;śr.;czw.;pt.;sob."),bool:te("PRAWDA;FAŁSZ")},3,-1),"pl");const he={group:".",decimal:",",mmmm:te("janeiro;fevereiro;março;abril;maio;junho;julho;agosto;setembro;outubro;novembro;dezembro"),dddd:te("domingo;segunda-feira;terça-feira;quarta-feira;quinta-feira;sexta-feira;sábado"),bool:te("VERDADEIRO;FALSO")};me(ne(he,13,13),"pt"),me(ne(he,13,13),"pt_BR"),me({decimal:",",nan:"не число",mmmm:te("января;февраля;марта;апреля;мая;июня;июля;августа;сентября;октября;ноября;декабря"),mmm:te("янв.;февр.;мар.;апр.;мая;июн.;июл.;авг.;сент.;окт.;нояб.;дек."),dddd:te("воскресенье;понедельник;вторник;среда;четверг;пятница;суббота"),ddd:te("вс;пн;вт;ср;чт;пт;сб"),mmmm6:te("рамадан;шавваль;зуль-каада;зуль-хиджжа;мухаррам;раби-уль-авваль;раби-уль-ахир;джумад-уль-авваль;джумад-уль-ахир;раджаб;шаабан;рамадан"),mmm6:te("рам.;шав.;зуль-к.;зуль-х.;мух.;раб. I;раб. II;джум. I;джум. II;радж.;шааб.;рам."),bool:te("ИСТИНА;ЛОЖЬ")},"ru"),me(ne({decimal:",",mmmm:te("januára;februára;marca;apríla;mája;júna;júla;augusta;septembra;októbra;novembra;decembra"),dddd:te("nedeľa;pondelok;utorok;streda;štvrtok;piatok;sobota")},3,2),"sk");const ge={group:".",decimal:",",ampm:te("a. m.;p. m."),mmmm:te("enero;febrero;marzo;abril;mayo;junio;julio;agosto;septiem~;octu~;noviem~;diciem~","bre"),mmm:te("ene;feb;mar;abr;may;jun;jul;ago;sept;oct;nov;dic"),dddd:te("domingo;lunes;martes;miércoles;jueves;viernes;sábado"),ddd:te("dom;lun;mar;mié;jue;vie;sáb"),bool:te("VERDADERO;FALSO")},be=te("ene;feb;mar;abr;may;jun;jul;ago;sep;oct;nov;dic"),ye=te("ene.;feb.;mar.;abr.;may.;jun.;jul.;ago.;sept.;oct.;nov.;dic.");me(X({},ge),"es"),me(X({},ge),"es_AR"),me(X({},ge),"es_BO"),me(X({},ge),"es_CL"),me(X({},ge),"es_CO"),me(X({},ge),"es_EC"),me(X(X({},ge),{},{mmm:be,ampm:te("a.m.;p.m.")}),"es_MX"),me(X(X({},ge),{},{mmm:ye}),"es_PY"),me(X(X({},ge),{},{mmm:ye}),"es_UY"),me(X(X({},ge),{},{mmm:ye,mmmm:te("enero;febrero;marzo;abril;mayo;junio;julio;agosto;setiembre;octubre;noviembre;diciembre")}),"es_VE"),me({decimal:",",ampm:te("fm;em"),mmmm:te("januari;februari;mars;april;maj;juni;juli;augusti;september;oktober;november;december"),mmm:te("jan.;feb.;mars;apr.;maj;juni;juli;aug.;sep.;okt.;nov.;dec."),dddd:te("sön~;mån~;tis~;ons~;tors~;fre~;lör~","dag"),ddd:te("sön;mån;tis;ons;tors;fre;lör")},"sv"),me(ne({group:".",decimal:",",ampm:te("ÖÖ;ÖS"),mmmm:te("Ocak;Şubat;Mart;Nisan;Mayıs;Haziran;Temmuz;Ağustos;Eylül;Ekim;Kasım;Aralık"),mmm:te("Oca;Şub;Mar;Nis;May;Haz;Tem;Ağu;Eyl;Eki;Kas;Ara"),dddd:te("Pazar;Pazartesi;Salı;Çarşamba;Perşembe;Cuma;Cumartesi"),ddd:te("Paz;Pzt;Sal;Çar;Per;Cum;Cmt"),bool:te("DOĞRU;YANLIŞ")},3,-1),"tr"),me({group:",",ampm:te("yb;yh"),mmmm:te("Ionawr;Chwefror;Mawrth;Ebrill;Mai;Mehefin;Gorffennaf;Awst;Medi;Hydref;Tachwedd;Rhagfyr"),mmm:te("Ion;Chwef;Maw;Ebr;Mai;Meh;Gorff;Awst;Medi;Hyd;Tach;Rhag"),dddd:te("Dydd Sul;Dydd Llun;Dydd Mawrth;Dydd Mercher;Dydd Iau;Dydd Gwener;Dydd Sadwrn"),ddd:te("Sul;Llun;Maw;Mer;Iau;Gwen;Sad")},"cy"),me({group:".",decimal:",",mmmm:te("yanvar;fevral;mart;aprel;may;iyun;iyul;avqust;sentyabr;oktyabr;noyabr;dekabr"),mmm:te("yan;fev;mar;apr;may;iyn;iyl;avq;sen;okt;noy;dek"),dddd:te("bazar;bazar ertəsi;çərşənbə axşamı;çərşənbə;cümə axşamı;cümə;şənbə"),ddd:te("B.;B.e.;Ç.a.;Ç.;C.a.;C.;Ş.")},"az"),me(ne({decimal:",",mmmm:te("студзеня;лютага;сакавіка;красавіка;мая;чэрвеня;ліпеня;жніўня;верасня;кастрычніка;лістапада;снежня"),dddd:te("нядзеля;панядзелак;аўторак;серада;чацвер;пятніца;субота"),ddd:te("нд;пн;аў;ср;чц;пт;сб")},3,-1),"be"),me({decimal:",",ampm:te("пр.об.;сл.об."),mmmm:te("януари;февруари;март;април;май;юни;юли;август;септември;октомври;ноември;декември"),mmm:te("яну;фев;март;апр;май;юни;юли;авг;сеп;окт;ное;дек"),dddd:te("неделя;понеделник;вторник;сряда;четвъртък;петък;събота"),ddd:te("нд;пн;вт;ср;чт;пт;сб"),bool:te("ИСТИНА;ЛОЖЬ")},"bg"),me({group:".",decimal:",",mmmm:te("de gener;de febrer;de març;d’abril;de maig;de juny;de juliol;d’agost;de setembre;d’octubre;de novembre;de desembre"),mmm:te("de gen.;de febr.;de març;d’abr.;de maig;de juny;de jul.;d’ag.;de set.;d’oct.;de nov.;de des."),dddd:te("diumenge;dilluns;dimarts;dimecres;dijous;divendres;dissabte"),ddd:te("dg.;dl.;dt.;dc.;dj.;dv.;ds."),ampm:te("a. m.;p. m.")},"ca"),me(ne({group:",",decimal:".",mmmm:te("Enero;Pebrero;Marso;Abril;Mayo;Hunyo;Hulyo;Agosto;Setyembre;Oktubre;Nobyembre;Disyembre"),dddd:te("Linggo;Lunes;Martes;Miyerkules;Huwebes;Biyernes;Sabado")},3,3),"fil"),me({group:",",decimal:".",mmmm:te("જાન્યુઆરી;ફેબ્રુઆરી;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટેમ્બર;ઑક્ટોબર;નવેમ્બર;ડિસેમ્બર"),mmm:te("જાન્યુ;ફેબ્રુ;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટે;ઑક્ટો;નવે;ડિસે"),dddd:te("રવિ~;સોમ~;મંગળ~;બુધ~;ગુરુ~;શુક્ર~;શનિ~","વાર"),ddd:te("રવિ;સોમ;મંગળ;બુધ;ગુરુ;શુક્ર;શનિ")},"gu"),me({group:",",decimal:".",ampm:te("לפנה״צ;אחה״צ"),dddd:te("~ראשון;~שני;~שלישי;~רביעי;~חמישי;~שישי;~שבת","יום "),ddd:te("~א׳;~ב׳;~ג׳;~ד׳;~ה׳;~ו׳;שבת","יום "),mmmm:te("ינואר;פברואר;מרץ;אפריל;מאי;יוני;יולי;אוגוסט;ספטמבר;אוקטובר;נובמבר;דצמבר"),mmm:te("ינו׳;פבר׳;מרץ;אפר׳;מאי;יוני;יולי;אוג׳;ספט׳;אוק׳;נוב׳;דצמ׳"),mmmm6:te("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע אל־אוול;רביע א־ת׳אני;ג׳ומאדא אל־אולא;ג׳ומאדא א־ת׳אניה;רג׳ב;שעבאן;רמדאן"),mmm6:te("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע א׳;רביע ב׳;ג׳ומאדא א׳;ג׳ומאדא ב׳;רג׳ב;שעבאן;רמדאן")},"he"),me(ne({group:".",decimal:",",mmmm:te("siječnja;veljače;ožujka;travnja;svibnja;lipnja;srpnja;kolovoza;rujna;listopada;studenoga;prosinca"),mmm:te("sij;velj;ožu;tra;svi;lip;srp;kol;ruj;lis;stu;pro"),dddd:te("nedjelja;ponedjeljak;utorak;srijeda;četvrtak;petak;subota")},-1,3),"hr"),me({decimal:",",mmmm:te("հունվարի;փետրվարի;մարտի;ապրիլի;մայիսի;հունիսի;հուլիսի;օգոստոսի;սեպտեմբերի;հոկտեմբերի;նոյեմբերի;դեկտեմբերի"),mmm:te("հնվ;փտվ;մրտ;ապր;մյս;հնս;հլս;օգս;սեպ;հոկ;նոյ;դեկ"),dddd:te("կիրակի;երկուշաբթի;երեքշաբթի;չորեքշաբթի;հինգշաբթի;ուրբաթ;շաբաթ"),ddd:te("կիր;երկ;երք;չրք;հնգ;ուր;շբթ")},"hy"),me(ne({decimal:",",mmmm:te("იანვარი;თებერვალი;მარტი;აპრილი;მაისი;ივნისი;ივლისი;აგვისტო;სექტემბერი;ოქტომბერი;ნოემბერი;დეკემბერი"),dddd:te("კვირა;ორშაბათი;სამშაბათი;ოთხშაბათი;ხუთშაბათი;პარასკევი;შაბათი")},3,3),"ka"),me(ne({decimal:",",mmmm:te("қаңтар;ақпан;наурыз;сәуір;мамыр;маусым;шілде;тамыз;қыркүйек;қазан;қараша;желтоқсан"),dddd:te("жексенбі;дүйсенбі;сейсенбі;сәрсенбі;бейсенбі;жұма;сенбі"),ddd:te("жс;дс;сс;ср;бс;жм;сб")},13,-1),"kk"),me({group:",",mmmm:te("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿಲ್;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂಬರ್;ಅಕ್ಟೋಬರ್;ನವೆಂಬರ್;ಡಿಸೆಂಬರ್"),mmm:te("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿ;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂ;ಅಕ್ಟೋ;ನವೆಂ;ಡಿಸೆಂ"),dddd:te("ಭಾನು~;ಸೋಮ~;ಮಂಗಳ~;ಬುಧ~;ಗುರು~;ಶುಕ್ರ~;ಶನಿ~","ವಾರ"),ddd:te("ಭಾನು;ಸೋಮ;ಮಂಗಳ;ಬುಧ;ಗುರು;ಶುಕ್ರ;ಶನಿ"),ampm:te("ಪೂರ್ವಾಹ್ನ;ಅಪರಾಹ್ನ")},"kn"),me({decimal:",",mmmm:te("sausio;vasario;kovo;balandžio;gegužės;birželio;liepos;rugpjūčio;rugsėjo;spalio;lapkričio;gruodžio"),mmm:te("saus.;vas.;kov.;bal.;geg.;birž.;liep.;rugp.;rugs.;spal.;lapkr.;gruod."),dddd:te("sekmadienis;pirmadienis;antradienis;trečiadienis;ketvirtadienis;penktadienis;šeštadienis"),ddd:te("sk;pr;an;tr;kt;pn;št"),ampm:te("priešpiet;popiet")},"lt"),me({decimal:",",mmmm:te("janvāris;februāris;marts;aprīlis;maijs;jūnijs;jūlijs;augusts;septembris;oktobris;novembris;decembris"),mmm:te("janv.;febr.;marts;apr.;maijs;jūn.;jūl.;aug.;sept.;okt.;nov.;dec."),dddd:te("svētdiena;pirmdiena;otrdiena;trešdiena;ceturtdiena;piektdiena;sestdiena"),ddd:te("svētd.;pirmd.;otrd.;trešd.;ceturtd.;piektd.;sestd."),ampm:te("priekšpusdienā;pēcpusdienā")},"lv"),me({group:",",decimal:".",mmmm:te("ജനുവരി;ഫെബ്രുവരി;മാർച്ച്;ഏപ്രിൽ;മേയ്;ജൂൺ;ജൂലൈ;ഓഗസ്റ്റ്;സെപ്റ്റംബർ;ഒക്‌ടോബർ;നവംബർ;ഡിസംബർ"),mmm:te("ജനു;ഫെബ്രു;മാർ;ഏപ്രി;മേയ്;ജൂൺ;ജൂലൈ;ഓഗ;സെപ്റ്റം;ഒക്ടോ;നവം;ഡിസം"),dddd:te("ഞായറാഴ്‌ച;തിങ്കളാഴ്‌ച;ചൊവ്വാഴ്ച;ബുധനാഴ്‌ച;വ്യാഴാഴ്‌ച;വെള്ളിയാഴ്‌ച;ശനിയാഴ്‌ച"),ddd:te("ഞായർ;തിങ്കൾ;ചൊവ്വ;ബുധൻ;വ്യാഴം;വെള്ളി;ശനി")},"ml"),me({group:",",decimal:".",mmmm:te("нэгдүгээ~;хоёрдугаа~;гуравдугаа~;дөрөвдүгээ~;тавдугаа~;зургаадугаа~;долоодугаа~;наймдугаа~;есдүгээ~;аравдугаа~;арван нэгдүгээ~;арван хоёрдугаа~","р сар"),mmm:te("1~;2~;3~;4~;5~;6~;7~;8~;9~;10~;11~;12~","-р сар"),dddd:te("ням;даваа;мягмар;лхагва;пүрэв;баасан;бямба"),ddd:te("Ня;Да;Мя;Лх;Пү;Ба;Бя"),ampm:te("ү.ө.;ү.х.")},"mn"),me({group:",",decimal:".",mmmm:te("जानेवारी;फेब्रुवारी;मार्च;एप्रिल;मे;जून;जुलै;ऑगस्ट;सप्टेंबर;ऑक्टोबर;नोव्हेंबर;डिसेंबर"),mmm:te("जाने;फेब्रु;मार्च;एप्रि;मे;जून;जुलै;ऑग;सप्टें;ऑक्टो;नोव्हें;डिसें"),dddd:te("रविवार;सोमवार;मंगळवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:te("रवि;सोम;मंगळ;बुध;गुरु;शुक्र;शनि")},"mr"),me(ne({group:",",decimal:".",mmmm:te("ဇန်နဝါရီ;ဖေဖော်ဝါရီ;မတ်;ဧပြီ;မေ;ဇွန်;ဇူလိုင်;ဩဂုတ်;စက်တင်ဘာ;အောက်တိုဘာ;နိုဝင်ဘာ;ဒီဇင်ဘာ"),mmm:te("ဇန်;ဖေ;မတ်;ဧ;မေ;ဇွန်;ဇူ;ဩ;စက်;အောက်;နို;ဒီ"),dddd:te("တနင်္ဂနွေ;တနင်္လာ;အင်္ဂါ;ဗုဒ္ဓဟူး;ကြာသပတေး;သောကြာ;စနေ"),ampm:te("နံနက်;ညနေ")},-1,0),"my"),me({group:",",decimal:".",mmmm:te("ਜਨਵਰੀ;ਫ਼ਰਵਰੀ;ਮਾਰਚ;ਅਪ੍ਰੈਲ;ਮਈ;ਜੂਨ;ਜੁਲਾਈ;ਅਗਸਤ;ਸਤੰਬਰ;ਅਕਤੂਬਰ;ਨਵੰਬਰ;ਦਸੰਬਰ"),mmm:te("ਜਨ;ਫ਼ਰ;ਮਾਰਚ;ਅਪ੍ਰੈ;ਮਈ;ਜੂਨ;ਜੁਲਾ;ਅਗ;ਸਤੰ;ਅਕਤੂ;ਨਵੰ;ਦਸੰ"),dddd:te("ਐਤਵਾਰ;ਸੋਮਵਾਰ;ਮੰਗਲਵਾਰ;ਬੁੱਧਵਾਰ;ਵੀਰਵਾਰ;ਸ਼ੁੱਕਰਵਾਰ;ਸ਼ਨਿੱਚਰਵਾਰ"),ddd:te("ਐਤ;ਸੋਮ;ਮੰਗਲ;ਬੁੱਧ;ਵੀਰ;ਸ਼ੁੱਕਰ;ਸ਼ਨਿੱਚਰ"),ampm:te("ਪੂ.ਦੁ.;ਬਾ.ਦੁ.")},"pa"),me({group:".",decimal:",",mmmm:te("ianuarie;februarie;martie;aprilie;mai;iunie;iulie;august;septem~;octom~;noiem~;decem~","brie"),mmm:te("ian.;feb.;mar.;apr.;mai;iun.;iul.;aug.;sept.;oct.;nov.;dec."),dddd:te("duminică;luni;marți;miercuri;joi;vineri;sâmbătă"),ddd:te("dum.;lun.;mar.;mie.;joi;vin.;sâm."),ampm:te("a.m.;p.m.")},"ro"),me(ne({group:".",decimal:",",mmmm:te("januar;februar;marec;april;maj;junij;julij;avgust;september;oktober;november;december"),mmm:te("jan.;feb.;mar.;apr.;maj;jun.;jul.;avg.;sep.;okt.;nov.;dec."),dddd:te("nedelja;ponedeljek;torek;sreda;četrtek;petek;sobota"),ampm:te("dop.;pop.")},-1,13),"sl"),me(ne({group:".",decimal:",",mmmm:te("јануар;фебруар;март;април;мај;јун;јул;август;септембар;октобар;новембар;децембар"),dddd:te("недеља;понедељак;уторак;среда;четвртак;петак;субота")},3,3),"sr"),me({group:",",decimal:".",mmmm:te("ஜனவரி;பிப்ரவரி;மார்ச்;ஏப்ரல்;மே;ஜூன்;ஜூலை;ஆகஸ்ட்;செப்டம்பர்;அக்டோபர்;நவம்பர்;டிசம்பர்"),mmm:te("ஜன.;பிப்.;மார்.;ஏப்.;மே;ஜூன்;ஜூலை;ஆக.;செப்.;அக்.;நவ.;டிச."),dddd:te("ஞாயிறு;திங்கள்;செவ்வாய்;புதன்;வியாழன்;வெள்ளி;சனி"),ddd:te("ஞாயி.;திங்.;செவ்.;புத.;வியா.;வெள்.;சனி")},"ta"),me({group:",",decimal:".",mmmm:te("జనవరి;ఫిబ్రవరి;మార్చి;ఏప్రిల్;మే;జూన్;జులై;ఆగస్టు;సెప్టెంబర్;అక్టోబర్;నవంబర్;డిసెంబర్"),mmm:te("జన;ఫిబ్ర;మార్చి;ఏప్రి;మే;జూన్;జులై;ఆగ;సెప్టెం;అక్టో;నవం;డిసెం"),dddd:te("ఆదివారం;సోమవారం;మంగళవారం;బుధవారం;గురువారం;శుక్రవారం;శనివారం"),ddd:te("ఆది;సోమ;మంగళ;బుధ;గురు;శుక్ర;శని")},"te"),me({decimal:",",mmmm:te("січня;лютого;березня;квітня;травня;червня;липня;серпня;вересня;жовтня;листопада;грудня"),mmm:te("січ.;лют.;бер.;квіт.;трав.;черв.;лип.;серп.;вер.;жовт.;лист.;груд."),dddd:te("неділю;понеділок;вівторок;середу;четвер;пʼятницю;суботу"),ddd:te("нд;пн;вт;ср;чт;пт;сб"),ampm:te("дп;пп")},"uk"),me({group:".",decimal:",",mmmm:te("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","tháng "),mmm:te("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","thg "),dddd:te("Chủ Nhật;Thứ Hai;Thứ Ba;Thứ Tư;Thứ Năm;Thứ Sáu;Thứ Bảy"),ddd:te("CN;Th 2;Th 3;Th 4;Th 5;Th 6;Th 7"),ampm:te("SA;CH")},"vi"),me(ne({group:"٬",decimal:"٫",ampm:te("ص;م"),mmmm:te("يناير;فبراير;مارس;أبريل;مايو;يونيو;يوليو;أغسطس;سبتمبر;أكتوبر;نوفمبر;ديسمبر"),dddd:te("الأحد;الاثنين;الثلاثاء;الأربعاء;الخميس;الجمعة;السبت"),mmmm6:te("رمضان;شوال;ذو القعدة;ذو الحجة;محرم;ربيع الأول;ربيع الآخرة;جمادى الأولى;جمادى الآخرة;رجب;شعبان;رمضان")},0,0),"ar"),me({group:",",decimal:".",mmmm:te("জানুয়ারী;ফেব্রুয়ারী;মার্চ;এপ্রিল;মে;জুন;জুলাই;আগস্ট;সেপ্টেম্বর;অক্টোবর;নভেম্বর;ডিসেম্বর"),mmm:te("জানু;ফেব;মার্চ;এপ্রি;মে;জুন;জুল;আগ;সেপ্টেঃ;অক্টোঃ;নভেঃ;ডিসেঃ"),dddd:te("রবিবার;সোমবার;মঙ্গলবার;বুধবার;বৃহস্পতিবার;শুক্রবার;শনিবার"),ddd:te("রবি;সোম;মঙ্গল;বুধ;বৃহস্পতি;শুক্র;শনি")},"bn"),me({group:",",decimal:".",mmmm:te("जनवरी;फ़रवरी;मार्च;अप्रैल;मई;जून;जुलाई;अगस्त;सितंबर;अक्तूबर;नवंबर;दिसंबर"),mmm:te("जन॰;फ़र॰;मार्च;अप्रैल;मई;जून;जुल॰;अग॰;सित॰;अक्तू॰;नव॰;दिस॰"),dddd:te("रविवार;सोमवार;मंगलवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:te("रवि;सोम;मंगल;बुध;गुरु;शुक्र;शनि"),ampm:te("am;pm")},"hi");const ve={overflow:"######",dateErrorThrows:!1,dateErrorNumber:!0,bigintErrorNumber:!1,dateSpanLarge:!0,leap1900:!0,nbsp:!1,throws:!0,invalid:"######",locale:"",ignoreTimezone:!1,grouping:[3,3],indexColors:!0,skipChar:"",repeatChar:""};function _e(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if("number"!=typeof e)return e;if(e<0)return-_e(-e,t);if(t){const n=10**t||1;return _e(e*n,0)/n}return Math.round(e)}const je=1e-13;function Me(e){const t=e<0?-1:1,n=10**((arguments.length>1&&void 0!==arguments[1]?arguments[1]:2)||2),r=10**((arguments.length>2&&void 0!==arguments[2]?arguments[2]:2)||2);let a,i,o=Math.abs(e),s=0,m=0,d=0,l=1;if((e=o)%1==0)i=[e*t,1];else if(e<1e-19)i=[t,1e19];else if(e>1e19)i=[1e19*t,1];else{do{if(o=1/(o-Math.floor(o)),a=l,l=l*Math.floor(o)+s,s=a,m=d,d=Math.floor(e*l+.5),d>=n||l>=r)return[t*m,s]}while(Math.abs(e-d/l)>=je&&o!==Math.floor(o));i=[t*d,l]}return i}const ke=Math.floor;function Fe(e){if((!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&e>=0){if(0===e)return[1900,1,0];if(60===e)return[1900,2,29];if(e<60)return[1900,e<32?1:2,(e-1)%31+1]}let t=e+68569+2415019;const n=ke(4*t/146097);t-=ke((146097*n+3)/4);const r=ke(4e3*(t+1)/1461001);t=t-ke(1461*r/4)+31;const a=ke(80*t/2447),i=t-ke(2447*a/80);t=ke(a/11);return[0|100*(n-49)+r+t,0|a+2-12*t,0|i]}function xe(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=ke(e);return t===u?function(e){if(60===e)throw new Error("#VALUE!");if(e<=1)return[1317,8,29];if(e<60)return[1317,e<32?9:10,1+(e-2)%30];const t=10631/30,n=.1335;let r=e+466935;const a=ke(r/10631);r-=10631*a;const i=ke((r-n)/t);r-=ke(i*t+n);const o=ke((r+28.5001)/29.5);return 13===o?[30*a+i,12,30]:[30*a+i,o,r-ke(29.5001*o-29)]}(r):t===d?function(e){return Fe(e+1462)}(r):Fe(r,n)}const Ae=Math.floor,we=86400;function Se(e,t){let n=null;if(Array.isArray(e)){const[t,r,a,i,o,s]=e;n=Date.UTC(t,null==r?0:r-1,null!=a?a:1,i||0,o||0,s||0)}else if(e instanceof Date&&(n=1*e,!t||!t.ignoreTimezone)){const t=new Date;t.setUTCFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t.setUTCHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n=1*t}if(null!=n&&isFinite(n)){const e=n/864e5;return e-(e<=-25509?-25568:-25569)}return null}const ze={j:"d",d:"d",D:"ddd",l:"dddd",n:"m",m:"m",M:"mmm",F:"mmmm",y:"yy",Y:"yyyy"},Ce={j:"dd",d:"dd",D:"ddd",l:"dddd",n:"mm",m:"mm",M:"mmm",F:"mmmm",y:"yy",Y:"yyyy"},Ee={},Ie={};function De(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(e){const r=e[0],a=e.slice(1);"!"===r?De(a,t,4):"?"===r?De(a,t,2):(t[r]=t[r]||{},De(a,t[r],n))}else t.$=n}function Oe(e,t){De(e,t),De(e+" x",t),De(e+" l",t),De(e+" l x",t),De("l "+e,t),De("l "+e+" x",t),De(e+" D",t),De(e+" D x",t),De("D "+e,t),De("D "+e+" x",t)}["!d-m-y","!d-m-Y","!j-m-y","!j-m-Y","!d-n-y","!d-n-Y","!j-n-y","!j-n-Y","?m-d-y","?m-d-Y","?m-j-y","?m-j-Y","?n-d-y","?n-d-Y","?n-j-y","?n-j-Y","d-M-y","d-M-Y","j-M-y","j-M-Y","M-d-y","M-d-Y","M-j-y","M-j-Y","d-F-y","d-F-Y","F-d-y","F-d-Y","F-j-y","F-j-Y","j-F-y","j-F-Y","y-F-d","y-F-j","y-M-d","y-M-j","Y-F-d","Y-F-j","Y-M-d","Y-m-d","Y-M-j","Y-m-j","Y-n-d","Y-n-j","j-F","j-M","d-F","d-M","n-d","n-j","n-Y","m-d","m-j","m-Y","M-Y","M-y","F-y","F-Y","Y-M","Y-n","Y-m","Y-F","Y-M"].forEach((e=>{"?"!==e[0]&&Oe(e,Ee),"!"!==e[0]&&Oe(e,Ie)}));const Ne=(new Date).getUTCFullYear(),Te=" ",Ye=" ",Pe=" ",Re="'",Le="٬",Ue={".":[",",Ye,Pe,Re,Le],",":[".",Ye,Pe,Re,Le],"٫":[".",Ye,Pe,Re,Le]},He=e=>e&&1===e.length&&e>="0"&&e<="9";function Ge(e){const t=oe((arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).locale||"")||de,n=t.decimal,r=[...Ue[n]||[Re,Le]];r.includes(t.group)||t.group===Te||t.group===n||r.push(t.group);let a="",i="",o=1,s="",m=!1,d=!1,l=!1,u=!1,c=!1,p=null,f=!1,h=0;const g=[Te,Ye,Pe,"+","%","(","-"].concat($);for(;g.includes(e[h]);){const t=e[h];if("-"===t){if(m||d)return null;m=!0,o=-1}else if(W.test(t)){if(c)return null;c=!0,p=t}else if("("===t){if(d||m)return null;d=!0,o=-1}else if("%"===t){if(u)return null;u=!0}h++}let b,y=!1;if(e[h]===n||He(e[h]))for(;h<e.length;){const t=e[h];if(!b&&r.includes(t))b=t;else if(b&&b===t);else if(t===n){if(y)break;a+=".",y=!0}else{if(!He(t))break;a+=t}h++}if("e"===e[h]||"E"===e[h]){i+=e[h],h++,"+"!==e[h]&&"-"!==e[h]||(i+=e[h],h++);const t=h;for(;He(e[h]);)i+=e[h],h++;if(t===h)return null}const v=[Te,Ye,Pe,"%","$",")"].concat($);for(;v.includes(e[h]);){const t=e[h];if(W.test(t)){if(c)return null;c=!0,p=t,f=!0}else if(")"===t){if(l||!d)return null;l=!0}else if("%"===t){if(u)return null;u=!0}h++}if(h!==e.length)return null;let _=parseFloat(a+i);if(!isFinite(_))return null;if(i){if(u||c)return null;s="0.00E+00"}else if(u){if(c)return null;s=a.includes(".")?"0.00%":"0%",_*=.01}else if(c){const e=a.includes(".")?"#,##0.00":"#,##0";s=f?e+p:p+e}else b&&(s=a.includes(".")?"#,##0.00":"#,##0");const j={v:_*o};return s&&(j.z=s),j}function Be(e,t,n){if(n<1)return!1;if(t<1||t>12)return!1;if(2===t){if(n>(e%4==0&&e%100!=0||e%400==0||1900===e?29:28))return!1}else if((4===t||6===t||9===t||11===t)&&n>30||(1===t||3===t||5===t||7===t||8===t||10===t||12===t)&&n>31)return!1;return!0}const Je=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];for(const r of t)if(e.startsWith(r[0])){let t=r[0].length;return!n||"D"!==r[2]&&"M"!==r[2]||"."!==e[t]||t++,[e.slice(0,t),r]}return["",null]},Ve=(e,t,n,r)=>{const a=n.path||"",i=Object.keys(t);for(let o=0;o<i.length;o++){let s;const m=i[o];if(t[m]){if("$"===m||"€"===m)e||(s=n);else if("-"===m){const i=/^(\s*([./-]|,\s)\s*|\s+)/.exec(e);if(i){const o="-"===i[1]||"/"===i[1]||"."===i[1]?i[1]:" ";if(!n.sep||n.sep===o){const d=i[0].replace(/\s+/g," ");s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{sep:o,path:a+d}),r)}}}else if(" "===m){const i=/^[,.]?\s+/.exec(e);if(i){const o=i[0].replace(/\s+/g," ");s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{path:a+o}),r)}}else if("j"===m||"d"===m){const i=/^(0?[1-9]|1\d|2\d|3[01])\b/.exec(e);i&&(s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{day:i[0],path:a+m}),r))}else if("n"===m||"m"===m){const i=/^(0?[1-9]|1[012])\b/.exec(e);i&&(s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{month:+i[0],_mon:i[0],path:a+m}),r))}else if("F"===m||"M"===m){const[i,o]=Je(e,r.mon,r.mp);o&&o[2]===m&&(s=Ve(e.slice(i.length),t[m],X(X({},n),{},{month:o[1],_mon:i,path:a+m}),r))}else if("l"===m||"D"===m){const[i,o]=Je(e,r.day,r.dp);o&&o[2]===m&&(s=Ve(e.slice(i.length),t[m],X(X({},n),{},{path:a+m}),r))}else if("y"===m){const i=/^\d\d\b/.exec(e);if(i){const o=+i[0]>=30?+i[0]+1900:+i[0]+2e3;s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{year:o,path:a+m}),r)}}else if("Y"===m){const i=/^\d\d\d\d\b/.exec(e);i&&(s=Ve(e.slice(i[0].length),t[m],X(X({},n),{},{year:+i[0],path:a+m}),r))}else{if("x"!==m)throw new Error('Unknown date token "'.concat(m,'"'));{const i=Xe(e,{locale:r.locale});i&&(s=Ve("",t[m],X(X({},n),{},{time:i.v,tf:i.z,path:a+m}),r))}}if(s&&Be(n.year||1916,n.month||1,n.day?+n.day:1))return s}}},$e=e=>e.replace(/\s+/g," ").trim().replace(/’/,"'").replace(/\.$/,"").toLowerCase(),We=(e,t)=>{const n=e.map(((e,n)=>[$e(e),n+1,t]));return n.sort(((e,t)=>t[0].length-e[0].length)),n};function Ze(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=oe(t.locale||"")||de,r={mon:We(n.mmmm,"F").concat(We(n.mmm,"M")),mp:"."===n.mmm[0].at(-1),day:We(n.dddd,"l").concat(We(n.ddd,"D")),dp:"."===n.ddd[0].at(-1),locale:t.locale},a=Ve($e(e),n.preferMDY?Ie:Ee,{path:""},r);if(a){var i;if("."===a.sep&&3===a.path.length)return null;const e=+(null!==(i=a.year)&&void 0!==i?i:Ne);a.day||(a.day=1);let t=-1/0;if(e<1900)return null;e<=1900&&a.month<=2?t=25568:e<1e4&&(t=25569);const n=Date.UTC(e,a.month-1,a.day)/864e5+t+(a.time||0);if(n>=0&&n<=2958465){const e="0"===a._mon[0]||"0"===a.day[0]||2===a._mon.length&&2===a.day.length;return{v:n,z:a.path.replace(/[jdlDnmMFyYx]/g,(t=>"x"===t?a.tf||"":(e?Ce[t]:ze[t])||t))}}}return null}const Ke=e=>e.replace(/\s+/g,"").trim().replace(/\./g,"").toLowerCase();function Xe(e){const t=oe((arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).locale||"")||de,n=/^\s*([10]?\d|2[0-4])(?::([0-5]\d|\d))?(?::([0-5]\d|\d))?(\.\d{1,10})?(?=\s*[^\s\d]|$)/.exec(e);let r="";if(n){const a=Ke(e.slice(n[0].length));if(a===Ke(t.ampm[0])||"a"===a||"am"===a)r="a";else if(a===Ke(t.ampm[1])||"p"===a||"pm"===a)r="p";else if(a)return null}if(n){const[,e,t,a,i]=n;if(i&&!a)return null;if(!r&&!t&&!a)return null;let o=1*+(e||0);if(r){if(o>=13)return null;"p"===r&&(o+=12)}return{v:(60*o*60+60*(1*+(t||0))+1*+(a||0)+1*+(i||0))/86400,z:(2===e.length?"hh":"h")+":mm"+(a?":ss":"")+(r?" AM/PM":"")}}return null}function qe(e){const t=oe((arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).locale||"")||de,n=e.trim().toLowerCase(),r=t.bool[0].toLowerCase();if("true"===n||n===r)return{v:!0};const a=t.bool[1].toLowerCase();return"false"===n||n===a?{v:!1}:null}function Qe(e,t,n){return t[n+"_max"]=e.length,t[n+"_min"]=e.replace(/#/g,"").length,t}function et(e,t){"string"==typeof e?t.push({type:"string",value:e}):t.push(e)}function tt(e,t){const n=e&&e.type;return n===p||n===f||n===h||n===w&&"den"===t}function nt(d){const p=[],h={scale:1,percent:!1,text:!1,date:0,date_eval:!1,date_system:l,sec_decimals:0,general:!1,clock:24,int_pattern:[],frac_pattern:[],man_pattern:[],den_pattern:[],num_pattern:[],tokens:p};let Y="int",V=null;const $=[];let W,Z=!1,K=-1,X=!1,q="",Q=!1;for(;++K<d.length&&!X;){var ee;const ae=d[K],oe=ae.type||z;if(q+=ae.raw,oe===c)h.general=!0,et(ae,p);else if(tt(ae,Y)){var te;const e=h[Y+"_pattern"];tt(W,Y)||(null===(te=W)||void 0===te?void 0:te.type)===b?(e.push((e.pop()||"")+ae.value),V.num+=ae.value):(e.push(ae.value),V={type:Y,num:ae.value},et(V,p))}else if(oe===B)"("===ae.value&&(h.parens=!0),et(ae.value,p);else if(oe===w)et(ae.value,p);else if(oe===g)if(Q=!0,h[Y+"_pattern"].length){if(!V)throw new SyntaxError("Format pattern is missing a numerator");h.fractions=!0,h.num_pattern.push(h[Y+"_pattern"].pop()),V.type="num",Y="den",et({type:"div"},p)}else et(ae.value,p);else if(oe===v)et(",",p);else if(oe===y)h.scale=.001**ae.raw.length;else if(oe===b){if("int"===Y&&(h.grouping=!0),"den"===Y)throw new SyntaxError("Cannot group denominator digits")}else if(oe===x)et(ae,p);else{if(oe===_){X=!0;break}if(oe===j)h.text=!0,et(ae,p);else if(oe===M||oe===k)et(ae,p);else if(oe===E){const e=ae.value.toLowerCase(),t=e[0],n={type:"",size:0,date:1,pad:e.length};"h"===t?(n.size=r,n.type="hour-elap"):"m"===t?(n.size=a,n.type="min-elap"):(n.size=i,n.type="sec-elap"),h.date=h.date|n.size,$.push(n),et(n,p)}else if(h.date&&oe===F&&(null===(ee=d[K+1])||void 0===ee?void 0:ee.type)===f){var ne,re;let e=1;K++;let t="0";(null===(ne=d[K+1])||void 0===ne?void 0:ne.type)===f&&(t+="0",e=2,K++),(null===(re=d[K+1])||void 0===re?void 0:re.type)===f&&(t+="0",e=3,K++),q+=t;const n=[i,o,s,m][e];h.date=h.date|n,h.date_eval=!0,h.sec_decimals=Math.max(h.sec_decimals,e),et({type:"subsec",size:n,decimals:e,date:1},p)}else if(oe===S)Z||("B2"===ae.value||"b2"===ae.value?h.date_system=u:h.date_system=l);else if(oe===C){const o={type:"",size:0,date:1},s=ae.value.toLowerCase(),m=s[0];if("y"===s||"yy"===s)o.size=e,o.type="year-short";else if("y"===m||"e"===m)o.size=e,o.type="year";else if("b"===s||"bb"===s)o.size=e,o.type="b-year-short";else if("b"===m)o.size=e,o.type="b-year";else if("d"===s||"dd"===s)o.size=n,o.type="day",o.pad=/dd/.test(s);else if("ddd"===s||"aaa"===s)o.size=n,o.type="weekday-short";else if("d"===m||"a"===m)o.size=n,o.type="weekday";else if("h"===m)o.size=r,o.type="hour",o.pad=/hh/i.test(s);else if("m"===m){3===s.length?(o.size=t,o.type="monthname-short"):5===s.length?(o.size=t,o.type="monthname-single"):s.length>=4&&(o.size=t,o.type="monthname");const e=$[$.length-1];!o.type&&e&&!e.used&&e.size&(r|i)&&(e.used=!0,o.size=a,o.type="min",o.pad=/mm/.test(s)),o.type||(o.size=t,o.type="month",o.pad=/mm/.test(s),o.indeterminate=!0)}else if("s"===m){o.size=i,o.type="sec",o.pad=/ss/.test(s);const e=$[$.length-1];e&&e.size&a?o.used=!0:e&&e.indeterminate&&(delete e.indeterminate,e.size=a,e.type="min",o.used=!0)}h.date=h.date|o.size,h.date_eval=!0,$.push(o),et(o,p)}else if(oe===P)h.clock=12,h.date=h.date|r,h.date_eval=!0,ae.short="A/P"===ae.value,et(ae,p);else if(oe===L||oe===R||oe===J)et(ae.value,p);else if(oe===I)h.condition=[ae.value[0],parseFloat(ae.value[1])];else if(oe===N){const e=ae.value.split("-"),t=e.length<2?"":e.slice(1).join("-"),n=e[0];n&&et(n,p);const r=ie(t);r&&(h.locale=r);const a=parseInt(t,16);if(isFinite(a)&&16711680&a){6===(a>>16&255)&&(h.date_system=u)}Z=!0}else if(oe===T){let e,t=ae.value.toLowerCase();(e=/^color\s*(\d+)$/i.exec(t))&&(t=parseInt(e[1],10)),h.color=t}else if(oe===A)h.scale=100,h.percent=!0,et("%",p);else if(oe===F)et(ae,p),h.date||(h.dec_fractions=!0,Y="frac");else if(oe===H)h.exponential=!0,h.exp_plus=ae.value.includes("+"),Y="man",et({type:"exp",plus:h.exp_plus},p);else if(oe===U)et(ae,p);else if(oe===G)et(ae,p);else if(oe!==D&&oe!==O)throw oe===z?new SyntaxError("Illegal character: ".concat(q)):new SyntaxError("Unknown token ".concat(oe," in ").concat(q))}W=ae}if(h.tokensUsed=K,h.pattern=q,/^((?:\[[^\]]+\])+)(;|$)/.test(h.pattern)&&!/^\[(?:h+|m+|s+)\]/.test(h.pattern)&&et({type:"text"},p),h.fractions&&h.dec_fractions||h.grouping&&!h.int_pattern.length||h.fractions&&h.exponential||h.fractions&&h.den_pattern.length*h.num_pattern.length==0||Q&&!h.fractions&&!h.date||h.exponential&&(h.int_pattern.length||h.frac_pattern.length)*h.man_pattern.length==0)throw new SyntaxError("Invalid pattern: ".concat(q));const ae=h.int_pattern.join(""),oe=h.man_pattern.join(""),se=h.frac_pattern.join("");Qe(ae,h,"int");let me=0;for(let e=0;e<ae.length;e++){const t=ae[ae.length-1-e];/^[0-9?]/.test(t)&&(me=e+1)}h.int_min=me,Qe(se,h,"frac"),Qe(oe,h,"man");let de=h.num_pattern.join(""),le=h.den_pattern[0]||"";if(le.includes("?")||de.includes("?")?(le=le.replace(/\d/g,"?"),le=le.replace(/#$/g,"?"),Qe(de,h,"num"),Qe(le,h,"den"),de=de.replace(/#$/g,"?")):(Qe(de,h,"num"),Qe(le,h,"den")),h.int_p=ae,h.man_p=oe,h.num_p=de,h.den_p=le,h.den_pattern.length&&(h.denominator=parseInt(h.den_pattern.join("").replace(/\D/g,""),10)),h.integer=!!ae.length,!h.integer&&!h.exponential&&se.length){const e=h.tokens.findIndex((e=>"point"===e.type));h.tokens.splice(e,0,{type:"int",value:"#"}),h.integer=!0,h.int_pattern=["#"],h.int_p="#"}if(h.fractions)for(let e=0;e<p.length-1;e++){const t=p[e];if("string"!==t.type&&"space"!==t.type)continue;const n=p[e+1].type;"num"===n?t.rule="num+int":"div"===n?t.rule="num":"den"===n&&(t.rule="den")}return h.grouping&&h.int_pattern.length>1&&(h.grouping=!1),h}const rt={total:1,sign:0,period:0,int:1,frac:0};const at=(e,t)=>e.replace(/\./,t.decimal),it=(e,t,n)=>{const r=Math.abs(t);let a;return a=1===e?e:_e(e,5),[at(a+"",n),n.exponent,t<0?n.negative:n.positive,r<10?"0":"",r]};function ot(e,t,n,r){const a=0|n;if("string"==typeof n)e.push(n);else if(n===a)e.push(Math.abs(a));else{const t=Math.abs(n);let a=t?Math.floor(Math.log10(t)):0,i=t*10**-a;10===i&&(i=1,a++);const o=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Math.abs(e);if(!n)return rt;const r=t&&e<0?1:0,a=Math.floor(n),i=Math.floor(Math.log10(n)+1);let o=0,s=0;if(a!==n){o=1;const e=String(_e(n*10**-i,15));let t=e.length,r=!0,a=0;for(;a<=e.length;){if("."===e[a]){t--;break}"0"===e[a]&&r?t--:r=!1,a++}s=t-i,s<0&&(s=0,o=0)}return{total:r+Math.max(i,1)+o+s,digits:Math.max(i,0)+s,sign:r,period:o,int:Math.max(i,1),frac:s}}(t);if(a>=-4&&a<=-1){const n=t.toPrecision(10+a).replace(/\.?0+$/,"");e.push(at(n,r))}else if(10===a){const n=t.toFixed(10).slice(0,12).replace(/\.$/,"");e.push(at(n,r))}else if(Math.abs(a)<=9)if(o.total<=11){const n=_e(t,9).toFixed(o.frac);e.push(at(n,r))}else 9===a?e.push(Math.floor(t)):a>=0&&a<9?e.push(at(String(_e(t,9-a)),r)):e.push(...it(i,a,r));else o.total>=12?e.push(...it(i,a,r)):e.push(at(_e(t,9).toFixed(o.frac),r))}return e}function st(e){return"0"===e?"0":"?"===e?arguments.length>1&&void 0!==arguments[1]&&arguments[1]?" ":" ":""}const mt=86400,dt=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Math.floor(Math.log10(e));return t>1?Math.floor(n/t)*t:n},lt=(e,t,n)=>n?e<-694324||t>=35830291:e<0||t>=2958466;function ut(e,t,n,r){var a,i;let d="",l="",c="",p="",f="",h="",g=0,b=0;if("bigint"==typeof e){if(!(e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER))return n.bigintErrorNumber?String(e):n.overflow;b=e=Number(e)}else b=Math.trunc(e);let y=0,v=0,_=1,j=0,M=0,k=0,F=0,x=0,A=0;const w=r||de;if(!t.text&&isFinite(t.scale)&&1!==t.scale&&(e=function(e){if(0===e)return e;const t=Math.ceil(Math.log10(e<0?-e:e)),n=10**(16-Math.floor(t));return isFinite(n)?Math.round(e*n)/n:0}(e*t.scale)),t.exponential){let n=Math.abs(e);if(n){const e=10**-dt(n,t.int_max),r=_e(n*e,t.frac_max)/e;g=dt(r,t.int_max)}e&&!t.integer&&g++,n*=10**-g,e=e<0?-n:n,d+=Math.abs(g)}if(t.integer){const n=Math.abs(_e(e,t.fractions?1:t.frac_max));h+=n<1?"":Math.floor(n)}const S=null!==(a=n.grouping[0])&&void 0!==a?a:3,z=null!==(i=n.grouping[1])&&void 0!==i?i:S;t.dec_fractions&&(f=String(_e(e,t.frac_max)).split(".")[1]||"");const C=!t.error&&(t.num_p.includes("0")||t.den_p.includes("0"));let E=C;if(t.fractions){E=C||!!(e%1);const n=Math.abs(t.integer?e%1:e);if(n)if(E=!0,t.denominator&&isFinite(t.denominator))p+=t.denominator,c+=_e(n*t.denominator),"0"===c&&(c="",p="",E=C);else{const e=Me(n,1/0,t.den_max);c+=e[0],p+=e[1],t.integer&&"0"===c&&(c="",p="",E=C)}else e||t.integer||(E=!0,c="0",p="1");!t.integer||E||Math.trunc(e)||(h="0")}if(t.date){b=Math.trunc(e);const r=mt*(e-b);if(y=Math.floor(r),A=r-y,Math.abs(A)<1e-6?A=0:A>.9999&&(A=0,y+=1,y===mt&&(y=0,b+=1)),A){const e=t.date&m||t.date&s||t.date&o;(e===m&&A>.9995||e===s&&A>.995||e===o&&A>.95||!e&&A>=.5)&&(y++,A=0)}if(b||t.date_system){const r=xe(e,t.date_system,n.leap1900);v=r[0],_=r[1],j=r[2]}if(y){const e=y<0?mt+y:y;x=Math.floor(e)%60,F=Math.floor(e/60)%60,k=Math.floor(e/60/60)%60}if(M=(6+b)%7,t.date_eval&&lt(e,b+y/mt,n.dateSpanLarge)){if(n.dateErrorThrows)throw new Error("Date out of bounds");if(n.dateErrorNumber){return ot(e<0?[w.negative]:[],0,e,w).join("")}return n.overflow}}const I=st("?",n.nbsp);g<0?l="-":t.exp_plus&&(l="+");const D=[],O=(e,t,r,a)=>{const i=!a&&e.length>t.length?r.length+e.length-t.length:r.length;e.length<t.length&&(a+=e.length-t.length);for(let t=0;t<i;t++)D.push(e[t+a]||st(r[t],n.nbsp));return i};let N=!1;const T={int:0,frac:0,man:0,num:0,den:0};for(let a=0,i=t.tokens.length;a<i;a++){const i=t.tokens[a],o=i.type,s=i.num?i.num.length:0;if("string"===o)i.rule?"num"===i.rule?E?D.push(i.value.replace(/ /g,I)):(t.num_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,I)):"num+int"===i.rule?E&&h?D.push(i.value.replace(/ /g,I)):t.den_min>0&&(h||t.num_min)&&D.push(i.value.replace(/./g,I)):"den"===i.rule&&(E?D.push(i.value.replace(/ /g,I)):(t.den_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,I))):D.push(i.value.replace(/ /g,I));else if("space"===o)"num+int"===i.rule?(E||t.num_min||t.den_min)&&(h||t.num_min)&&D.push(I):D.push(I);else if("error"===o)D.push(n.invalid);else if("point"===o)D.push(t.date?i.value:w.decimal);else if("general"===o)ot(D,0,e,w);else if("exp"===o)D.push(w.exponent);else if("minus"===o)i.volatile&&t.date||i.volatile&&(e>=0||"number"!=typeof e)||(i.volatile&&!t.fractions&&(t.integer||t.dec_fractions)?(e<0&&h&&"0"!==h||f)&&D.push(w.negative):D.push(w.negative));else if("plus"===o)D.push(w.positive);else if("text"===o)D.push(e);else if("fill"===o)n.fillChar&&D.push(n.fillChar,i.value);else if("skip"===o)n.skipChar?D.push(n.skipChar,i.value):D.push(n.nbsp?" ":" ");else if("div"===o)E?D.push("/"):t.num_min>0||t.den_min>0?D.push(I):D.push(st("#",n.nbsp));else if("int"===o)if(1===t.int_pattern.length){const e=t.int_p;let r="";for(let a=Math.max(t.int_min,h.length);a>0;a--){const i=h.charAt(h.length-a),o=i?"":e.charAt(e.length-a)||e[0];let s="";if(t.grouping){const e=a-1-S;e>=0&&!(e%z)&&(s=i||"0"===o?w.group:st("?",n.nbsp))}r+=(i||st(o,n.nbsp))+s}D.push(r)}else T.int+=O(h,t.int_p,i.num,T.int);else if("frac"===o){const e=T.frac;for(let t=0;t<s;t++)D.push(f[t+e]||st(i.num[t],n.nbsp));T.frac+=s}else if("man"===o)T[o]||T.man||D.push(l),T.man+=O(d,t.man_p,i.num,T.man);else if("num"===o)T.num+=O(c,t.num_p,i.num,T.num);else if("den"===o){const e=T.den;for(let t=0;t<s;t++){let r=p[t+e];if(!r){const e=i.num[t];"123456789".includes(e)||N&&"0"===e?(N=!0,r=n.nbsp?" ":" "):r=N||t!==s-1||"0"!==e||p?st(e,n.nbsp):"1"}D.push(r)}T.den+=s}else if("year"===o)v<0&&D.push(w.negative),D.push(String(Math.abs(v)).padStart(4,"0"));else if("year-short"===o){const e=v%100;D.push(e<10?"0":"",e)}else if("month"===o)D.push(i.pad&&_<10?"0":"",_);else if("monthname-single"===o)t.date_system===u?D.push(w.mmmm6[_-1].charAt(0)):D.push(w.mmmm[_-1].charAt(0));else if("monthname-short"===o)t.date_system===u?D.push(w.mmm6[_-1]):D.push(w.mmm[_-1]);else if("monthname"===o)t.date_system===u?D.push(w.mmmm6[_-1]):D.push(w.mmmm[_-1]);else if("weekday-short"===i.type)D.push(w.ddd[M]);else if("weekday"===o)D.push(w.dddd[M]);else if("day"===o)D.push(i.pad&&j<10?"0":"",j);else if("hour"===o){const e=k%t.clock||(t.clock<24?t.clock:0);D.push(i.pad&&e<10?"0":"",e)}else if("min"===o)D.push(i.pad&&F<10?"0":"",F);else if("sec"===o)D.push(i.pad&&x<10?"0":"",x);else if("subsec"===o){D.push(w.decimal);const e=A.toFixed(t.sec_decimals);D.push(e.slice(2,2+i.decimals))}else if("ampm"===o){const e=k<12?0:1;i.short&&!r?D.push("AP"[e]):D.push(w.ampm[e])}else if("hour-elap"===o){e<0&&D.push(w.negative);const t=24*b+Math.floor(Math.abs(y)/3600);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("min-elap"===o){e<0&&D.push(w.negative);const t=1440*b+Math.floor(Math.abs(y)/60);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("sec-elap"===o){e<0&&D.push(w.negative);const t=b*mt+Math.abs(y);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("b-year"===o)D.push(v+543);else if("b-year-short"===o){const e=(v+543)%100;D.push(e<10?"0":"",e)}}return D.join("")}const ct=nt([{type:j,value:"@",raw:"@"}]);function pt(e,t){for(let n=0;n<3;n++){const r=t[n];if(r){let t;if(r.condition){const n=r.condition[0],a=r.condition[1];"="===n?t=e===a:">"===n?t=e>a:"<"===n?t=e<a:">="===n?t=e>=a:"<="===n?t=e<=a:"<>"===n&&(t=e!==a)}else t=!0;if(t)return r}}}function ft(e){return!!(e[0]&&e[0].percent||e[1]&&e[1].percent||e[2]&&e[2].percent||e[3]&&e[3].percent)}function ht(e){return!!(e[0]&&e[0].date||e[1]&&e[1].date||e[2]&&e[2].date||e[3]&&e[3].date)}function gt(e){const[t,n,r,a]=e;return!(t&&!t.generated||n&&!n.generated||r&&!r.generated||!a||!a.text||a.generated)}const bt={text:15,datetime:10.8,date:10.8,time:10.8,percent:10.6,currency:10.4,grouped:10.2,scientific:6,number:4,fraction:2,general:0,error:0},yt=[["DMY",1],["DM",2],["MY",3],["MDY",4],["MD",5],["hmsa",6],["hma",7],["hms",8],["hm",9]];const vt=[[c,/^General/i,0],[p,/^#/,0],[f,/^0/,0],[h,/^\?/,0],[g,/^\//,0],[_,/^;/,0],[j,/^@/,0],[M,/^\+/,0],[k,/^-/,0],[F,/^\./,0],[x,/^ /,0],[A,/^%/,0],[w,/^[1-9]/,0],[S,/^(?:B[12])/i,0],[z,/^B$/,0],[C,/^(?:[hH]+|[mM]+|[sS]+|[yY]+|[bB]+|[dD]+|[gG]+|[aA]{3,}|e+)/,0],[E,/^(?:\[(h+|m+|s+)\])/i,1],[I,/^\[(<[=>]?|>=?|=)\s*(-?[.\d]+)\]/,[1,2]],[D,/^\[(DBNum[0-4]?\d)\]/i,1],[O,/^\[(NatNum[0-4]?\d)\]/i,1],[N,/^\[\$([^\]]+)\]/,1],[T,/^\[(black|blue|cyan|green|magenta|red|white|yellow|color\s*\d+)\]/i,1],[Y,/^\[([^\]]+)\]/,1],[P,/^(?:AM\/PM|am\/pm|A\/P)/,0],[R,/^\\(.)/,1],[L,/^"([^"]*?)"/,1],[U,/^_(\\.|.)/,1],[H,/^[Ee]([+-])/,1],[G,/^\*(\\.|.)/,1],[B,/^[()]/,0],[z,/^[EÈÉÊËèéêëĒēĔĕĖėĘęĚěȄȅȆȇȨȩNnÑñŃńŅņŇňǸǹ["*/\\_]/,0],[J,/^./,0]],_t=e=>{const t=(e||"\0").charCodeAt(0);return 63===t||35===t||t>=48&&t<=57};function jt(e){let t=0;const n=[],r=[];for(;t<e.length;){const a=e.slice(t);let i=0;const o=/^(,+)(.)?/.exec(a);if(o){const a=o[1];i=a.length;const s=e[t-1]||"";let m=!1,d=!1;_t(s)?(m=!0,d=!0):"."===s&&(d=!0);const l=o[2]||"";if(!m||l&&";"!==l||(m=!1),d&&_t(l)&&(d=!1),m&&!d)n.push({type:b,value:",",raw:a});else if(!m&&d)n.push({type:y,value:",",raw:a});else if(m&&d){const e={type:y,value:",",raw:a};n.push(e),r.push(e)}else n.push({type:v,value:",",raw:a})}else{let e;for(const[t,r,o]of vt){const s=r.exec(a);if(s){e={type:t,value:Array.isArray(o)?o.map((e=>s[e])):s[o||0],raw:s[0]},n.push(e),i=s[0].length;break}}r.length&&";"===e.raw&&(r.length=0),r.length&&_t(e.raw)&&(r.forEach((e=>e.type=b)),r.length=0)}if(!i){const e=a[0];i=1,n.push({type:J,value:e,raw:e})}t+=i}return n}const Mt=e=>{const t=e.condition;t&&t[1]<0&&("<"===t[0]||"<="===t[0]||"="===t[0])||e.tokens.unshift({type:"minus",volatile:!0})},kt=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n={};for(const t in e)Array.isArray(e[t])?n[t]=[...e[t]]:n[t]=e[t];return t&&n.tokens.unshift(t),n.generated=!0,n};const Ft=Object.create({});function xt(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e||(e="General");let n=Ft[e];if(!n)try{n=function(e){const t=[];let n,r=!1,a=null,i=0,o=!1,s=0,m=0,d=jt(e);do{var l;if(o=nt(d),(o.date||o.general)&&(o.int_pattern.length||o.frac_pattern.length||1!==o.scale||o.text))throw new Error("Illegal format");if(o.condition&&(m++,r=!0),o.text){if(a)throw new Error("Unexpected partition");a=o}o.locale&&(n=ie(o.locale)),t.push(o),i="break"===(null===(l=d[o.tokensUsed])||void 0===l?void 0:l.type)?1:0,d=d.slice(o.tokensUsed+i),s++}while(i&&s<4&&m<3);if(i)throw new Error("Unexpected partition");if(m>2)throw new Error("Unexpected condition");const u=t[3];if(u&&(u.int_pattern.length||u.frac_pattern.length||u.date))throw new Error("Unexpected partition");if(r){const e=t.length;if(1===e&&(t[1]=nt(jt("General")),t[1].generated=!0),e<3){const e=t[0],n=t[1];if(Mt(e),n.condition)Mt(n);else{const t=e.condition;("="===t[0]||t[1]>=0&&(">"===t[0]||">="===t[0]))&&n.tokens.unshift({type:"minus",volatile:!0})}}else t.forEach(Mt)}else{if(t.length<4&&a)for(let e=0,n=t.length;e<n;e++)t[e]===a&&t.splice(e,1);if(t.length<1&&a&&(t[0]=nt(jt("General")),t[0].generated=!0),t.length<2){const e={type:"minus",volatile:!0};t.push(kt(t[0],e))}if(t.length<3&&t.push(kt(t[0])),t.length<4)if(a)t.push(a);else{const e=nt(jt("@"));e.generated=!0,t.push(e)}t[0].condition=[">",0],t[1].condition=["<",0],t[2].condition=null}return{pattern:e,partitions:t,locale:n}}(e),Ft[e]=n}catch(r){if(t)throw r;const a={tokens:[{type:"error"}],error:r.message};n={pattern:e,partitions:[a,a,a,a],error:r.message,locale:null}}return n}const At=Object.freeze({AMPM:P,BREAK:_,CALENDAR:S,CHAR:J,COLOR:T,COMMA:v,CONDITION:I,DATETIME:C,DBNUM:D,DIGIT:w,DURATION:E,ERROR:z,ESCAPED:R,EXP:H,FILL:G,GENERAL:c,GROUP:b,HASH:p,LOCALE:N,MINUS:k,MODIFIER:Y,NATNUM:O,PAREN:B,PERCENT:A,PLUS:M,POINT:F,QMARK:h,SCALE:y,SKIP:U,SLASH:g,SPACE:x,STRING:L,TEXT:j,ZERO:f});exports.addLocale=me,exports.dateFromSerial=function(e,t){let n=0|e;const r=we*(e-n);let a=Ae(r);r-a>.9999&&(a+=1,a===we&&(a=0,n+=1));const i=a<0?we+a:a,[o,s,m]=xe(e,0,t&&t.leap1900);return[o,s,m,Ae(i/60/60)%60,Ae(i/60)%60,Ae(i)%60]},exports.dateToSerial=Se,exports.dec2frac=Me,exports.format=function(e,t){var n;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const a=Object.assign({},ve,r),i=xt(e,a.throws);return function(e,t,n){const r=t.partitions,a=oe(t.locale||n.locale),i=r[3]?r[3]:ct;"boolean"==typeof e&&(e=(a||de).bool[e?0:1]);if(null==e)return"";const o="bigint"==typeof e;if("number"!=typeof e&&!o)return ut(e,i,n,a);if(!o&&!isFinite(e)){const t=a||de;return isNaN(e)?t.nan:(e<0?t.negative:"")+t.infinity}const s=pt(e,r);return s?ut(e,s,n,a):n.overflow}(null!==(n=Se(t,a))&&void 0!==n?n:t,i,a)},exports.formatColor=function(e,t,n){var r;const a=Object.assign({},ve,n),i=xt(e,a.throws);return function(e,t,n){const r=t.partitions;let a=r[3],i=null;return"number"!=typeof e&&"bigint"!=typeof e||!isFinite(e)||(a=pt(e,r)),a&&a.color&&(i=a.color),i&&"number"==typeof i&&n.indexColors&&(i=V[i-1]||"#000"),i}(null!==(r=Se(t,a))&&void 0!==r?r:t,i,a)},exports.getFormatDateInfo=function(o){const s=xt(o,!1);return s.dateInfo||(s.dateInfo=function(o){const[s]=o;return{year:!!(s.date&e),month:!!(s.date&t),day:!!(s.date&n),hours:!!(s.date&r),minutes:!!(s.date&a),seconds:!!(s.date&i),clockType:12===s.clock?12:24}}(s.partitions)),s.dateInfo},exports.getFormatInfo=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=xt(e,!1);return n.info||(n.info=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const[r,a]=e,i=r.frac_max,o={type:"general",isDate:ht(e),isText:gt(e),isPercent:ft(e),maxDecimals:r.general?9:i,scale:null!==(t=r.scale)&&void 0!==t?t:1,color:0,parentheses:0,grouped:r.grouping?1:0},s=!o.isDate&&!o.isText&&!r.error&&r.tokens.some((e=>"string"===e.type&&(n?e.value===n:W.test(e.value))));let m="G",d=i>=0?Math.min(15,i):"",l="",u="";if(a&&a.color&&(u="-",o.color=1),r.parens&&(l="()",o.parentheses=1),s)m="C",o.type="currency";else if(r.error)o.type="error",o.maxDecimals=0;else if(o.isDate){let e=0,t=0,n="";r.tokens.forEach((r=>{const a=r.type;/^(b-)?year/.test(a)?(n+="Y",t++):a.startsWith("month")?(n+="M",t++):/^(week)?day/.test(a)?(n+="D",t++):"hour"!==a&&"min"!==a&&"sec"!==a&&"ampm"!==a||(n+=a[0],e++)})),o.type="date",t&&e?o.type="datetime":!t&&e&&(o.type="time");const a=yt.find((e=>n.startsWith(e[0])));m=a?"D":"G",d=a?a[1]:""}else o.isText?(m="G",o.type="text",d="",o.maxDecimals=0):r.general?(m="G",o.type="general",d=""):r.fractions?(m="G",o.type="fraction",d=""):r.exponential?(m="S",o.type="scientific"):o.isPercent?(m="P",o.type="percent"):r.grouping?(m=",",o.type="grouped"):(r.int_max||i)&&(m="F",o.type="number");return o.code=m+d+u+l,o.level=bt[o.type],Object.freeze(o)}(n.partitions,null==t?void 0:t.currency)),n.info},exports.getLocale=oe,exports.isDateFormat=function(e){return ht(xt(e,!1).partitions)},exports.isPercentFormat=function(e){return ft(xt(e,!1).partitions)},exports.isTextFormat=function(e){return gt(xt(e,!1).partitions)},exports.isValidFormat=function(e){try{return xt(e,!0),!0}catch(e){return!1}},exports.parseBool=qe,exports.parseDate=Ze,exports.parseLocale=ae,exports.parseNumber=Ge,exports.parseTime=Xe,exports.parseValue=function(e,t){var n,r,a;return null!==(n=null!==(r=null!==(a=Ge(e,t))&&void 0!==a?a:Ze(e,t))&&void 0!==r?r:Xe(e,t))&&void 0!==n?n:qe(e,t)},exports.round=_e,exports.tokenTypes=At,exports.tokenize=jt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZm10LmpzIiwic291cmNlcyI6WyIuLi9saWIvY29uc3RhbnRzLmpzIiwiLi4vbGliL2NvZGVUb0xvY2FsZS5qcyIsIi4uL2xpYi9sb2NhbGUuanMiLCIuLi9saWIvb3B0aW9ucy5qcyIsIi4uL2xpYi9yb3VuZC5qcyIsIi4uL2xpYi9kZWMyZnJhYy5qcyIsIi4uL2xpYi90b1lNRC5qcyIsIi4uL2xpYi9zZXJpYWxEYXRlLmpzIiwiLi4vbGliL3BhcnNlVmFsdWUuanMiLCIuLi9saWIvcGFyc2VGb3JtYXRTZWN0aW9uLmpzIiwiLi4vbGliL251bWRlYy5qcyIsIi4uL2xpYi9nZW5lcmFsLmpzIiwiLi4vbGliL3BhZC5qcyIsIi4uL2xpYi9ydW5QYXJ0LmpzIiwiLi4vbGliL2NsYW1wLmpzIiwiLi4vbGliL2Zvcm1hdE51bWJlci5qcyIsIi4uL2xpYi9mb3JtYXRJbmZvLmpzIiwiLi4vbGliL3Rva2VuaXplLmpzIiwiLi4vbGliL3BhcnNlUGF0dGVybi5qcyIsIi4uL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBhcnJheS1lbGVtZW50LW5ld2xpbmUgKi9cbmV4cG9ydCBjb25zdCB1X1lFQVIgPSAyO1xuZXhwb3J0IGNvbnN0IHVfTU9OVEggPSAyICoqIDI7XG5leHBvcnQgY29uc3QgdV9EQVkgPSAyICoqIDM7XG5leHBvcnQgY29uc3QgdV9IT1VSID0gMiAqKiA0O1xuZXhwb3J0IGNvbnN0IHVfTUlOID0gMiAqKiA1O1xuZXhwb3J0IGNvbnN0IHVfU0VDID0gMiAqKiA2O1xuZXhwb3J0IGNvbnN0IHVfRFNFQyA9IDIgKiogNzsgLy8gZGVjaXNlY29uZFxuZXhwb3J0IGNvbnN0IHVfQ1NFQyA9IDIgKiogODsgLy8gY2VudGlzZWNvbmRcbmV4cG9ydCBjb25zdCB1X01TRUMgPSAyICoqIDk7IC8vIG1pbGxpc2Vjb25kXG5cbi8vIEV4Y2VsIGRhdGUgYm91bmRhcmllc1xuZXhwb3J0IGNvbnN0IE1JTl9TX0RBVEUgPSAwO1xuZXhwb3J0IGNvbnN0IE1BWF9TX0RBVEUgPSAyOTU4NDY2O1xuLy8gR29vZ2xlIGRhdGUgYm91bmRhcmllc1xuZXhwb3J0IGNvbnN0IE1JTl9MX0RBVEUgPSAtNjk0MzI0O1xuZXhwb3J0IGNvbnN0IE1BWF9MX0RBVEUgPSAzNTgzMDI5MTtcblxuLy8gaWYgbW9yZSBjYWxlbmRhcnMgYXJlIGFkZGVkLCB0aGV5IHNob3VsZCBjb25mb3JtIHRvIE1TIENBTElEIGlkZW50aWZpZXJzXG4vLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzL3dpbjMyL2ludGwvY2FsZW5kYXItaWRlbnRpZmllcnNcbmV4cG9ydCBjb25zdCBFUE9DSF8xOTA0ID0gLTE7XG5leHBvcnQgY29uc3QgRVBPQ0hfMTkwMCA9IDE7XG5leHBvcnQgY29uc3QgRVBPQ0hfMTMxNyA9IDY7XG5cbmV4cG9ydCBjb25zdCBUT0tFTl9HRU5FUkFMID0gJ2dlbmVyYWwnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0hBU0ggPSAnaGFzaCc7XG5leHBvcnQgY29uc3QgVE9LRU5fWkVSTyA9ICd6ZXJvJztcbmV4cG9ydCBjb25zdCBUT0tFTl9RTUFSSyA9ICdxbWFyayc7XG5leHBvcnQgY29uc3QgVE9LRU5fU0xBU0ggPSAnc2xhc2gnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0dST1VQID0gJ2dyb3VwJztcbmV4cG9ydCBjb25zdCBUT0tFTl9TQ0FMRSA9ICdzY2FsZSc7XG5leHBvcnQgY29uc3QgVE9LRU5fQ09NTUEgPSAnY29tbWEnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0JSRUFLID0gJ2JyZWFrJztcbmV4cG9ydCBjb25zdCBUT0tFTl9URVhUID0gJ3RleHQnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX1BMVVMgPSAncGx1cyc7XG5leHBvcnQgY29uc3QgVE9LRU5fTUlOVVMgPSAnbWludXMnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX1BPSU5UID0gJ3BvaW50JztcbmV4cG9ydCBjb25zdCBUT0tFTl9TUEFDRSA9ICdzcGFjZSc7XG5leHBvcnQgY29uc3QgVE9LRU5fUEVSQ0VOVCA9ICdwZXJjZW50JztcbmV4cG9ydCBjb25zdCBUT0tFTl9ESUdJVCA9ICdkaWdpdCc7XG5leHBvcnQgY29uc3QgVE9LRU5fQ0FMRU5EQVIgPSAnY2FsZW5kYXInO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0VSUk9SID0gJ2Vycm9yJztcbmV4cG9ydCBjb25zdCBUT0tFTl9EQVRFVElNRSA9ICdkYXRldGltZSc7XG5leHBvcnQgY29uc3QgVE9LRU5fRFVSQVRJT04gPSAnZHVyYXRpb24nO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0NPTkRJVElPTiA9ICdjb25kaXRpb24nO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0RCTlVNID0gJ2RibnVtJztcbmV4cG9ydCBjb25zdCBUT0tFTl9OQVROVU0gPSAnbmF0bnVtJztcbmV4cG9ydCBjb25zdCBUT0tFTl9MT0NBTEUgPSAnbG9jYWxlJztcbmV4cG9ydCBjb25zdCBUT0tFTl9DT0xPUiA9ICdjb2xvcic7XG5leHBvcnQgY29uc3QgVE9LRU5fTU9ESUZJRVIgPSAnbW9kaWZpZXInO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0FNUE0gPSAnYW1wbSc7XG5leHBvcnQgY29uc3QgVE9LRU5fRVNDQVBFRCA9ICdlc2NhcGVkJztcbmV4cG9ydCBjb25zdCBUT0tFTl9TVFJJTkcgPSAnc3RyaW5nJztcbmV4cG9ydCBjb25zdCBUT0tFTl9TS0lQID0gJ3NraXAnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0VYUCA9ICdleHAnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0ZJTEwgPSAnZmlsbCc7XG5leHBvcnQgY29uc3QgVE9LRU5fUEFSRU4gPSAncGFyZW4nO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0NIQVIgPSAnY2hhcic7XG5cbmV4cG9ydCBjb25zdCBpbmRleENvbG9ycyA9IFtcbiAgJyMwMDAnLCAnI0ZGRicsICcjRjAwJywgJyMwRjAnLCAnIzAwRicsICcjRkYwJywgJyNGMEYnLCAnIzBGRicsICcjMDAwJywgJyNGRkYnLFxuICAnI0YwMCcsICcjMEYwJywgJyMwMEYnLCAnI0ZGMCcsICcjRjBGJywgJyMwRkYnLCAnIzgwMCcsICcjMDgwJywgJyMwMDgnLCAnIzg4MCcsXG4gICcjODA4JywgJyMwODgnLCAnI0NDQycsICcjODg4JywgJyM5OUYnLCAnIzkzNicsICcjRkZDJywgJyNDRkYnLCAnIzYwNicsICcjRjg4JyxcbiAgJyMwNkMnLCAnI0NDRicsICcjMDA4JywgJyNGMEYnLCAnI0ZGMCcsICcjMEZGJywgJyM4MDgnLCAnIzgwMCcsICcjMDg4JywgJyMwMEYnLFxuICAnIzBDRicsICcjQ0ZGJywgJyNDRkMnLCAnI0ZGOScsICcjOUNGJywgJyNGOUMnLCAnI0M5RicsICcjRkM5JywgJyMzNkYnLCAnIzNDQycsXG4gICcjOUMwJywgJyNGQzAnXG5dO1xuXG5leHBvcnQgY29uc3QgY3VycmVuY3lTeW1ib2xzID0gW1xuICAnwqQnLCAnJCcsICfCoycsICfCpScsICfWjycsICfYiycsICfgp7MnLCAn4Li/JywgJ+GfmycsXG4gICfigqEnLCAn4oKmJywgJ+KCqScsICfigqonLCAn4oKrJywgJ+KCrCcsICfigq0nLCAn4oKuJywgJ+KCsScsXG4gICfigrInLCAn4oK0JywgJ+KCuCcsICfigrknLCAn4oK6JywgJ+KCvCcsICfigr0nLCAn4oK+JywgJ+KCvydcbl07XG5cbmV4cG9ydCBjb25zdCByZUN1cnJlbmN5U3ltYm9scyA9IG5ldyBSZWdFeHAoJ1snICsgY3VycmVuY3lTeW1ib2xzLmpvaW4oJycpICsgJ10nKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGluZGVudCwgbm8tbXVsdGktc3BhY2VzICovXG4vLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9vZmZpY2UvdmJhL2FwaS9vZmZpY2UubXNvbGFuZ3VhZ2VpZFxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZSh7XG4gICAxMDc4OiAnYWYnLCAgICAvLyBBZnJpa2FhbnNcbiAgIDEwNTI6ICdzcScsICAgIC8vIEFsYmFuaWFuXG4gICAxMTE4OiAnYW0nLCAgICAvLyBBbWhhcmljXG4gICA1MTIxOiAnYXJfRFonLCAvLyBBcmFiaWMgLSBBbGdlcmlhXG4gIDE1MzYxOiAnYXJfQkgnLCAvLyBBcmFiaWMgLSBCYWhyYWluXG4gICAzMDczOiAnYXJfRUcnLCAvLyBBcmFiaWMgLSBFZ3lwdFxuICAgMjA0OTogJ2FyX0lRJywgLy8gQXJhYmljIC0gSXJhcVxuICAxMTI2NTogJ2FyX0pPJywgLy8gQXJhYmljIC0gSm9yZGFuXG4gIDEzMzEzOiAnYXJfS1cnLCAvLyBBcmFiaWMgLSBLdXdhaXRcbiAgMTIyODk6ICdhcl9MQicsIC8vIEFyYWJpYyAtIExlYmFub25cbiAgIDQwOTc6ICdhcl9MWScsIC8vIEFyYWJpYyAtIExpYnlhXG4gICA2MTQ1OiAnYXJfTUEnLCAvLyBBcmFiaWMgLSBNb3JvY2NvXG4gICA4MTkzOiAnYXJfT00nLCAvLyBBcmFiaWMgLSBPbWFuXG4gIDE2Mzg1OiAnYXJfUUEnLCAvLyBBcmFiaWMgLSBRYXRhclxuICAgMTAyNTogJ2FyX1NBJywgLy8gQXJhYmljIC0gU2F1ZGkgQXJhYmlhXG4gIDEwMjQxOiAnYXJfU1knLCAvLyBBcmFiaWMgLSBTeXJpYVxuICAgNzE2OTogJ2FyX1ROJywgLy8gQXJhYmljIC0gVHVuaXNpYVxuICAxNDMzNzogJ2FyX0FFJywgLy8gQXJhYmljIC0gVW5pdGVkIEFyYWIgRW1pcmF0ZXNcbiAgIDkyMTc6ICdhcl9ZRScsIC8vIEFyYWJpYyAtIFllbWVuXG4gICAxMDY3OiAnaHknLCAgICAvLyBBcm1lbmlhblxuICAgMTEwMTogJ2FzJywgICAgLy8gQXNzYW1lc2VcbiAgIDIwOTI6ICdhel9BWicsIC8vIEF6ZXJpIC0gQ3lyaWxsaWNcbiAgIDEwNjg6ICdhel9BWicsIC8vIEF6ZXJpIC0gTGF0aW5cbiAgIDEwNjk6ICdldScsICAgIC8vIEJhc3F1ZVxuICAgMTA1OTogJ2JlJywgICAgLy8gQmVsYXJ1c2lhblxuICAgMjExNzogJ2JuJywgICAgLy8gQmVuZ2FsaSAtIEJhbmdsYWRlc2hcbiAgIDEwOTM6ICdibl9JTicsIC8vIEJlbmdhbGkgLSBJbmRpYVxuICAgNTE0NjogJ2JzJywgICAgLy8gQm9zbmlhblxuICAgMTAyNjogJ2JnJywgICAgLy8gQnVsZ2FyaWFuXG4gICAxMTA5OiAnbXknLCAgICAvLyBCdXJtZXNlXG4gICAxMDI3OiAnY2EnLCAgICAvLyBDYXRhbGFuXG4gICAyMDUyOiAnemhfQ04nLCAvLyBDaGluZXNlIC0gQ2hpbmFcbiAgIDMwNzY6ICd6aF9ISycsIC8vIENoaW5lc2UgLSBIb25nIEtvbmcgU0FSXG4gICA1MTI0OiAnemhfTU8nLCAvLyBDaGluZXNlIC0gTWFjYXUgU0FSXG4gICA0MTAwOiAnemhfU0cnLCAvLyBDaGluZXNlIC0gU2luZ2Fwb3JlXG4gICAxMDI4OiAnemhfVFcnLCAvLyBDaGluZXNlIC0gVGFpd2FuXG4gICAxMDUwOiAnaHInLCAgICAvLyBDcm9hdGlhblxuICAgMTAyOTogJ2NzJywgICAgLy8gQ3plY2hcbiAgIDEwMzA6ICdkYScsICAgIC8vIERhbmlzaFxuICAgMTEyNTogJ2R2JywgICAgLy8gRGl2ZWhpOyBEaGl2ZWhpOyBNYWxkaXZpYW5cbiAgIDIwNjc6ICdubF9CRScsIC8vIER1dGNoIC0gQmVsZ2l1bVxuICAgMTA0MzogJ25sX05MJywgLy8gRHV0Y2ggLSBOZXRoZXJsYW5kc1xuICAgMTEyNjogJ2JpbicsICAgLy8gRWRvXG4gICAzMDgxOiAnZW5fQVUnLCAvLyBFbmdsaXNoIC0gQXVzdHJhbGlhXG4gIDEwMjQ5OiAnZW5fQlonLCAvLyBFbmdsaXNoIC0gQmVsaXplXG4gICA0MTA1OiAnZW5fQ0EnLCAvLyBFbmdsaXNoIC0gQ2FuYWRhXG4gICA5MjI1OiAnZW5fQ0InLCAvLyBFbmdsaXNoIC0gQ2FyaWJiZWFuXG4gICAyMDU3OiAnZW5fR0InLCAvLyBFbmdsaXNoIC0gR3JlYXQgQnJpdGFpblxuICAxNjM5MzogJ2VuX0lOJywgLy8gRW5nbGlzaCAtIEluZGlhXG4gICA2MTUzOiAnZW5fSUUnLCAvLyBFbmdsaXNoIC0gSXJlbGFuZFxuICAgODIwMTogJ2VuX0pNJywgLy8gRW5nbGlzaCAtIEphbWFpY2FcbiAgIDUxMjk6ICdlbl9OWicsIC8vIEVuZ2xpc2ggLSBOZXcgWmVhbGFuZFxuICAxMzMyMTogJ2VuX1BIJywgLy8gRW5nbGlzaCAtIFBoaWxsaXBwaW5lc1xuICAgNzE3NzogJ2VuX1pBJywgLy8gRW5nbGlzaCAtIFNvdXRoZXJuIEFmcmljYVxuICAxMTI3MzogJ2VuX1RUJywgLy8gRW5nbGlzaCAtIFRyaW5pZGFkXG4gICAxMDMzOiAnZW5fVVMnLCAvLyBFbmdsaXNoIC0gVW5pdGVkIFN0YXRlc1xuICAxMjI5NzogJ2VuX1pXJywgLy8gRW5nbGlzaCAtIFppbWJhYndlXG4gICAxMDYxOiAnZXQnLCAgICAvLyBFc3RvbmlhblxuICAgMTA3MTogJ21rJywgICAgLy8gRllSTyBNYWNlZG9uaWFcbiAgIDEwODA6ICdmbycsICAgIC8vIEZhcm9lc2VcbiAgIDEwNjU6ICdmYScsICAgIC8vIEZhcnNpIC0gUGVyc2lhblxuICAgMTEyNDogJ2ZpbCcsICAgLy8gRmlsaXBpbm9cbiAgIDEwMzU6ICdmaScsICAgIC8vIEZpbm5pc2hcbiAgIDIwNjA6ICdmcl9CRScsIC8vIEZyZW5jaCAtIEJlbGdpdW1cbiAgMTEyNzY6ICdmcl9DTScsIC8vIEZyZW5jaCAtIENhbWVyb29uXG4gICAzMDg0OiAnZnJfQ0EnLCAvLyBGcmVuY2ggLSBDYW5hZGFcbiAgIDkyMjg6ICdmcl9DRycsIC8vIEZyZW5jaCAtIENvbmdvXG4gIDEyMzAwOiAnZnJfQ0knLCAvLyBGcmVuY2ggLSBDb3RlIGQnSXZvaXJlXG4gICAxMDM2OiAnZnJfRlInLCAvLyBGcmVuY2ggLSBGcmFuY2VcbiAgIDUxMzI6ICdmcl9MVScsIC8vIEZyZW5jaCAtIEx1eGVtYm91cmdcbiAgMTMzMjQ6ICdmcl9NTCcsIC8vIEZyZW5jaCAtIE1hbGlcbiAgIDYxNTY6ICdmcl9NQycsIC8vIEZyZW5jaCAtIE1vbmFjb1xuICAxNDM0ODogJ2ZyX01BJywgLy8gRnJlbmNoIC0gTW9yb2Njb1xuICAxMDI1MjogJ2ZyX1NOJywgLy8gRnJlbmNoIC0gU2VuZWdhbFxuICAgNDEwODogJ2ZyX0NIJywgLy8gRnJlbmNoIC0gU3dpdHplcmxhbmRcbiAgIDcxODA6ICdmcicsICAgIC8vIEZyZW5jaCAtIFdlc3QgSW5kaWVzXG4gICAxMTIyOiAnZnlfTkwnLCAvLyBGcmlzaWFuIC0gTmV0aGVybGFuZHNcbiAgIDIxMDg6ICdnZF9JRScsIC8vIEdhZWxpYyAtIElyZWxhbmRcbiAgIDEwODQ6ICdnZCcsICAgIC8vIEdhZWxpYyAtIFNjb3RsYW5kXG4gICAxMTEwOiAnZ2wnLCAgICAvLyBHYWxpY2lhblxuICAgMTA3OTogJ2thJywgICAgLy8gR2VvcmdpYW5cbiAgIDMwNzk6ICdkZV9BVCcsIC8vIEdlcm1hbiAtIEF1c3RyaWFcbiAgIDEwMzE6ICdkZV9ERScsIC8vIEdlcm1hbiAtIEdlcm1hbnlcbiAgIDUxMjc6ICdkZV9MSScsIC8vIEdlcm1hbiAtIExpZWNodGVuc3RlaW5cbiAgIDQxMDM6ICdkZV9MVScsIC8vIEdlcm1hbiAtIEx1eGVtYm91cmdcbiAgIDIwNTU6ICdkZV9DSCcsIC8vIEdlcm1hbiAtIFN3aXR6ZXJsYW5kXG4gICAxMDMyOiAnZWwnLCAgICAvLyBHcmVla1xuICAgMTE0MDogJ2duJywgICAgLy8gR3VhcmFuaSAtIFBhcmFndWF5XG4gICAxMDk1OiAnZ3UnLCAgICAvLyBHdWphcmF0aVxuICAgMTI3OTogJ2VuJywgICAgLy8gSElEIChIdW1hbiBJbnRlcmZhY2UgRGV2aWNlKVxuICAgMTAzNzogJ2hlJywgICAgLy8gSGVicmV3XG4gICAxMDgxOiAnaGknLCAgICAvLyBIaW5kaVxuICAgMTAzODogJ2h1JywgICAgLy8gSHVuZ2FyaWFuXG4gICAxMDM5OiAnaXMnLCAgICAvLyBJY2VsYW5kaWNcbiAgIDExMzY6ICdpZ19ORycsIC8vIElnYm8gLSBOaWdlcmlhXG4gICAxMDU3OiAnaWQnLCAgICAvLyBJbmRvbmVzaWFuXG4gICAxMDQwOiAnaXRfSVQnLCAvLyBJdGFsaWFuIC0gSXRhbHlcbiAgIDIwNjQ6ICdpdF9DSCcsIC8vIEl0YWxpYW4gLSBTd2l0emVybGFuZFxuICAgMTA0MTogJ2phJywgICAgLy8gSmFwYW5lc2VcbiAgIDEwOTk6ICdrbicsICAgIC8vIEthbm5hZGFcbiAgIDExMjA6ICdrcycsICAgIC8vIEthc2htaXJpXG4gICAxMDg3OiAna2snLCAgICAvLyBLYXpha2hcbiAgIDExMDc6ICdrbScsICAgIC8vIEtobWVyXG4gICAxMTExOiAna29rJywgICAvLyBLb25rYW5pXG4gICAxMDQyOiAna28nLCAgICAvLyBLb3JlYW5cbiAgIDEwODg6ICdreScsICAgIC8vIEt5cmd5eiAtIEN5cmlsbGljXG4gICAxMTA4OiAnbG8nLCAgICAvLyBMYW9cbiAgIDExNDI6ICdsYScsICAgIC8vIExhdGluXG4gICAxMDYyOiAnbHYnLCAgICAvLyBMYXR2aWFuXG4gICAxMDYzOiAnbHQnLCAgICAvLyBMaXRodWFuaWFuXG4gICAyMTEwOiAnbXNfQk4nLCAvLyBNYWxheSAtIEJydW5laVxuICAgMTA4NjogJ21zX01ZJywgLy8gTWFsYXkgLSBNYWxheXNpYVxuICAgMTEwMDogJ21sJywgICAgLy8gTWFsYXlhbGFtXG4gICAxMDgyOiAnbXQnLCAgICAvLyBNYWx0ZXNlXG4gICAxMTEyOiAnbW5pJywgICAvLyBNYW5pcHVyaVxuICAgMTE1MzogJ21pJywgICAgLy8gTWFvcmlcbiAgIDExMDI6ICdtcicsICAgIC8vIE1hcmF0aGlcbiAgIDExMDQ6ICdtbicsICAgIC8vIE1vbmdvbGlhblxuICAgMjEyODogJ21uJywgICAgLy8gTW9uZ29saWFuXG4gICAxMTIxOiAnbmUnLCAgICAvLyBOZXBhbGlcbiAgIDEwNDQ6ICdub19OTycsIC8vIE5vcndlZ2lhbiAtIEJva21sXG4gICAyMDY4OiAnbm9fTk8nLCAvLyBOb3J3ZWdpYW4gLSBOeW5vcnNrXG4gICAxMDk2OiAnb3InLCAgICAvLyBPcml5YVxuICAgMTA0NTogJ3BsJywgICAgLy8gUG9saXNoXG4gICAxMDQ2OiAncHRfQlInLCAvLyBQb3J0dWd1ZXNlIC0gQnJhemlsXG4gICAyMDcwOiAncHRfUFQnLCAvLyBQb3J0dWd1ZXNlIC0gUG9ydHVnYWxcbiAgIDEwOTQ6ICdwYScsICAgIC8vIFB1bmphYmlcbiAgIDEwNDc6ICdybScsICAgIC8vIFJhZXRvLVJvbWFuY2VcbiAgIDIwNzI6ICdyb19NTycsIC8vIFJvbWFuaWFuIC0gTW9sZG92YVxuICAgMTA0ODogJ3JvX1JPJywgLy8gUm9tYW5pYW4gLSBSb21hbmlhXG4gICAxMDQ5OiAncnUnLCAgICAvLyBSdXNzaWFuXG4gICAyMDczOiAncnVfTU8nLCAvLyBSdXNzaWFuIC0gTW9sZG92YVxuICAgMTA4MzogJ3NlJywgICAgLy8gU2FtaSBMYXBwaXNoXG4gICAxMTAzOiAnc2EnLCAgICAvLyBTYW5za3JpdFxuICAgMzA5ODogJ3NyX1NQJywgLy8gU2VyYmlhbiAtIEN5cmlsbGljXG4gICAyMDc0OiAnc3JfU1AnLCAvLyBTZXJiaWFuIC0gTGF0aW5cbiAgIDEwNzI6ICdzdCcsICAgIC8vIFNlc290aG8gKFN1dHUpXG4gICAxMDc0OiAndG4nLCAgICAvLyBTZXRzdWFuYVxuICAgMTExMzogJ3NkJywgICAgLy8gU2luZGhpXG4gICAxMTE1OiAnc2knLCAgICAvLyBTaW5oYWxhOyBTaW5oYWxlc2VcbiAgIDEwNTE6ICdzaycsICAgIC8vIFNsb3Zha1xuICAgMTA2MDogJ3NsJywgICAgLy8gU2xvdmVuaWFuXG4gICAxMTQzOiAnc28nLCAgICAvLyBTb21hbGlcbiAgIDEwNzA6ICdzYicsICAgIC8vIFNvcmJpYW5cbiAgMTEyNzQ6ICdlc19BUicsIC8vIFNwYW5pc2ggLSBBcmdlbnRpbmFcbiAgMTYzOTQ6ICdlc19CTycsIC8vIFNwYW5pc2ggLSBCb2xpdmlhXG4gIDEzMzIyOiAnZXNfQ0wnLCAvLyBTcGFuaXNoIC0gQ2hpbGVcbiAgIDkyMjY6ICdlc19DTycsIC8vIFNwYW5pc2ggLSBDb2xvbWJpYVxuICAgNTEzMDogJ2VzX0NSJywgLy8gU3BhbmlzaCAtIENvc3RhIFJpY2FcbiAgIDcxNzg6ICdlc19ETycsIC8vIFNwYW5pc2ggLSBEb21pbmljYW4gUmVwdWJsaWNcbiAgMTIyOTg6ICdlc19FQycsIC8vIFNwYW5pc2ggLSBFY3VhZG9yXG4gIDE3NDE4OiAnZXNfU1YnLCAvLyBTcGFuaXNoIC0gRWwgU2FsdmFkb3JcbiAgIDQxMDY6ICdlc19HVCcsIC8vIFNwYW5pc2ggLSBHdWF0ZW1hbGFcbiAgMTg0NDI6ICdlc19ITicsIC8vIFNwYW5pc2ggLSBIb25kdXJhc1xuICAgMjA1ODogJ2VzX01YJywgLy8gU3BhbmlzaCAtIE1leGljb1xuICAxOTQ2NjogJ2VzX05JJywgLy8gU3BhbmlzaCAtIE5pY2FyYWd1YVxuICAgNjE1NDogJ2VzX1BBJywgLy8gU3BhbmlzaCAtIFBhbmFtYVxuICAxNTM3MDogJ2VzX1BZJywgLy8gU3BhbmlzaCAtIFBhcmFndWF5XG4gIDEwMjUwOiAnZXNfUEUnLCAvLyBTcGFuaXNoIC0gUGVydVxuICAyMDQ5MDogJ2VzX1BSJywgLy8gU3BhbmlzaCAtIFB1ZXJ0byBSaWNvXG4gICAxMDM0OiAnZXNfRVMnLCAvLyBTcGFuaXNoIC0gU3BhaW4gKFRyYWRpdGlvbmFsKVxuICAxNDM0NjogJ2VzX1VZJywgLy8gU3BhbmlzaCAtIFVydWd1YXlcbiAgIDgyMDI6ICdlc19WRScsIC8vIFNwYW5pc2ggLSBWZW5lenVlbGFcbiAgIDEwODk6ICdzdycsICAgIC8vIFN3YWhpbGlcbiAgIDIwNzc6ICdzdl9GSScsIC8vIFN3ZWRpc2ggLSBGaW5sYW5kXG4gICAxMDUzOiAnc3ZfU0UnLCAvLyBTd2VkaXNoIC0gU3dlZGVuXG4gICAxMTE0OiAnc3ljJywgICAvLyBTeXJpYWNcbiAgIDEwNjQ6ICd0ZycsICAgIC8vIFRhamlrXG4gICAxMDk3OiAndGEnLCAgICAvLyBUYW1pbFxuICAgMTA5MjogJ3R0JywgICAgLy8gVGF0YXJcbiAgIDEwOTg6ICd0ZScsICAgIC8vIFRlbHVndVxuICAgMTA1NDogJ3RoJywgICAgLy8gVGhhaVxuICAgMTEwNTogJ2JvJywgICAgLy8gVGliZXRhblxuICAgMTA3MzogJ3RzJywgICAgLy8gVHNvbmdhXG4gICAxMDU1OiAndHInLCAgICAvLyBUdXJraXNoXG4gICAxMDkwOiAndGsnLCAgICAvLyBUdXJrbWVuXG4gICAxMDU4OiAndWsnLCAgICAvLyBVa3JhaW5pYW5cbiAgIDEwNTY6ICd1cicsICAgIC8vIFVyZHVcbiAgIDIxMTU6ICd1el9VWicsIC8vIFV6YmVrIC0gQ3lyaWxsaWNcbiAgIDEwOTE6ICd1el9VWicsIC8vIFV6YmVrIC0gTGF0aW5cbiAgIDEwNzU6ICd2ZScsICAgIC8vIFZlbmRhXG4gICAxMDY2OiAndmknLCAgICAvLyBWaWV0bmFtZXNlXG4gICAxMTA2OiAnY3knLCAgICAvLyBXZWxzaFxuICAgMTA3NjogJ3hoJywgICAgLy8gWGhvc2FcbiAgIDEwODU6ICd5aScsICAgIC8vIFlpZGRpc2hcbiAgIDEwNzc6ICd6dScgICAgIC8vIFp1bHVcbn0pO1xuIiwiaW1wb3J0IGNvZGVUb0xvY2FsZSBmcm9tICcuL2NvZGVUb0xvY2FsZS5qcyc7XG5cbi8vIExvY2FsZTogW2xhbmd1YWdlW190ZXJyaXRvcnldWy5jb2Rlc2V0XVtAbW9kaWZpZXJdXVxuY29uc3QgcmVfbG9jYWxlID0gL14oW2EtelxcZF0rKSg/OltfLV0oW2EtelxcZF0rKSk/KD86XFwuKFthLXpcXGRdKykpPyg/OkAoW2EtelxcZF0rKSk/JC9pO1xuY29uc3QgbG9jYWxlcyA9IHt9O1xuXG4vKipcbiAqIFNwbGl0IGEgc2VtaWNvbG9uIGRlbGltaXRlZCBzdHJpbmcgYW5kIHJlcGxhY2UgaW5zdGFuY2VzIG9mIGNoYXJhY3RlcnNcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU2VtaWNvbG9uIGRlbGltaXRlZCBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdGlsZGU9JyddIFN0cmluZyB0byBiZSBpbnNlcnRlZCBvbiBldmVyeSBpbnN0YW5jZSBvZiB+XG4gKiBAcmV0dXJucyB7c3RyaW5nW119IEFycmF5IG9mIHN0cmluZ3NcbiAqL1xuY29uc3QgXyA9IChzdHIsIHRpbGRlID0gJycpID0+IHN0ci5yZXBsYWNlKC9+L2csIHRpbGRlKS5zcGxpdCgnOycpO1xuXG4vKipcbiAqIEdlbmVyYXRlIG1tbSBhbmQgZGRkIHByb3BlcnRpZXMgYXMgbmVlZGVkIGZvciBsb2NhbGVzLiBNYW55IG9mIHRoZW1cbiAqIGFyZSBzdHJhaWdodGZvcndhcmQgYWJyZXZpYXRpb25zIG9mIG1tbW0gYW5kIGRkZGQgc28gd2UgY2FuIHNhdmUgc29tZVxuICogYnl0ZXMgYnkgYXV0by1nZW5lcmF0aW5nIHRoZW0uXG4gKlxuICogQm90aCBydWxlIHBhcmFtZXRlcnMgdXNlIHRoZSBzYW1lIHN5c3RlbS4gSWYgc2hvcnRmb3JtIHByb3AgaXMgbWlzc2luZzpcbiAqXG4gKiAtIDAgLSB1c2UgbG9uZyBmb3JtIGFycmF5IHVuY2hhbmdlZFxuICogLSAxLi4uOSAtIHNob3J0ZW4gdG8gTiBtYW55IGNoYXJhY3RlcnNcbiAqIC0gMTEuLi4xOSAtIHNob3J0ZW4gdG8gMS4uLjkgY2hhcmFjdGVycyBhbmQgYWRkIHBlcmlvZHNcbiAqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0ge29iamVjdH0gbyBMb2NhbGUgb2JqZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gW21sPTBdIE1vbnRoIGxpc3QgcnVsZVxuICogQHBhcmFtIHtudW1iZXJ9IFtkbD0wXSBEYXkgbGlzdCBydWxlXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgc2FtZSBpbnB1dCBvYmplY3QsIGJ1dCB3aXRoIGRkZCBhbmQgbW1tIGZpbGxlZCBpbi5cbiAqL1xuY29uc3QgeG0gPSAobywgbWwgPSAwLCBkbCA9IDApID0+IHtcbiAgaWYgKCFvLm1tbSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtdWx0aWxpbmUtdGVybmFyeVxuICAgIG8ubW1tID0gbWwgPCAxID8gby5tbW1tLmNvbmNhdCgpIDogby5tbW1tLm1hcChkID0+IHtcbiAgICAgIGNvbnN0IHMgPSBkLnNsaWNlKDAsIG1sICUgMTApO1xuICAgICAgcmV0dXJuIHMgKyAobWwgPCAxMCB8fCBkID09PSBzID8gJycgOiAnLicpO1xuICAgIH0pO1xuICB9XG4gIGlmICghby5kZGQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbXVsdGlsaW5lLXRlcm5hcnlcbiAgICBvLmRkZCA9IGRsIDwgMSA/IG8uZGRkZC5jb25jYXQoKSA6IG8uZGRkZC5tYXAoZCA9PiB7XG4gICAgICBjb25zdCBzID0gZC5zbGljZSgwLCBkbCAlIDEwKTtcbiAgICAgIHJldHVybiBzICsgKGRsIDwgMTAgfHwgZCA9PT0gcyA/ICcnIDogJy4nKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoIW8ubW1tNiAmJiBvLm1tbW02KSB7XG4gICAgby5tbW02ID0gby5tbW1tNjtcbiAgfVxuICByZXR1cm4gbztcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTG9jYWxlRGF0YVxuICogICBBbiBvYmplY3Qgb2YgcHJvcGVydGllcyB1c2VkIGJ5IGEgZm9ybWF0dGVyIHdoZW4gcHJpbnRpbmcgYSBudW1iZXIgaW4gYSBjZXJ0YWluIGxvY2FsZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBncm91cCAtIFN5bWJvbCB1c2VkIGFzIGEgZ3JvdXBpbmcgc2VwYXJhdG9yIChgMSwwMDAsMDAwYCB1c2VzIGAsYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkZWNpbWFsIC0gU3ltYm9sIHVzZWQgdG8gc2VwYXJhdGUgaW50ZWdlcnMgZnJvbSBmcmFjdGlvbnMgKHVzdWFsbHkgYC5gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBvc2l0aXZlIC0gU3ltYm9sIHVzZWQgdG8gaW5kaWNhdGUgcG9zaXRpdmUgbnVtYmVycyAodXN1YWxseSBgK2ApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmVnYXRpdmUgLSBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBwb3NpdGl2ZSBudW1iZXJzICh1c3VhbGx5IGAtYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwZXJjZW50IC0gU3ltYm9sIHVzZWQgdG8gaW5kaWNhdGUgYSBwZXJjZW50YWdlICh1c3VhbGx5IGAlYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBleHBvbmVudCAtIFN5bWJvbCB1c2VkIHRvIGluZGljYXRlIGFuIGV4cG9uZW50ICh1c3VhbGx5IGBFYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW4gLSBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBOYU4gdmFsdWVzIChgTmFOYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbmZpbml0eSAtIFN5bWJvbCB1c2VkIHRvIGluZGljYXRlIGluZmluaXRlIHZhbHVlcyAoYOKInmApXG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz59IGFtcG0gLSBIb3cgQU0gYW5kIFBNIHNob3VsZCBiZSBwcmVzZW50ZWRcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gbW1tbTYgLSBMb25nIG1vbnRoIG5hbWVzIGZvciB0aGUgSXNsYW1pYyBjYWxlbmRhciAoYFJhamFiYClcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gbW1tNiAtIFNob3J0IG1vbnRoIG5hbWVzIGZvciB0aGUgSXNsYW1pYyBjYWxlbmRhciAoYFJhai5gKVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBtbW1tIC0gTG9uZyBtb250aCBuYW1lcyBmb3IgdGhlIEdyZWdvcmlhbiBjYWxlbmRhciAoYE5vdmVtYmVyYClcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gbW1tIC0gU2hvcnQgbW9udGggbmFtZXMgZm9yIHRoZSBHcmVnb3JpYW4gY2FsZW5kYXIgKGBOb3ZgKVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBkZGRkIC0gTG9uZyBkYXkgbmFtZXMgKGBXZWRuZXNkYXlgKVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBkZGQgLSBTaG9ydGVuZWQgZGF5IG5hbWVzIChgV2VkYClcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gYm9vbCAtIEhvdyBUUlVFIGFuZCBGQUxTRSBzaG91bGQgYmUgcHJlc2VudGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHByZWZlck1EWSAtIElzIHRoZSBwcmVmZXJlZCBkYXRlIGZvcm1hdCBtb250aCBmaXJzdCAoMTIvMzEvMjAyNSkgb3IgZGF5IGZpcnN0ICgzMS8xMi8yMDI1KVxuICovXG5cbi8qKlxuICogQGlnbm9yZVxuICogQHR5cGUge0xvY2FsZURhdGF9XG4gKi9cbmNvbnN0IGJhc2VMb2NhbGVEYXRhID0ge1xuICBncm91cDogJ1xcdTAwQTAnLFxuICBkZWNpbWFsOiAnLicsXG4gIHBvc2l0aXZlOiAnKycsXG4gIG5lZ2F0aXZlOiAnLScsXG4gIHBlcmNlbnQ6ICclJyxcbiAgZXhwb25lbnQ6ICdFJyxcbiAgbmFuOiAnTmFOJyxcbiAgaW5maW5pdHk6ICfiiJ4nLFxuICBhbXBtOiBfKCdBTTtQTScpLFxuICBtbW1tNjogXygnTXVoYXJyYW07U2FmYXI7UmFiacq7IEk7UmFiacq7IElJO0p1bWFkYSBJO0p1bWFkYSBJSTtSYWphYjtTaGHKu2JhbjtSYW1hZGFuO1NoYXd3YWw7RGh1yrtsLVFpyrtkYWg7RGh1yrtsLUhpamphaCcpLFxuICBtbW02OiBfKCdNdWguO1NhZi47UmFiLiBJO1JhYi4gSUk7SnVtLiBJO0p1bS4gSUk7UmFqLjtTaGEuO1JhbS47U2hhdy47RGh1yrtsLVEuO0Rodcq7bC1ILicpLFxuICBtbW1tOiBfKCdKYW51YXJ5O0ZlYnJ1YXJ5O01hcmNoO0FwcmlsO01heTtKdW5lO0p1bHk7QXVndXN0O1NlcHRlbWJlcjtPY3RvYmVyO05vdmVtYmVyO0RlY2VtYmVyJyksXG4gIG1tbTogXygnSmFuO0ZlYjtNYXI7QXByO01heTtKdW47SnVsO0F1ZztTZXA7T2N0O05vdjtEZWMnKSxcbiAgZGRkZDogXygnU3VuZGF5O01vbmRheTtUdWVzZGF5O1dlZG5lc2RheTtUaHVyc2RheTtGcmlkYXk7U2F0dXJkYXknKSxcbiAgZGRkOiBfKCdTdW47TW9uO1R1ZTtXZWQ7VGh1O0ZyaTtTYXQnKSxcbiAgYm9vbDogXygnVFJVRTtGQUxTRScpLFxuICBwcmVmZXJNRFk6IGZhbHNlXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IExvY2FsZVRva2VuIC0gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXMgZm9yIGEgbG9jYWxlIHRhZy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsYW5nIC0gVGhlIGJhc2ljIHRhZyBzdWNoIGFzIGB6aF9DTmAgb3IgYGZpYFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGxhbmd1YWdlIC0gVGhlIGxhbmd1YWdlIHNlY3Rpb24gKGB6aGAgZm9yIGB6aF9DTmApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGVycml0b3J5IC0gVGhlIHRlcnJpdG9yeSBzZWN0aW9uIChgQ05gIGZvciBgemhfQ05gKVxuICovXG5cbi8qKlxuICogUGFyc2UgYSByZWd1bGFyIElFVEYgQkNQIDQ3IGxvY2FsZSB0YWcgYW5kIGVtaXQgYW4gb2JqZWN0IG9mIGl0cyBwYXJ0cy5cbiAqIElycmVndWxhciB0YWdzIGFuZCBzdWJ0YWdzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBBIEJDUCA0NyBzdHJpbmcgdGFnIG9mIHRoZSBsb2NhbGUuXG4gKiBAcmV0dXJucyB7TG9jYWxlVG9rZW59IC0gQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGxvY2FsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTG9jYWxlIChsb2NhbGUpIHtcbiAgY29uc3QgbG0gPSByZV9sb2NhbGUuZXhlYyhsb2NhbGUpO1xuICBpZiAoIWxtKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBNYWxmb3JtZWQgbG9jYWxlOiAke2xvY2FsZX1gKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxhbmc6IGxtWzFdICsgKGxtWzJdID8gJ18nICsgbG1bMl0gOiAnJyksXG4gICAgbGFuZ3VhZ2U6IGxtWzFdLFxuICAgIHRlcnJpdG9yeTogbG1bMl0gfHwgJydcbiAgfTtcbn1cblxuLy8gTVMgY29kZSBmb3JtYXQgaXM6IGFhYmJjY2NjIFskLWFhYmJjY2NjXVxuLy8gYWEgPSBudW1lcmljYWwgc3R5bGUgKG9wdGlvbmFsLCAwMCBpZiBhYnNlbnQpXG4vLyBiYiA9IGNhbGVuZGFyIGZvcm1hdCAob3B0aW9uYWwsIDAwIGlmIGFic2VudClcbi8vIGNjID0gbGFuZ3VhZ2UgY29kZVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVMb2NhbGUgKGw0ZSkge1xuICBpZiAodHlwZW9mIGw0ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gY29kZVRvTG9jYWxlW2w0ZSAmIDB4ZmZmZl0gfHwgbnVsbDtcbiAgfVxuICBjb25zdCB3aW5jb2RlID0gcGFyc2VJbnQobDRlLCAxNik7XG4gIGlmIChpc0Zpbml0ZSh3aW5jb2RlKSAmJiBjb2RlVG9Mb2NhbGVbd2luY29kZSAmIDB4ZmZmZl0pIHtcbiAgICByZXR1cm4gY29kZVRvTG9jYWxlW3dpbmNvZGUgJiAweGZmZmZdIHx8IG51bGw7XG4gIH1cbiAgaWYgKHJlX2xvY2FsZS50ZXN0KGw0ZSkpIHtcbiAgICByZXR1cm4gbDRlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFVzZWQgYnkgdGhlIGZvcm1hdHRlciB0byBwdWxsIGEgbG9jYXRlIGZyb20gaXRzIHJlZ2lzdGVyZWQgbG9jYWxlcy4gSWZcbiAqIHN1YnRhZyBpc24ndCBhdmFpbGFibGUgYnV0IHRoZSBiYXNlIGxhbmd1YWdlIGlzLCB0aGUgYmFzZSBsYW5ndWFnZSBpcyB1c2VkLlxuICogU28gaWYgYGVuLUNBYCBpcyBub3QgZm91bmQsIHRoZSBmb3JtYXR0ZXIgdHJpZXMgdG8gZmluZCBgZW5gIGVsc2UgaXRcbiAqIHJldHVybnMgYSBgbnVsbGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSAtIEEgQkNQIDQ3IHN0cmluZyB0YWcgb2YgdGhlIGxvY2FsZSwgb3IgYW4gRXhjZWwgbG9jYWxlIGNvZGUuXG4gKiBAcmV0dXJucyB7TG9jYWxlRGF0YSB8IG51bGx9IC0gQW4gb2JqZWN0IG9mIGZvcm1hdCBkYXRlIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUgKGxvY2FsZSkge1xuICBjb25zdCB0YWcgPSByZXNvbHZlTG9jYWxlKGxvY2FsZSk7XG4gIGxldCBvYmogPSBudWxsO1xuICBpZiAodGFnKSB7XG4gICAgY29uc3QgYyA9IHBhcnNlTG9jYWxlKHRhZyk7XG4gICAgb2JqID0gbG9jYWxlc1tjLmxhbmddIHx8IGxvY2FsZXNbYy5sYW5ndWFnZV0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyBjcmVhdGVzIGEgbmV3IGxvY2FsZSBvcHRpb25zIG9iamVjdFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvY2FsZSAoZGF0YSkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYmFzZUxvY2FsZURhdGEsIGRhdGEpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVyIGxvY2FsZSBkYXRhIGZvciBhIGxhbmd1YWdlIHNvIGZvciB1c2Ugd2hlbiBmb3JtYXR0aW5nLlxuICpcbiAqIEFueSBwYXJ0aWFsIHNldCBvZiBwcm9wZXJ0aWVzIG1heSBiZSByZXR1cm5lZCB0byBoYXZlIHRoZSBkZWZhdWx0cyB1c2VkIHdoZXJlIHByb3BlcnRpZXMgYXJlIG1pc3NpbmcuXG4gKlxuICogQHNlZSB7TG9jYWxlRGF0YX1cbiAqIEBwYXJhbSB7b2JqZWN0fSBsb2NhbGVTZXR0aW5ncyAtIEEgY29sbGVjdGlvbiBvZiBzZXR0aW5ncyBmb3IgYSBsb2NhbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZVNldHRpbmdzLmdyb3VwPVwiXFx1MDBhMFwiXVxuICogICAgU3ltYm9sIHVzZWQgYXMgYSBncm91cGluZyBzZXBhcmF0b3IgKGAxLDAwMCwwMDBgIHVzZXMgYCxgKVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVTZXR0aW5ncy5kZWNpbWFsPVwiLlwiXVxuICogICAgU3ltYm9sIHVzZWQgdG8gc2VwYXJhdGUgaW50ZWdlcnMgZnJvbSBmcmFjdGlvbnMgKHVzdWFsbHkgYC5gKVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVTZXR0aW5ncy5wb3NpdGl2ZT1cIitcIl1cbiAqICAgIFN5bWJvbCB1c2VkIHRvIGluZGljYXRlIHBvc2l0aXZlIG51bWJlcnMgKHVzdWFsbHkgYCtgKVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVTZXR0aW5ncy5uZWdhdGl2ZT1cIi1cIl1cbiAqICAgIFN5bWJvbCB1c2VkIHRvIGluZGljYXRlIHBvc2l0aXZlIG51bWJlcnMgKHVzdWFsbHkgYC1gKVxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVTZXR0aW5ncy5wZXJjZW50PVwiJVwiXVxuICogICAgU3ltYm9sIHVzZWQgdG8gaW5kaWNhdGUgYSBwZXJjZW50YWdlICh1c3VhbGx5IGAlYClcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbG9jYWxlU2V0dGluZ3MuZXhwb25lbnQ9XCJFXCJdXG4gKiAgICBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBhbiBleHBvbmVudCAodXN1YWxseSBgRWApXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZVNldHRpbmdzLm5hbj1cIk5hTlwiXVxuICogICAgU3ltYm9sIHVzZWQgdG8gaW5kaWNhdGUgTmFOIHZhbHVlcyAoYE5hTmApXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZVNldHRpbmdzLmluZmluaXR5PVwi4oieXCJdXG4gKiAgICBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBpbmZpbml0ZSB2YWx1ZXMgKGDiiJ5gKVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBbbG9jYWxlU2V0dGluZ3MuYW1wbT1bXCJBTVwiLFwiUE1cIl1dXG4gKiAgICBIb3cgQU0gYW5kIFBNIHNob3VsZCBiZSBwcmVzZW50ZWQuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtsb2NhbGVTZXR0aW5ncy5tbW1tNj1bXCJNdWhhcnJhbVwiLCBcIlNhZmFyXCIsIFwiUmFiacq7IElcIiwgXCJSYWJpyrsgSUlcIiwgXCJKdW1hZGEgSVwiLCBcIkp1bWFkYSBJSVwiLCBcIlJhamFiXCIsIFwiU2hhyrtiYW5cIiwgXCJSYW1hZGFuXCIsIFwiU2hhd3dhbFwiLCBcIkRodcq7bC1Racq7ZGFoXCIsIFwiRGh1yrtsLUhpamphaFwiXV1cbiAqICAgIExvbmcgbW9udGggbmFtZXMgZm9yIHRoZSBJc2xhbWljIGNhbGVuZGFyIChlLmcuIGBSYWphYmApXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtsb2NhbGVTZXR0aW5ncy5tbW02PVtcIk11aC5cIiwgXCJTYWYuXCIsIFwiUmFiLiBJXCIsIFwiUmFiLiBJSVwiLCBcIkp1bS4gSVwiLCBcIkp1bS4gSUlcIiwgXCJSYWouXCIsIFwiU2hhLlwiLCBcIlJhbS5cIiwgXCJTaGF3LlwiLCBcIkRodcq7bC1RLlwiLCBcIkRodcq7bC1ILlwiXV1cbiAqICAgIFNob3J0IG1vbnRoIG5hbWVzIGZvciB0aGUgSXNsYW1pYyBjYWxlbmRhciAoZS5nLiBgUmFqLmApXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtsb2NhbGVTZXR0aW5ncy5tbW1tPVtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdXVxuICogICAgTG9uZyBtb250aCBuYW1lcyBmb3IgdGhlIEdyZWdvcmlhbiBjYWxlbmRhciAoZS5nLiBgTm92ZW1iZXJgKVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBbbG9jYWxlU2V0dGluZ3MubW1tPVtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXV1cbiAqICAgIFNob3J0IG1vbnRoIG5hbWVzIGZvciB0aGUgR3JlZ29yaWFuIGNhbGVuZGFyIChlLmcuIGBOb3ZgKVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBbbG9jYWxlU2V0dGluZ3MuZGRkZD1bXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXV1cbiAqICAgIExvbmcgZGF5IG5hbWVzIChlLmcuIGBXZWRuZXNkYXlgKVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBbbG9jYWxlU2V0dGluZ3MuZGRkPVtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXV1cbiAqICAgIFNob3J0ZW5lZCBkYXkgbmFtZXMgKGUuZy4gYFdlZGApXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtsb2NhbGVTZXR0aW5ncy5ib29sPVtcIlRSVUVcIiwgXCJGQUxTRVwiXV1cbiAqICAgIEhvdyBUUlVFIGFuZCBGQUxTRSBzaG91bGQgYmUgcHJlc2VudGVkLlxuICogQHBhcmFtIHtib29sZWFufSBbbG9jYWxlU2V0dGluZ3MucHJlZmVyTURZPWZhbHNlXVxuICogICAgSXMgdGhlIHByZWZlcmVkIGRhdGUgZm9ybWF0IG1vbnRoIGZpcnN0ICgxMi8zMS8yMDI1KSBvciBkYXkgZmlyc3QgKDMxLzEyLzIwMjUpXG4gKiBAcGFyYW0ge3N0cmluZ30gbDRlIC0gQSBzdHJpbmcgQkNQIDQ3IHRhZyBvZiB0aGUgbG9jYWxlLlxuICogQHJldHVybnMge0xvY2FsZURhdGF9IC0gQSBmdWxsIGNvbGxlY3Rpb24gb2Ygc2V0dGluZ3MgZm9yIGEgbG9jYWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMb2NhbGUgKGxvY2FsZVNldHRpbmdzLCBsNGUpIHtcbiAgLy8gcGFyc2UgbGFuZ3VhZ2UgdGFnXG4gIGNvbnN0IGMgPSB0eXBlb2YgbDRlID09PSAnb2JqZWN0JyA/IGw0ZSA6IHBhcnNlTG9jYWxlKGw0ZSk7XG4gIC8vIGFkZCB0aGUgbGFuZ3VhZ2VcbiAgbG9jYWxlc1tjLmxhbmddID0gY3JlYXRlTG9jYWxlKGxvY2FsZVNldHRpbmdzKTtcbiAgLy8gaWYgXCJ4eF9ZWVwiIGlzIGFkZGVkIGFsc28gY3JlYXRlIFwieHhcIiBpZiBpdCBpcyBtaXNzaW5nXG4gIGlmIChjLmxhbmd1YWdlICE9PSBjLmxhbmcgJiYgIWxvY2FsZXNbYy5sYW5ndWFnZV0pIHtcbiAgICBsb2NhbGVzW2MubGFuZ3VhZ2VdID0gY3JlYXRlTG9jYWxlKGxvY2FsZVNldHRpbmdzKTtcbiAgfVxuICByZXR1cm4gbG9jYWxlc1tjLmxhbmddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdExvY2FsZXMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobG9jYWxlcyk7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TG9jYWxlID0gY3JlYXRlTG9jYWxlKHsgZ3JvdXA6ICcsJywgcHJlZmVyTURZOiB0cnVlIH0pO1xuZGVmYXVsdExvY2FsZS5pc0RlZmF1bHQgPSB0cnVlO1xuXG5hZGRMb2NhbGUoe1xuICBncm91cDogJywnLFxuICBhbXBtOiBfKCfkuIrljYg75LiL5Y2IJyksXG4gIG1tbW06IF8oJ+S4gOaciDvkuozmnIg75LiJ5pyIO+Wbm+aciDvkupTmnIg75YWt5pyIO+S4g+aciDvlhavmnIg75Lmd5pyIO+WNgeaciDvljYHkuIDmnIg75Y2B5LqM5pyIJyksXG4gIG1tbTogXygnMeaciDsy5pyIOzPmnIg7NOaciDs15pyIOzbmnIg7N+aciDs45pyIOznmnIg7MTDmnIg7MTHmnIg7MTLmnIgnKSxcbiAgZGRkZDogXygnfuaXpTt+5LiAO37kuow7fuS4iTt+5ZubO37kupQ7fuWFrScsICfmmJ/mnJ8nKSxcbiAgZGRkOiBfKCflkajml6U75ZGo5LiAO+WRqOS6jDvlkajkuIk75ZGo5ZubO+WRqOS6lDvlkajlha0nKVxufSwgJ3poX0NOJyk7XG5jb25zdCBfemggPSB7XG4gIGdyb3VwOiAnLCcsXG4gIGFtcG06IF8oJ+S4iuWNiDvkuIvljYgnKSxcbiAgbW1tbTogXygnMeaciDsy5pyIOzPmnIg7NOaciDs15pyIOzbmnIg7N+aciDs45pyIOznmnIg7MTDmnIg7MTHmnIg7MTLmnIgnKSxcbiAgbW1tOiBfKCcx5pyIOzLmnIg7M+aciDs05pyIOzXmnIg7NuaciDs35pyIOzjmnIg7OeaciDsxMOaciDsxMeaciDsxMuaciCcpLFxuICBkZGRkOiBfKCd+5pelO37kuIA7fuS6jDt+5LiJO37lm5s7fuS6lDt+5YWtJywgJ+aYn+acnycpLFxuICBkZGQ6IF8oJ+WRqOaXpTvlkajkuIA75ZGo5LqMO+WRqOS4iTvlkajlm5s75ZGo5LqUO+WRqOWFrScpXG59O1xuYWRkTG9jYWxlKHtcbiAgLi4uX3poLFxuICBuYW46ICfpnZ7mlbjlgLwnLFxuICBkZGRkOiBfKCd+5pelO37kuIA7fuS6jDt+5LiJO37lm5s7fuS6lDt+5YWtJywgJ+aYn+acnycpXG59LCAnemhfVFcnKTtcbmFkZExvY2FsZSh7XG4gIC4uLl96aCxcbiAgZGRkZDogXygnfuaXpTt+5LiAO37kuow7fuS4iTt+5ZubO37kupQ7fuWFrScsICfmmJ/mnJ8nKVxufSwgJ3poX0hLJyk7XG5cbmFkZExvY2FsZSh7XG4gIC4uLl96aCxcbiAgYW1wbTogXygn5Y2I5YmNO+WNiOW+jCcpLFxuICBkZGRkOiBfKCfml6V+O+aciH4754GrfjvmsLR+O+acqH476YeRfjvlnJ9+JywgJ+abnOaXpScpLFxuICBkZGQ6IF8oJ+aXpTvmnIg754GrO+awtDvmnKg76YeRO+WcnycpXG59LCAnamEnKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICcsJyxcbiAgYW1wbTogXygn7Jik7KCEO+yYpO2bhCcpLFxuICBtbW1tOiBfKCcx7JuUOzLsm5Q7M+yblDs07JuUOzXsm5Q7NuyblDs37JuUOzjsm5Q7OeyblDsxMOyblDsxMeyblDsxMuyblCcpLFxuICBtbW06IF8oJzHsm5Q7MuyblDsz7JuUOzTsm5Q7NeyblDs27JuUOzfsm5Q7OOyblDs57JuUOzEw7JuUOzEx7JuUOzEy7JuUJyksXG4gIGRkZGQ6IF8oJ+ydvOyalOydvDvsm5TsmpTsnbw77ZmU7JqU7J28O+yImOyalOydvDvrqqnsmpTsnbw76riI7JqU7J28O+2GoOyalOydvCcpLFxuICBkZGQ6IF8oJ+ydvDvsm5Q77ZmUO+yImDvrqqk76riIO+2GoCcpXG59LCAna28nKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICcsJyxcbiAgYW1wbTogXygn4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHO+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hycpLFxuICBtbW1tOiBfKCfguKHguIHguKN+O+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jDvguKHguLXguJl+O+C5gOC4oeC4qeC4suC4ouC4mTvguJ7guKTguKnguKB+O+C4oeC4tOC4luC4uOC4meC4suC4ouC4mTvguIHguKPguIHguI5+O+C4quC4tOC4h+C4q3474LiB4Lix4LiZ4Lii4Liy4Lii4LiZO+C4leC4uOC4pX474Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZO+C4mOC4seC4meC4p34nLCAn4Liy4LiE4LihJyksXG4gIG1tbTogXygn4LihLuC4hC474LiBLuC4ni474Lih4Li1LuC4hC474LmA4LihLuC4oi474LieLuC4hC474Lih4Li0LuC4oi474LiBLuC4hC474LiqLuC4hC474LiBLuC4oi474LiVLuC4hC474LieLuC4oi474LiYLuC4hC4nKSxcbiAgZGRkZDogXygn4Lin4Lix4LiZ4Lit4Liy4LiX4Li04LiV4Lii4LmMO+C4p+C4seC4meC4iOC4seC4meC4l+C4o+C5jDvguKfguLHguJnguK3guLHguIfguITguLLguKM74Lin4Lix4LiZ4Lie4Li44LiYO+C4p+C4seC4meC4nuC4pOC4q+C4seC4quC4muC4lOC4tTvguKfguLHguJnguKjguLjguIHguKPguYw74Lin4Lix4LiZ4LmA4Liq4Liy4Lij4LmMJyksXG4gIGRkZDogXygn4Lit4LiyLjvguIguO+C4rS474LieLjvguJ7guKQuO+C4qC474LiqLicpXG59LCAndGgnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCdkb3AuO29kcC4nKSxcbiAgbW1tbTogXygnbGVkbmE7w7pub3JhO2LFmWV6bmE7ZHVibmE7a3bEm3RuYTvEjWVydm5hO8SNZXJ2ZW5jZTtzcnBuYTt6w6HFmcOtO8WZw61qbmE7bGlzdG9wYWR1O3Byb3NpbmNlJyksXG4gIG1tbTogXygnSTtJSTtJSUk7SVY7VjtWSTtWSUk7VklJSTtJWDtYO1hJO1hJSScpLFxuICBkZGRkOiBfKCduZWTEm2xlO3BvbmTEm2zDrTvDunRlcsO9O3N0xZllZGE7xI10dnJ0ZWs7cMOhdGVrO3NvYm90YScpLFxuICBib29sOiBfKCdQUkFWREE7TkVQUkFWREEnKVxufSwgLTEsIDIpLCAnY3MnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBtbW1tOiBfKCdqYW51YXI7ZmVicnVhcjttYXJ0czthcHJpbDttYWo7anVuaTtqdWxpO2F1Z3VzdDtzZXB0ZW1iZXI7b2t0b2Jlcjtub3ZlbWJlcjtkZWNlbWJlcicpLFxuICBkZGRkOiBfKCdzw7hufjttYW5+O3RpcnN+O29uc347dG9yc347ZnJlfjtsw7hyficsICdkYWcnKSxcbiAgYm9vbDogXygnU0FORDtGQUxTSycpXG59LCAxMywgMTMpLCAnZGEnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCdhLm0uO3AubS4nKSxcbiAgbW1tbTogXygnamFudWFyaTtmZWJydWFyaTttYWFydDthcHJpbDttZWk7anVuaTtqdWxpO2F1Z3VzdHVzO3NlcHRlbWJlcjtva3RvYmVyO25vdmVtYmVyO2RlY2VtYmVyJyksXG4gIG1tbTogXygnamFuLjtmZWIuO21ydC47YXByLjttZWk7anVuLjtqdWwuO2F1Zy47c2VwLjtva3QuO25vdi47ZGVjLicpLFxuICBkZGRkOiBfKCd6b25kYWc7bWFhbmRhZztkaW5zZGFnO3dvZW5zZGFnO2RvbmRlcmRhZzt2cmlqZGFnO3phdGVyZGFnJyksXG4gIGJvb2w6IF8oJ1dBQVI7T05XQUFSJylcbn0sIC0xLCAyKSwgJ25sJyk7XG5cbmFkZExvY2FsZSh7IGdyb3VwOiAnLCcsIHByZWZlck1EWTogdHJ1ZSB9LCAnZW4nKTtcbmFkZExvY2FsZSh7IGdyb3VwOiAnLCcsIHByZWZlck1EWTogdHJ1ZSB9LCAnZW5fVVMnKTtcbmFkZExvY2FsZSh7IGdyb3VwOiAnLCcgfSwgJ2VuX0FVJyk7XG5hZGRMb2NhbGUoeyBncm91cDogJywnIH0sICdlbl9DQScpO1xuYWRkTG9jYWxlKHsgZ3JvdXA6ICcsJyB9LCAnZW5fR0InKTtcbmFkZExvY2FsZSh7IGdyb3VwOiAnLCcsIG1tbTogXygnSmFuO0ZlYjtNYXI7QXByO01heTtKdW47SnVsO0F1ZztTZXB0O09jdDtOb3Y7RGVjJykgfSwgJ2VuX0lFJyk7XG5cbmFkZExvY2FsZSh4bSh7XG4gIGRlY2ltYWw6ICcsJyxcbiAgbmFuOiAnZXDDpGx1a3UnLFxuICBhbXBtOiBfKCdhcC47aXAuJyksXG4gIG1tbW06IF8oJ3RhbW1pfjtoZWxtaX47bWFhbGlzfjtodWh0aX47dG91a29+O2tlc8OkfjtoZWluw6R+O2Vsb347c3l5c347bG9rYX47bWFycmFzfjtqb3VsdX4nLCAna3V1dGEnKSxcbiAgbW1tOiBfKCd0YW1taWsuO2hlbG1pay47bWFhbGlzay47aHVodGlrLjt0b3Vrb2suO2tlc8Okay47aGVpbsOkay47ZWxvay47c3l5c2suO2xva2FrLjttYXJyYXNrLjtqb3VsdWsuJyksXG4gIGRkZGQ6IF8oJ3N1bm51bn47bWFhbmFufjt0aWlzfjtrZXNraXZpaWtrb25hO3RvcnN+O3Blcmphbn47bGF1YW5+JywgJ3RhaW5hJyksXG4gIGJvb2w6IF8oJ1RPU0k7RVDDhFRPU0knKVxufSwgLTEsIDIpLCAnZmknKTtcblxuY29uc3QgX2ZyID0geG0oe1xuICBncm91cDogJ1xcdTIwMmYnLFxuICBkZWNpbWFsOiAnLCcsXG4gIG1tbW06IF8oJ2phbnZpZXI7ZsOpdnJpZXI7bWFyczthdnJpbDttYWk7anVpbjtqdWlsbGV0O2Fvw7t0O3NlcHRlbWJyZTtvY3RvYnJlO25vdmVtYnJlO2TDqWNlbWJyZScpLFxuICBtbW06IF8oJ2phbnYuO2bDqXZyLjttYXJzO2F2ci47bWFpO2p1aW47anVpbC47YW/Du3Q7c2VwdC47b2N0Ljtub3YuO2TDqWMuJyksXG4gIGRkZGQ6IF8oJ35tYW5jaGU7bHVufjttYXJ+O21lcmNyZX47amV1fjt2ZW5kcmV+O3NhbWV+JywgJ2RpJyksXG4gIGJvb2w6IF8oJ1ZSQUk7RkFVWCcpXG59LCAtMSwgMTMpO1xuYWRkTG9jYWxlKHsgLi4uX2ZyIH0sICdmcicpO1xuYWRkTG9jYWxlKHsgLi4uX2ZyLCBtbW06IF8oJ2phbnYuO2bDqXZyLjttYXJzO2F2ci47bWFpO2p1aW47anVpbGwuO2Fvw7t0O3NlcHQuO29jdC47bm92Ljtkw6ljLicpIH0sICdmcl9DQScpO1xuYWRkTG9jYWxlKHsgZ3JvdXA6IFwiJ1wiLCBkZWNpbWFsOiAnLicsIC4uLl9mciB9LCAnZnJfQ0gnKTtcblxuY29uc3QgX2RlID0geG0oe1xuICBtbW1tOiBfKCdKYW51YXI7RmVicnVhcjtNw6RyejtBcHJpbDtNYWk7SnVuaTtKdWxpO0F1Z3VzdDtTZXB0ZW1iZXI7T2t0b2JlcjtOb3ZlbWJlcjtEZXplbWJlcicpLFxuICBtbW06IF8oJ0phbi47RmViLjtNw6RyejtBcHIuO01haTtKdW5pO0p1bGk7QXVnLjtTZXB0LjtPa3QuO05vdi47RGV6LicpLFxuICBkZGRkOiBfKCdTb25ufjtNb25+O0RpZW5zfjtNaXR0d29jaDtEb25uZXJzfjtGcmVpfjtTYW1zficsICd0YWcnKSxcbiAgYm9vbDogXygnV0FIUjtGQUxTQ0gnKVxufSwgLTEsIDEyKTtcbmFkZExvY2FsZSh7IGdyb3VwOiAnLicsIGRlY2ltYWw6ICcsJywgLi4uX2RlIH0sICdkZScpO1xuYWRkTG9jYWxlKHsgZ3JvdXA6IFwiJ1wiLCBkZWNpbWFsOiAnLicsIC4uLl9kZSB9LCAnZGVfQ0gnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCfPgC7OvC47zrwuzrwuJyksXG4gIG1tbW06IF8oJ86ZzrHOvc6/z4XOsc+BfjvOps61zrLPgc6/z4XOsc+BfjvOnM6xz4HPhH47zpHPgM+BzrnOu347zpzOsc6Qzr/PhTvOmc6/z4XOvX47zpnOv8+Fzrt+O86Rz4XOs86/z43Pg8+Ezr/PhTvOo861z4DPhM61zrzOss+BfjvOn866z4TPic6yz4F+O86dzr/Otc68zrLPgX47zpTOtc66zrXOvM6yz4F+JywgJ86vzr/PhScpLFxuICBtbW06IF8oJ86ZzrHOvTvOps61zrI7zpzOsc+BO86Rz4DPgTvOnM6xzpA7zpnOv8+Fzr07zpnOv8+Fzrs7zpHPhc6zO86jzrXPgDvOn866z4Q7zp3Ov861O86UzrXOuicpLFxuICBkZGRkOiBfKCfOms+Fz4HOuc6xzrrOrjvOlM61z4XPhM6tz4HOsTvOpM+Bzq/PhM63O86kzrXPhM6sz4HPhM63O86gzq3OvM+Az4TOtzvOoM6xz4HOsc+DzrrOtc+Fzq47zqPOrM6yzrLOsc+Ezr8nKVxufSwgLTEsIDMpLCAnZWwnKTtcblxuYWRkTG9jYWxlKHtcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCdkZS47ZHUuJyksXG4gIG1tbW06IF8oJ2phbnXDoXI7ZmVicnXDoXI7bcOhcmNpdXM7w6FwcmlsaXM7bcOhanVzO2rDum5pdXM7asO6bGl1czthdWd1c3p0dXM7c3plcHRlbWJlcjtva3TDs2Jlcjtub3ZlbWJlcjtkZWNlbWJlcicpLFxuICBtbW06IF8oJ2phbi47ZmVici47bcOhcmMuO8OhcHIuO23DoWouO2rDum4uO2rDumwuO2F1Zy47c3plcHQuO29rdC47bm92LjtkZWMuJyksXG4gIGRkZGQ6IF8oJ3Zhc8Ohcm5hcDtow6l0ZsWRO2tlZGQ7c3plcmRhO2Nzw7x0w7ZydMO2aztww6ludGVrO3N6b21iYXQnKSxcbiAgZGRkOiBfKCdWO0g7SztTemU7Q3M7UDtTem8nKSxcbiAgYm9vbDogXygnSUdBWjtIQU1JUycpXG59LCAnaHUnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCdmLmguO2UuaC4nKSxcbiAgbW1tbTogXygnamFuw7phcjtmZWJyw7phcjttYXJzO2FwcsOtbDttYcOtO2rDum7DrTtqw7psw607w6Fnw7pzdDtzZXB0ZW1iZXI7b2t0w7NiZXI7bsOzdmVtYmVyO2Rlc2VtYmVyJyksXG4gIGRkZGQ6IF8oJ3N1bm51fjttw6FudX47w75yacOwanV+O21pw7B2aWt1fjtmaW1tdHV+O2bDtnN0dX47bGF1Z2FyficsICdkYWd1cicpXG59LCAxMywgMTMpLCAnaXMnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBtbW1tOiBfKCdKYW51YXJpO0ZlYnJ1YXJpO01hcmV0O0FwcmlsO01laTtKdW5pO0p1bGk7QWd1c3R1cztTZXB0ZW1iZXI7T2t0b2JlcjtOb3ZlbWJlcjtEZXNlbWJlcicpLFxuICBkZGRkOiBfKCdNaW5nZ3U7U2VuaW47U2VsYXNhO1JhYnU7S2FtaXM7SnVtYXQ7U2FidHUnKVxufSwgMywgMyksICdpZCcpO1xuXG5jb25zdCBfaXQgPSB4bSh7XG4gIG1tbW06IF8oJ2dlbm5haW87ZmViYnJhaW87bWFyem87YXByaWxlO21hZ2dpbztnaXVnbm87bHVnbGlvO2Fnb3N0bztzZXR0ZW1icmU7b3R0b2JyZTtub3ZlbWJyZTtkaWNlbWJyZScpLFxuICBkZGRkOiBfKCdkb21lbmljYTtsdW5lZMOsO21hcnRlZMOsO21lcmNvbGVkw6w7Z2lvdmVkw6w7dmVuZXJkw6w7c2FiYXRvJyksXG4gIGJvb2w6IF8oJ1ZFUk87RkFMU08nKVxufSwgMywgMyk7XG5hZGRMb2NhbGUoeyBncm91cDogJy4nLCBkZWNpbWFsOiAnLCcsIC4uLl9pdCB9LCAnaXQnKTtcbmFkZExvY2FsZSh7IGdyb3VwOiBcIidcIiwgZGVjaW1hbDogJy4nLCAuLi5faXQgfSwgJ2l0X0NIJyk7XG5cbmNvbnN0IF9ubyA9IHtcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCdhLm0uO3AubS4nKSxcbiAgbW1tbTogXygnamFudWFyO2ZlYnJ1YXI7bWFyczthcHJpbDttYWk7anVuaTtqdWxpO2F1Z3VzdDtzZXB0ZW1iZXI7b2t0b2Jlcjtub3ZlbWJlcjtkZXNlbWJlcicpLFxuICBtbW06IF8oJ2phbi47ZmViLjttYXIuO2Fwci47bWFpO2p1bi47anVsLjthdWcuO3NlcC47b2t0Ljtub3YuO2Rlcy4nKSxcbiAgZGRkZDogXygnc8O4bn47bWFufjt0aXJzfjtvbnN+O3RvcnN+O2ZyZX47bMO4cn4nLCAnZGFnJyksXG4gIGJvb2w6IF8oJ1NBTk47VVNBTk4nKVxufTtcbmFkZExvY2FsZSh4bSh7IC4uLl9ubyB9LCAtMSwgMTMpLCAnbmInKTtcbmFkZExvY2FsZSh4bSh7IC4uLl9ubyB9LCAtMSwgMTMpLCAnbm8nKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZGVjaW1hbDogJywnLFxuICBtbW1tOiBfKCdzdHljem5pYTtsdXRlZ287bWFyY2E7a3dpZXRuaWE7bWFqYTtjemVyd2NhO2xpcGNhO3NpZXJwbmlhO3dyemXFm25pYTtwYcW6ZHppZXJuaWthO2xpc3RvcGFkYTtncnVkbmlhJyksXG4gIGRkZGQ6IF8oJ25pZWR6aWVsYTtwb25pZWR6aWHFgmVrO3d0b3JlazvFm3JvZGE7Y3p3YXJ0ZWs7cGnEhXRlaztzb2JvdGEnKSxcbiAgZGRkOiBfKCduaWVkei47cG9uLjt3dC47xZtyLjtjencuO3B0Ljtzb2IuJyksXG4gIGJvb2w6IF8oJ1BSQVdEQTtGQcWBU1onKVxufSwgMywgLTEpLCAncGwnKTtcblxuY29uc3QgX3B0ID0ge1xuICBncm91cDogJy4nLFxuICBkZWNpbWFsOiAnLCcsXG4gIG1tbW06IF8oJ2phbmVpcm87ZmV2ZXJlaXJvO21hcsOnbzthYnJpbDttYWlvO2p1bmhvO2p1bGhvO2Fnb3N0bztzZXRlbWJybztvdXR1YnJvO25vdmVtYnJvO2RlemVtYnJvJyksXG4gIGRkZGQ6IF8oJ2RvbWluZ287c2VndW5kYS1mZWlyYTt0ZXLDp2EtZmVpcmE7cXVhcnRhLWZlaXJhO3F1aW50YS1mZWlyYTtzZXh0YS1mZWlyYTtzw6FiYWRvJyksXG4gIGJvb2w6IF8oJ1ZFUkRBREVJUk87RkFMU08nKVxufTtcbmFkZExvY2FsZSh4bShfcHQsIDEzLCAxMyksICdwdCcpO1xuYWRkTG9jYWxlKHhtKF9wdCwgMTMsIDEzKSwgJ3B0X0JSJyk7XG5cbmFkZExvY2FsZSh7XG4gIGRlY2ltYWw6ICcsJyxcbiAgbmFuOiAn0L3QtVxcdTAwQTDRh9C40YHQu9C+JyxcbiAgbW1tbTogXygn0Y/QvdCy0LDRgNGPO9GE0LXQstGA0LDQu9GPO9C80LDRgNGC0LA70LDQv9GA0LXQu9GPO9C80LDRjzvQuNGO0L3RjzvQuNGO0LvRjzvQsNCy0LPRg9GB0YLQsDvRgdC10L3RgtGP0LHRgNGPO9C+0LrRgtGP0LHRgNGPO9C90L7Rj9Cx0YDRjzvQtNC10LrQsNCx0YDRjycpLFxuICBtbW06IF8oJ9GP0L3Qsi470YTQtdCy0YAuO9C80LDRgC470LDQv9GALjvQvNCw0Y870LjRjtC9LjvQuNGO0LsuO9Cw0LLQsy470YHQtdC90YIuO9C+0LrRgi470L3QvtGP0LEuO9C00LXQui4nKSxcbiAgZGRkZDogXygn0LLQvtGB0LrRgNC10YHQtdC90YzQtTvQv9C+0L3QtdC00LXQu9GM0L3QuNC6O9Cy0YLQvtGA0L3QuNC6O9GB0YDQtdC00LA70YfQtdGC0LLQtdGA0LM70L/Rj9GC0L3QuNGG0LA70YHRg9Cx0LHQvtGC0LAnKSxcbiAgZGRkOiBfKCfQstGBO9C/0L070LLRgjvRgdGAO9GH0YI70L/RgjvRgdCxJyksXG4gIG1tbW02OiBfKCfRgNCw0LzQsNC00LDQvTvRiNCw0LLQstCw0LvRjDvQt9GD0LvRjC3QutCw0LDQtNCwO9C30YPQu9GMLdGF0LjQtNC20LbQsDvQvNGD0YXQsNGA0YDQsNC8O9GA0LDQsdC4LdGD0LvRjC3QsNCy0LLQsNC70Yw70YDQsNCx0Lgt0YPQu9GMLdCw0YXQuNGAO9C00LbRg9C80LDQtC3Rg9C70Ywt0LDQstCy0LDQu9GMO9C00LbRg9C80LDQtC3Rg9C70Ywt0LDRhdC40YA70YDQsNC00LbQsNCxO9GI0LDQsNCx0LDQvTvRgNCw0LzQsNC00LDQvScpLFxuICBtbW02OiBfKCfRgNCw0LwuO9GI0LDQsi470LfRg9C70Ywt0LouO9C30YPQu9GMLdGFLjvQvNGD0YUuO9GA0LDQsS4gSTvRgNCw0LEuIElJO9C00LbRg9C8LiBJO9C00LbRg9C8LiBJSTvRgNCw0LTQti470YjQsNCw0LEuO9GA0LDQvC4nKSxcbiAgYm9vbDogXygn0JjQodCi0JjQndCQO9Cb0J7QltCsJylcbn0sICdydScpO1xuXG5hZGRMb2NhbGUoeG0oe1xuICBkZWNpbWFsOiAnLCcsXG4gIG1tbW06IF8oJ2phbnXDoXJhO2ZlYnJ1w6FyYTttYXJjYTthcHLDrWxhO23DoWphO2rDum5hO2rDumxhO2F1Z3VzdGE7c2VwdGVtYnJhO29rdMOzYnJhO25vdmVtYnJhO2RlY2VtYnJhJyksXG4gIGRkZGQ6IF8oJ25lZGXEvmE7cG9uZGVsb2s7dXRvcm9rO3N0cmVkYTvFoXR2cnRvaztwaWF0b2s7c29ib3RhJylcbn0sIDMsIDIpLCAnc2snKTtcblxuY29uc3QgX2VzID0ge1xuICBncm91cDogJy4nLFxuICBkZWNpbWFsOiAnLCcsXG4gIGFtcG06IF8oJ2EuXFx1MDBBMG0uO3AuXFx1MDBBMG0uJyksXG4gIG1tbW06IF8oJ2VuZXJvO2ZlYnJlcm87bWFyem87YWJyaWw7bWF5bztqdW5pbztqdWxpbzthZ29zdG87c2VwdGllbX47b2N0dX47bm92aWVtfjtkaWNpZW1+JywgJ2JyZScpLFxuICBtbW06IF8oJ2VuZTtmZWI7bWFyO2FicjttYXk7anVuO2p1bDthZ287c2VwdDtvY3Q7bm92O2RpYycpLFxuICBkZGRkOiBfKCdkb21pbmdvO2x1bmVzO21hcnRlczttacOpcmNvbGVzO2p1ZXZlczt2aWVybmVzO3PDoWJhZG8nKSxcbiAgZGRkOiBfKCdkb207bHVuO21hcjttacOpO2p1ZTt2aWU7c8OhYicpLFxuICBib29sOiBfKCdWRVJEQURFUk87RkFMU08nKVxufTtcbmNvbnN0IF9lc00zID0gXygnZW5lO2ZlYjttYXI7YWJyO21heTtqdW47anVsO2FnbztzZXA7b2N0O25vdjtkaWMnKTtcbmNvbnN0IF9lc00xMyA9IF8oJ2VuZS47ZmViLjttYXIuO2Fici47bWF5LjtqdW4uO2p1bC47YWdvLjtzZXB0LjtvY3QuO25vdi47ZGljLicpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlcycpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlc19BUicpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlc19CTycpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlc19DTCcpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlc19DTycpO1xuYWRkTG9jYWxlKHsgLi4uX2VzIH0sICdlc19FQycpO1xuYWRkTG9jYWxlKHsgLi4uX2VzLCBtbW06IF9lc00zLCBhbXBtOiBfKCdhLm0uO3AubS4nKSB9LCAnZXNfTVgnKTtcbmFkZExvY2FsZSh7IC4uLl9lcywgbW1tOiBfZXNNMTMgfSwgJ2VzX1BZJyk7XG5hZGRMb2NhbGUoeyAuLi5fZXMsIG1tbTogX2VzTTEzIH0sICdlc19VWScpO1xuYWRkTG9jYWxlKHsgLi4uX2VzLCBtbW06IF9lc00xMywgbW1tbTogXygnZW5lcm87ZmVicmVybzttYXJ6bzthYnJpbDttYXlvO2p1bmlvO2p1bGlvO2Fnb3N0bztzZXRpZW1icmU7b2N0dWJyZTtub3ZpZW1icmU7ZGljaWVtYnJlJykgfSwgJ2VzX1ZFJyk7XG5cbmFkZExvY2FsZSh7XG4gIGRlY2ltYWw6ICcsJyxcbiAgYW1wbTogXygnZm07ZW0nKSxcbiAgbW1tbTogXygnamFudWFyaTtmZWJydWFyaTttYXJzO2FwcmlsO21hajtqdW5pO2p1bGk7YXVndXN0aTtzZXB0ZW1iZXI7b2t0b2Jlcjtub3ZlbWJlcjtkZWNlbWJlcicpLFxuICBtbW06IF8oJ2phbi47ZmViLjttYXJzO2Fwci47bWFqO2p1bmk7anVsaTthdWcuO3NlcC47b2t0Ljtub3YuO2RlYy4nKSxcbiAgZGRkZDogXygnc8O2bn47bcOlbn47dGlzfjtvbnN+O3RvcnN+O2ZyZX47bMO2cn4nLCAnZGFnJyksXG4gIGRkZDogXygnc8O2bjttw6VuO3RpcztvbnM7dG9ycztmcmU7bMO2cicpXG59LCAnc3YnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICcuJyxcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCfDlsOWO8OWUycpLFxuICBtbW1tOiBfKCdPY2FrO8WedWJhdDtNYXJ0O05pc2FuO01hecSxcztIYXppcmFuO1RlbW11ejtBxJ91c3RvcztFeWzDvGw7RWtpbTtLYXPEsW07QXJhbMSxaycpLFxuICBtbW06IF8oJ09jYTvFnnViO01hcjtOaXM7TWF5O0hhejtUZW07QcSfdTtFeWw7RWtpO0thcztBcmEnKSxcbiAgZGRkZDogXygnUGF6YXI7UGF6YXJ0ZXNpO1NhbMSxO8OHYXLFn2FtYmE7UGVyxZ9lbWJlO0N1bWE7Q3VtYXJ0ZXNpJyksXG4gIGRkZDogXygnUGF6O1B6dDtTYWw7w4dhcjtQZXI7Q3VtO0NtdCcpLFxuICBib29sOiBfKCdET8SeUlU7WUFOTEnFnicpXG59LCAzLCAtMSksICd0cicpO1xuXG5hZGRMb2NhbGUoe1xuICBncm91cDogJywnLFxuICBhbXBtOiBfKCd5Yjt5aCcpLFxuICBtbW1tOiBfKCdJb25hd3I7Q2h3ZWZyb3I7TWF3cnRoO0VicmlsbDtNYWk7TWVoZWZpbjtHb3JmZmVubmFmO0F3c3Q7TWVkaTtIeWRyZWY7VGFjaHdlZGQ7UmhhZ2Z5cicpLFxuICBtbW06IF8oJ0lvbjtDaHdlZjtNYXc7RWJyO01haTtNZWg7R29yZmY7QXdzdDtNZWRpO0h5ZDtUYWNoO1JoYWcnKSxcbiAgZGRkZDogXygnRHlkZCBTdWw7RHlkZCBMbHVuO0R5ZGQgTWF3cnRoO0R5ZGQgTWVyY2hlcjtEeWRkIElhdTtEeWRkIEd3ZW5lcjtEeWRkIFNhZHdybicpLFxuICBkZGQ6IF8oJ1N1bDtMbHVuO01hdztNZXI7SWF1O0d3ZW47U2FkJylcbn0sICdjeScpO1xuXG5hZGRMb2NhbGUoe1xuICBncm91cDogICcuJyxcbiAgZGVjaW1hbDogICcsJyxcbiAgbW1tbTogXygneWFudmFyO2ZldnJhbDttYXJ0O2FwcmVsO21heTtpeXVuO2l5dWw7YXZxdXN0O3NlbnR5YWJyO29rdHlhYnI7bm95YWJyO2Rla2FicicpLFxuICBtbW06IF8oJ3lhbjtmZXY7bWFyO2FwcjttYXk7aXluO2l5bDthdnE7c2VuO29rdDtub3k7ZGVrJyksXG4gIGRkZGQ6IF8oJ2JhemFyO2JhemFyIGVydMmZc2k7w6fJmXLFn8mZbmLJmSBheMWfYW3EsTvDp8mZcsWfyZluYsmZO2PDvG3JmSBheMWfYW3EsTtjw7xtyZk7xZ/JmW5iyZknKSxcbiAgZGRkOiAgXygnQi47Qi5lLjvDhy5hLjvDhy47Qy5hLjtDLjvFni4nKVxufSwgJ2F6Jyk7XG5cbmFkZExvY2FsZSh4bSh7XG4gIGRlY2ltYWw6ICcsJyxcbiAgbW1tbTogXygn0YHRgtGD0LTQt9C10L3RjzvQu9GO0YLQsNCz0LA70YHQsNC60LDQstGW0LrQsDvQutGA0LDRgdCw0LLRltC60LA70LzQsNGPO9GH0Y3RgNCy0LXQvdGPO9C70ZbQv9C10L3RjzvQttC90ZbRntC90Y870LLQtdGA0LDRgdC90Y870LrQsNGB0YLRgNGL0YfQvdGW0LrQsDvQu9GW0YHRgtCw0L/QsNC00LA70YHQvdC10LbQvdGPJyksXG4gIGRkZGQ6IF8oJ9C90Y/QtNC30LXQu9GPO9C/0LDQvdGP0LTQt9C10LvQsNC6O9Cw0Z7RgtC+0YDQsNC6O9GB0LXRgNCw0LTQsDvRh9Cw0YbQstC10YA70L/Rj9GC0L3RltGG0LA70YHRg9Cx0L7RgtCwJyksXG4gIGRkZDogIF8oJ9C90LQ70L/QvTvQsNGeO9GB0YA70YfRhjvQv9GCO9GB0LEnKVxufSwgMywgLTEpLCAnYmUnKTtcblxuYWRkTG9jYWxlKHtcbiAgZGVjaW1hbDogJywnLFxuICBhbXBtOiBfKCfQv9GALtC+0LEuO9GB0Lsu0L7QsS4nKSxcbiAgbW1tbTogXygn0Y/QvdGD0LDRgNC4O9GE0LXQstGA0YPQsNGA0Lg70LzQsNGA0YI70LDQv9GA0LjQuzvQvNCw0Lk70Y7QvdC4O9GO0LvQuDvQsNCy0LPRg9GB0YI70YHQtdC/0YLQtdC80LLRgNC4O9C+0LrRgtC+0LzQstGA0Lg70L3QvtC10LzQstGA0Lg70LTQtdC60LXQvNCy0YDQuCcpLFxuICBtbW06ICBfKCfRj9C90YM70YTQtdCyO9C80LDRgNGCO9Cw0L/RgDvQvNCw0Lk70Y7QvdC4O9GO0LvQuDvQsNCy0LM70YHQtdC/O9C+0LrRgjvQvdC+0LU70LTQtdC6JyksXG4gIGRkZGQ6IF8oJ9C90LXQtNC10LvRjzvQv9C+0L3QtdC00LXQu9C90LjQujvQstGC0L7RgNC90LjQujvRgdGA0Y/QtNCwO9GH0LXRgtCy0YrRgNGC0YrQujvQv9C10YLRitC6O9GB0YrQsdC+0YLQsCcpLFxuICBkZGQ6ICBfKCfQvdC0O9C/0L070LLRgjvRgdGAO9GH0YI70L/RgjvRgdCxJyksXG4gIGJvb2w6IF8oJ9CY0KHQotCY0J3QkDvQm9Ce0JbQrCcpXG59LCAnYmcnKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICAnLicsXG4gIGRlY2ltYWw6ICAnLCcsXG4gIG1tbW06IF8oJ2RlIGdlbmVyO2RlIGZlYnJlcjtkZSBtYXLDpztk4oCZYWJyaWw7ZGUgbWFpZztkZSBqdW55O2RlIGp1bGlvbDtk4oCZYWdvc3Q7ZGUgc2V0ZW1icmU7ZOKAmW9jdHVicmU7ZGUgbm92ZW1icmU7ZGUgZGVzZW1icmUnKSxcbiAgbW1tOiAgXygnZGUgZ2VuLjtkZSBmZWJyLjtkZSBtYXLDpztk4oCZYWJyLjtkZSBtYWlnO2RlIGp1bnk7ZGUganVsLjtk4oCZYWcuO2RlIHNldC47ZOKAmW9jdC47ZGUgbm92LjtkZSBkZXMuJyksXG4gIGRkZGQ6IF8oJ2RpdW1lbmdlO2RpbGx1bnM7ZGltYXJ0cztkaW1lY3JlcztkaWpvdXM7ZGl2ZW5kcmVzO2Rpc3NhYnRlJyksXG4gIGRkZDogIF8oJ2RnLjtkbC47ZHQuO2RjLjtkai47ZHYuO2RzLicpLFxuICBhbXBtOiBfKCdhLlxcdTAwYTBtLjtwLlxcdTAwYTBtLicpXG59LCAnY2EnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICAnLCcsXG4gIGRlY2ltYWw6ICAnLicsXG4gIG1tbW06IF8oJ0VuZXJvO1BlYnJlcm87TWFyc287QWJyaWw7TWF5bztIdW55bztIdWx5bztBZ29zdG87U2V0eWVtYnJlO09rdHVicmU7Tm9ieWVtYnJlO0Rpc3llbWJyZScpLFxuICBkZGRkOiBfKCdMaW5nZ287THVuZXM7TWFydGVzO01peWVya3VsZXM7SHV3ZWJlcztCaXllcm5lcztTYWJhZG8nKVxufSwgMywgMyksICdmaWwnKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICAnLCcsXG4gIGRlY2ltYWw6ICAnLicsXG4gIG1tbW06IF8oJ+CqnOCqvuCqqOCrjeCqr+CrgeCqhuCqsOCrgDvgqqvgq4fgqqzgq43gqrDgq4HgqobgqrDgq4A74Kqu4Kq+4Kqw4KuN4KqaO+Cqj+CqquCrjeCqsOCqv+Cqsjvgqq7gq4c74Kqc4KuC4KqoO+CqnOCrgeCqsuCqvuCqiDvgqpHgqpfgqrjgq43gqp874Kq44Kqq4KuN4Kqf4KuH4Kqu4KuN4Kqs4KqwO+CqkeCqleCrjeCqn+Cri+CqrOCqsDvgqqjgqrXgq4fgqq7gq43gqqzgqrA74Kqh4Kq/4Kq44KuH4Kqu4KuN4Kqs4KqwJyksXG4gIG1tbTogXygn4Kqc4Kq+4Kqo4KuN4Kqv4KuBO+Cqq+Crh+CqrOCrjeCqsOCrgTvgqq7gqr7gqrDgq43gqpo74KqP4Kqq4KuN4Kqw4Kq/4KqyO+CqruCrhzvgqpzgq4Lgqqg74Kqc4KuB4Kqy4Kq+4KqIO+CqkeCql+CquOCrjeCqnzvgqrjgqqrgq43gqp/gq4c74KqR4KqV4KuN4Kqf4KuLO+CqqOCqteCrhzvgqqHgqr/gqrjgq4cnKSxcbiAgZGRkZDogXygn4Kqw4Kq14Kq/fjvgqrjgq4vgqq5+O+CqruCqguCql+Cqs3474Kqs4KuB4Kqnfjvgqpfgq4HgqrDgq4F+O+CqtuCrgeCqleCrjeCqsH474Kq24Kqo4Kq/ficsICfgqrXgqr7gqrAnKSxcbiAgZGRkOiBfKCfgqrDgqrXgqr874Kq44KuL4KquO+CqruCqguCql+Cqszvgqqzgq4Hgqqc74KqX4KuB4Kqw4KuBO+CqtuCrgeCqleCrjeCqsDvgqrbgqqjgqr8nKVxufSwgJ2d1Jyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJywnLFxuICBkZWNpbWFsOiAgJy4nLFxuICBhbXBtOiBfKCfXnNek16DXlNe016Y715DXl9eU17TXpicpLFxuICBkZGRkOiBfKCd+16jXkNep15XXnzt+16nXoNeZO37Xqdec15nXqdeZO37XqNeR15nXoteZO37Xl9ee15nXqdeZO37XqdeZ16nXmTt+16nXkdeqJywgJ9eZ15XXnSAnKSxcbiAgZGRkOiBfKCd+15DXszt+15HXszt+15LXszt+15PXszt+15TXszt+15XXszvXqdeR16onLCAn15nXldedICcpLFxuICBtbW1tOiBfKCfXmdeg15XXkNeoO9ek15HXqNeV15DXqDvXnteo16U715DXpNeo15nXnDvXnteQ15k715nXldeg15k715nXldec15k715DXldeS15XXodeYO9eh16TXmNee15HXqDvXkNeV16fXmNeV15HXqDvXoNeV15HXnteR16g715PXptee15HXqCcpLFxuICBtbW06IF8oJ9eZ16DXldezO9ek15HXqNezO9ee16jXpTvXkNek16jXszvXnteQ15k715nXldeg15k715nXldec15k715DXldeS17M716HXpNeY17M715DXlden17M716DXldeR17M715PXptee17MnKSxcbiAgbW1tbTY6IF8oJ9eo157Xk9eQ158716nXldeV15DXnDvXk9ez15Ug15DXnNa+16fXoteT15Q715PXs9eVINeQ15zWvteX15nXktez15Q7157XldeX16jXnTvXqNeR15nXoiDXkNec1r7XkNeV15XXnDvXqNeR15nXoiDXkNa+16rXs9eQ16DXmTvXktez15XXnteQ15PXkCDXkNec1r7XkNeV15zXkDvXktez15XXnteQ15PXkCDXkNa+16rXs9eQ16DXmdeUO9eo15LXs9eRO9ep16LXkdeQ158716jXnteT15DXnycpLFxuICBtbW02OiBfKCfXqNee15PXkNefO9ep15XXldeQ15w715PXs9eVINeQ15zWvten16LXk9eUO9eT17PXlSDXkNec1r7Xl9eZ15LXs9eUO9ee15XXl9eo150716jXkdeZ16Ig15DXszvXqNeR15nXoiDXkdezO9eS17PXldee15DXk9eQINeQ17M715LXs9eV157XkNeT15Ag15HXszvXqNeS17PXkTvXqdei15HXkNefO9eo157Xk9eQ158nKVxufSwgJ2hlJyk7XG5cbmFkZExvY2FsZSh4bSh7XG4gIGdyb3VwOiAgJy4nLFxuICBkZWNpbWFsOiAgJywnLFxuICBtbW1tOiBfKCdzaWplxI1uamE7dmVsamHEjWU7b8W+dWprYTt0cmF2bmphO3N2aWJuamE7bGlwbmphO3NycG5qYTtrb2xvdm96YTtydWpuYTtsaXN0b3BhZGE7c3R1ZGVub2dhO3Byb3NpbmNhJyksXG4gIG1tbTogIF8oJ3Npajt2ZWxqO2/FvnU7dHJhO3N2aTtsaXA7c3JwO2tvbDtydWo7bGlzO3N0dTtwcm8nKSxcbiAgZGRkZDogXygnbmVkamVsamE7cG9uZWRqZWxqYWs7dXRvcmFrO3NyaWplZGE7xI1ldHZydGFrO3BldGFrO3N1Ym90YScpXG59LCAtMSwgMyksICdocicpO1xuXG5hZGRMb2NhbGUoe1xuICBkZWNpbWFsOiAnLCcsXG4gIG1tbW06IF8oJ9Ww1bjWgtW21b7VodaA1as71oPVpdW/1oDVvtWh1oDVqzvVtNWh1oDVv9WrO9Wh1brWgNWr1azVqzvVtNWh1bXVq9W91as71bDVuNaC1bbVq9W91as71bDVuNaC1azVq9W91as71oXVo9W41b3Vv9W41b3VqzvVvdWl1brVv9Wl1bTVotWl1oDVqzvVsNW41a/Vv9Wl1bTVotWl1oDVqzvVttW41bXVpdW01aLVpdaA1as71aTVpdWv1b/VpdW01aLVpdaA1asnKSxcbiAgbW1tOiAgXygn1bDVttW+O9aD1b/VvjvVtNaA1b871aHVutaAO9W01bXVvTvVsNW21b071bDVrNW9O9aF1aPVvTvVvdWl1bo71bDVuNWvO9W21bjVtTvVpNWl1a8nKSxcbiAgZGRkZDogXygn1a/Vq9aA1aHVr9WrO9Wl1oDVr9W41oLVt9Wh1aLVqdWrO9Wl1oDVpdaE1bfVodWi1anVqzvVudW41oDVpdaE1bfVodWi1anVqzvVsNWr1bbVo9W31aHVotWp1as71bjWgtaA1aLVodWpO9W31aHVotWh1aknKSxcbiAgZGRkOiAgXygn1a/Vq9aAO9Wl1oDVrzvVpdaA1oQ71bnWgNaEO9Ww1bbVozvVuNaC1oA71bfVotWpJylcbn0sICdoeScpO1xuXG5hZGRMb2NhbGUoeG0oe1xuICBkZWNpbWFsOiAnLCcsXG4gIG1tbW06IF8oJ+GDmOGDkOGDnOGDleGDkOGDoOGDmDvhg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5g74YOb4YOQ4YOg4YOi4YOYO+GDkOGDnuGDoOGDmOGDmuGDmDvhg5vhg5Dhg5jhg6Hhg5g74YOY4YOV4YOc4YOY4YOh4YOYO+GDmOGDleGDmuGDmOGDoeGDmDvhg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg5074YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYO+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmDvhg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5g74YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJyksXG4gIGRkZGQ6IF8oJ+GDmeGDleGDmOGDoOGDkDvhg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg5g74YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOYO+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDmDvhg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg5g74YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOYO+GDqOGDkOGDkeGDkOGDl+GDmCcpXG59LCAzLCAzKSwgJ2thJyk7XG5cbmFkZExvY2FsZSh4bSh7XG4gIGRlY2ltYWw6ICcsJyxcbiAgbW1tbTogXygn0pvQsNKj0YLQsNGAO9Cw0pvQv9Cw0L070L3QsNGD0YDRi9C3O9GB05nRg9GW0YA70LzQsNC80YvRgDvQvNCw0YPRgdGL0Lw70YjRltC70LTQtTvRgtCw0LzRi9C3O9Kb0YvRgNC60q/QudC10Lo70pvQsNC30LDQvTvSm9Cw0YDQsNGI0LA70LbQtdC70YLQvtKb0YHQsNC9JyksXG4gIGRkZGQ6IF8oJ9C20LXQutGB0LXQvdCx0ZY70LTSr9C50YHQtdC90LHRljvRgdC10LnRgdC10L3QsdGWO9GB05nRgNGB0LXQvdCx0ZY70LHQtdC50YHQtdC90LHRljvQttKx0LzQsDvRgdC10L3QsdGWJyksXG4gIGRkZDogIF8oJ9C20YE70LTRgTvRgdGBO9GB0YA70LHRgTvQttC8O9GB0LEnKVxufSwgMTMsIC0xKSwgJ2trJyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJywnLFxuICBtbW1tOiBfKCfgspzgsqjgsrXgsrDgsr874LKr4LOG4LKs4LON4LKw4LK14LKw4LK/O+CyruCyvuCysOCzjeCymuCzjTvgso/gsqrgs43gsrDgsr/gsrLgs4074LKu4LOHO+CynOCzguCyqOCzjTvgspzgs4HgsrLgs4g74LKG4LKX4LK44LON4LKf4LONO+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjTvgsoXgspXgs43gsp/gs4vgsqzgsrDgs4074LKo4LK14LOG4LKC4LKs4LKw4LONO+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScpLFxuICBtbW06ICBfKCfgspzgsqjgsrXgsrDgsr874LKr4LOG4LKs4LON4LKw4LK14LKw4LK/O+CyruCyvuCysOCzjeCymuCzjTvgso/gsqrgs43gsrDgsr874LKu4LOHO+CynOCzguCyqOCzjTvgspzgs4HgsrLgs4g74LKG4LKX4LK44LON4LKf4LONO+CyuOCzhuCyquCzjeCyn+CzhuCygjvgsoXgspXgs43gsp/gs4s74LKo4LK14LOG4LKCO+CyoeCyv+CyuOCzhuCygicpLFxuICBkZGRkOiBfKCfgsq3gsr7gsqjgs4F+O+CyuOCzi+Cyrn474LKu4LKC4LKX4LKzfjvgsqzgs4Hgsqd+O+Cyl+CzgeCysOCzgX474LK24LOB4LKV4LON4LKwfjvgsrbgsqjgsr9+JywgJ+CyteCyvuCysCcpLFxuICBkZGQ6ICBfKCfgsq3gsr7gsqjgs4E74LK44LOL4LKuO+CyruCyguCyl+Cyszvgsqzgs4Hgsqc74LKX4LOB4LKw4LOBO+CytuCzgeCyleCzjeCysDvgsrbgsqjgsr8nKSxcbiAgYW1wbTogXygn4LKq4LOC4LKw4LON4LK14LK+4LK54LON4LKoO+CyheCyquCysOCyvuCyueCzjeCyqCcpXG59LCAna24nKTtcblxuYWRkTG9jYWxlKHtcbiAgZGVjaW1hbDogICcsJyxcbiAgbW1tbTogXygnc2F1c2lvO3Zhc2FyaW87a292bztiYWxhbmTFvmlvO2dlZ3XFvsSXcztiaXLFvmVsaW87bGllcG9zO3J1Z3BqxavEjWlvO3J1Z3PEl2pvO3NwYWxpbztsYXBrcmnEjWlvO2dydW9kxb5pbycpLFxuICBtbW06ICBfKCdzYXVzLjt2YXMuO2tvdi47YmFsLjtnZWcuO2JpcsW+LjtsaWVwLjtydWdwLjtydWdzLjtzcGFsLjtsYXBrci47Z3J1b2QuJyksXG4gIGRkZGQ6IF8oJ3Nla21hZGllbmlzO3Bpcm1hZGllbmlzO2FudHJhZGllbmlzO3RyZcSNaWFkaWVuaXM7a2V0dmlydGFkaWVuaXM7cGVua3RhZGllbmlzO8WhZcWhdGFkaWVuaXMnKSxcbiAgZGRkOiAgXygnc2s7cHI7YW47dHI7a3Q7cG47xaF0JyksXG4gIGFtcG06IF8oJ3ByaWXFoXBpZXQ7cG9waWV0Jylcbn0sICdsdCcpO1xuXG5hZGRMb2NhbGUoe1xuICBkZWNpbWFsOiAgJywnLFxuICBtbW1tOiBfKCdqYW52xIFyaXM7ZmVicnXEgXJpczttYXJ0czthcHLEq2xpczttYWlqcztqxatuaWpzO2rFq2xpanM7YXVndXN0cztzZXB0ZW1icmlzO29rdG9icmlzO25vdmVtYnJpcztkZWNlbWJyaXMnKSxcbiAgbW1tOiAgXygnamFudi47ZmVici47bWFydHM7YXByLjttYWlqcztqxatuLjtqxatsLjthdWcuO3NlcHQuO29rdC47bm92LjtkZWMuJyksXG4gIGRkZGQ6IF8oJ3N2xJN0ZGllbmE7cGlybWRpZW5hO290cmRpZW5hO3RyZcWhZGllbmE7Y2V0dXJ0ZGllbmE7cGlla3RkaWVuYTtzZXN0ZGllbmEnKSxcbiAgZGRkOiAgXygnc3bEk3RkLjtwaXJtZC47b3RyZC47dHJlxaFkLjtjZXR1cnRkLjtwaWVrdGQuO3Nlc3RkLicpLFxuICBhbXBtOiBfKCdwcmlla8WhcHVzZGllbsSBO3DEk2NwdXNkaWVuxIEnKVxufSwgJ2x2Jyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJywnLFxuICBkZWNpbWFsOiAgJy4nLFxuICBtbW1tOiBfKCfgtJzgtKjgtYHgtLXgtLDgtL874LSr4LWG4LSs4LWN4LSw4LWB4LS14LSw4LS/O+C0ruC0vuC1vOC0muC1jeC0muC1jTvgtI/gtKrgtY3gtLDgtL/gtb074LSu4LWH4LSv4LWNO+C0nOC1guC1ujvgtJzgtYLgtLLgtYg74LST4LSX4LS44LWN4LSx4LWN4LSx4LWNO+C0uOC1huC0quC1jeC0seC1jeC0seC0guC0rOC1vDvgtJLgtJXgtY3igIzgtJ/gtYvgtKzgtbw74LSo4LS14LSC4LSs4LW8O+C0oeC0v+C0uOC0guC0rOC1vCcpLFxuICBtbW06ICBfKCfgtJzgtKjgtYE74LSr4LWG4LSs4LWN4LSw4LWBO+C0ruC0vuC1vDvgtI/gtKrgtY3gtLDgtL874LSu4LWH4LSv4LWNO+C0nOC1guC1ujvgtJzgtYLgtLLgtYg74LST4LSXO+C0uOC1huC0quC1jeC0seC1jeC0seC0gjvgtJLgtJXgtY3gtJ/gtYs74LSo4LS14LSCO+C0oeC0v+C0uOC0gicpLFxuICBkZGRkOiBfKCfgtJ7gtL7gtK/gtLHgtL7gtLTgtY3igIzgtJo74LSk4LS/4LSZ4LWN4LSV4LSz4LS+4LS04LWN4oCM4LSaO+C0muC1iuC0teC1jeC0teC0vuC0tOC1jeC0mjvgtKzgtYHgtKfgtKjgtL7gtLTgtY3igIzgtJo74LS14LWN4LSv4LS+4LS04LS+4LS04LWN4oCM4LSaO+C0teC1huC0s+C1jeC0s+C0v+C0r+C0vuC0tOC1jeKAjOC0mjvgtLbgtKjgtL/gtK/gtL7gtLTgtY3igIzgtJonKSxcbiAgZGRkOiAgXygn4LSe4LS+4LSv4LW8O+C0pOC0v+C0meC1jeC0leC1vjvgtJrgtYrgtLXgtY3gtLU74LSs4LWB4LSn4LW7O+C0teC1jeC0r+C0vuC0tOC0gjvgtLXgtYbgtLPgtY3gtLPgtL874LS24LSo4LS/Jylcbn0sICdtbCcpO1xuXG5hZGRMb2NhbGUoe1xuICBncm91cDogICcsJyxcbiAgZGVjaW1hbDogICcuJyxcbiAgbW1tbTogXygn0L3RjdCz0LTSr9Cz0Y3RjX470YXQvtGR0YDQtNGD0LPQsNCwfjvQs9GD0YDQsNCy0LTRg9Cz0LDQsH470LTTqdGA06nQstC00q/Qs9GN0Y1+O9GC0LDQstC00YPQs9Cw0LB+O9C30YPRgNCz0LDQsNC00YPQs9Cw0LB+O9C00L7Qu9C+0L7QtNGD0LPQsNCwfjvQvdCw0LnQvNC00YPQs9Cw0LB+O9C10YHQtNKv0LPRjdGNfjvQsNGA0LDQstC00YPQs9Cw0LB+O9Cw0YDQstCw0L0g0L3RjdCz0LTSr9Cz0Y3RjX470LDRgNCy0LDQvSDRhdC+0ZHRgNC00YPQs9Cw0LB+JywgJ9GAINGB0LDRgCcpLFxuICBtbW06ICBfKCcxfjsyfjszfjs0fjs1fjs2fjs3fjs4fjs5fjsxMH47MTF+OzEyficsICct0YAg0YHQsNGAJyksXG4gIGRkZGQ6IF8oJ9C90Y/QvDvQtNCw0LLQsNCwO9C80Y/Qs9C80LDRgDvQu9GF0LDQs9Cy0LA70L/Sr9GA0Y3QsjvQsdCw0LDRgdCw0L070LHRj9C80LHQsCcpLFxuICBkZGQ6ICBfKCfQndGPO9CU0LA70JzRjzvQm9GFO9Cf0q870JHQsDvQkdGPJyksXG4gIGFtcG06IF8oJ9KvLtOpLjvSry7RhS4nKVxufSwgJ21uJyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJywnLFxuICBkZWNpbWFsOiAgJy4nLFxuICBtbW1tOiBfKCfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYA74KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAO+CkruCkvuCksOCljeCkmjvgpI/gpKrgpY3gpLDgpL/gpLI74KSu4KWHO+CknOClguCkqDvgpJzgpYHgpLLgpYg74KSR4KSX4KS44KWN4KSfO+CkuOCkquCljeCkn+Clh+CkguCkrOCksDvgpJHgpJXgpY3gpJ/gpYvgpKzgpLA74KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwO+CkoeCkv+CkuOClh+CkguCkrOCksCcpLFxuICBtbW06ICBfKCfgpJzgpL7gpKjgpYc74KSr4KWH4KSs4KWN4KSw4KWBO+CkruCkvuCksOCljeCkmjvgpI/gpKrgpY3gpLDgpL874KSu4KWHO+CknOClguCkqDvgpJzgpYHgpLLgpYg74KSR4KSXO+CkuOCkquCljeCkn+Clh+CkgjvgpJHgpJXgpY3gpJ/gpYs74KSo4KWL4KS14KWN4KS54KWH4KSCO+CkoeCkv+CkuOClh+CkgicpLFxuICBkZGRkOiBfKCfgpLDgpLXgpL/gpLXgpL7gpLA74KS44KWL4KSu4KS14KS+4KSwO+CkruCkguCkl+Cks+CkteCkvuCksDvgpKzgpYHgpKfgpLXgpL7gpLA74KSX4KWB4KSw4KWB4KS14KS+4KSwO+CktuClgeCkleCljeCksOCkteCkvuCksDvgpLbgpKjgpL/gpLXgpL7gpLAnKSxcbiAgZGRkOiAgXygn4KSw4KS14KS/O+CkuOCli+CkrjvgpK7gpILgpJfgpLM74KSs4KWB4KSnO+Ckl+ClgeCksOClgTvgpLbgpYHgpJXgpY3gpLA74KS24KSo4KS/Jylcbn0sICdtcicpO1xuXG5hZGRMb2NhbGUoeG0oe1xuICBncm91cDogICcsJyxcbiAgZGVjaW1hbDogICcuJyxcbiAgbW1tbTogXygn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuO+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArjvhgJnhgJDhgLo74YCn4YCV4YC84YCuO+GAmeGAsTvhgIfhgL3hgJThgLo74YCH4YCw4YCc4YCt4YCv4YCE4YC6O+GAqeGAguGAr+GAkOGAujvhgIXhgIDhgLrhgJDhgIThgLrhgJjhgKw74YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsO+GAlOGAreGAr+GAneGAhOGAuuGAmOGArDvhgJLhgK7hgIfhgIThgLrhgJjhgKwnKSxcbiAgbW1tOiAgXygn4YCH4YCU4YC6O+GAluGAsTvhgJnhgJDhgLo74YCnO+GAmeGAsTvhgIfhgL3hgJThgLo74YCH4YCwO+GAqTvhgIXhgIDhgLo74YCh4YCx4YCs4YCA4YC6O+GAlOGAreGArzvhgJLhgK4nKSxcbiAgZGRkZDogXygn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxO+GAkOGAlOGAhOGAuuGAueGAnOGArDvhgKHhgIThgLrhgLnhgILhgKs74YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4O+GAgOGAvOGArOGAnuGAleGAkOGAseGAuDvhgJ7hgLHhgKzhgIDhgLzhgKw74YCF4YCU4YCxJyksXG4gIGFtcG06IF8oJ+GAlOGAtuGAlOGAgOGAujvhgIrhgJThgLEnKVxufSwgLTEsIDApLCAnbXknKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICAnLCcsXG4gIGRlY2ltYWw6ICAnLicsXG4gIG1tbW06IF8oJ+ConOCoqOCoteCosOCpgDvgqKvgqLzgqLDgqLXgqLDgqYA74Kiu4Ki+4Kiw4KiaO+CoheCoquCpjeCosOCpiOCosjvgqK7gqIg74Kic4KmC4KioO+ConOCpgeCosuCovuCoiDvgqIXgqJfgqLjgqKQ74Ki44Kik4Kmw4Kis4KiwO+CoheColeCopOCpguCorOCosDvgqKjgqLXgqbDgqKzgqLA74Kim4Ki44Kmw4Kis4KiwJyksXG4gIG1tbTogIF8oJ+ConOCoqDvgqKvgqLzgqLA74Kiu4Ki+4Kiw4KiaO+CoheCoquCpjeCosOCpiDvgqK7gqIg74Kic4KmC4KioO+ConOCpgeCosuCovjvgqIXgqJc74Ki44Kik4KmwO+CoheColeCopOCpgjvgqKjgqLXgqbA74Kim4Ki44KmwJyksXG4gIGRkZGQ6IF8oJ+CokOCopOCoteCovuCosDvgqLjgqYvgqK7gqLXgqL7gqLA74Kiu4Kmw4KiX4Kiy4Ki14Ki+4KiwO+CorOCpgeCpseCop+CoteCovuCosDvgqLXgqYDgqLDgqLXgqL7gqLA74Ki44Ki84KmB4Kmx4KiV4Kiw4Ki14Ki+4KiwO+CouOCovOCoqOCov+CpseComuCosOCoteCovuCosCcpLFxuICBkZGQ6ICBfKCfgqJDgqKQ74Ki44KmL4KiuO+CoruCpsOCol+CosjvgqKzgqYHgqbHgqKc74Ki14KmA4KiwO+CouOCovOCpgeCpseColeCosDvgqLjgqLzgqKjgqL/gqbHgqJrgqLAnKSxcbiAgYW1wbTogXygn4Kiq4KmCLuCopuCpgS474Kis4Ki+LuCopuCpgS4nKVxufSwgJ3BhJyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJy4nLFxuICBkZWNpbWFsOiAgJywnLFxuICBtbW1tOiBfKCdpYW51YXJpZTtmZWJydWFyaWU7bWFydGllO2FwcmlsaWU7bWFpO2l1bmllO2l1bGllO2F1Z3VzdDtzZXB0ZW1+O29jdG9tfjtub2llbX47ZGVjZW1+JywgJ2JyaWUnKSxcbiAgbW1tOiAgXygnaWFuLjtmZWIuO21hci47YXByLjttYWk7aXVuLjtpdWwuO2F1Zy47c2VwdC47b2N0Ljtub3YuO2RlYy4nKSxcbiAgZGRkZDogXygnZHVtaW5pY8SDO2x1bmk7bWFyyJtpO21pZXJjdXJpO2pvaTt2aW5lcmk7c8OibWLEg3TEgycpLFxuICBkZGQ6ICBfKCdkdW0uO2x1bi47bWFyLjttaWUuO2pvaTt2aW4uO3PDom0uJyksXG4gIGFtcG06IF8oJ2EubS47cC5tLicpXG59LCAncm8nKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICAnLicsXG4gIGRlY2ltYWw6ICAnLCcsXG4gIG1tbW06IF8oJ2phbnVhcjtmZWJydWFyO21hcmVjO2FwcmlsO21hajtqdW5pajtqdWxpajthdmd1c3Q7c2VwdGVtYmVyO29rdG9iZXI7bm92ZW1iZXI7ZGVjZW1iZXInKSxcbiAgbW1tOiAgXygnamFuLjtmZWIuO21hci47YXByLjttYWo7anVuLjtqdWwuO2F2Zy47c2VwLjtva3QuO25vdi47ZGVjLicpLFxuICBkZGRkOiBfKCduZWRlbGphO3BvbmVkZWxqZWs7dG9yZWs7c3JlZGE7xI1ldHJ0ZWs7cGV0ZWs7c29ib3RhJyksXG4gIGFtcG06IF8oJ2RvcC47cG9wLicpXG59LCAtMSwgMTMpLCAnc2wnKTtcblxuYWRkTG9jYWxlKHhtKHtcbiAgZ3JvdXA6ICAnLicsXG4gIGRlY2ltYWw6ICAnLCcsXG4gIG1tbW06IF8oJ9GY0LDQvdGD0LDRgDvRhNC10LHRgNGD0LDRgDvQvNCw0YDRgjvQsNC/0YDQuNC7O9C80LDRmDvRmNGD0L070ZjRg9C7O9Cw0LLQs9GD0YHRgjvRgdC10L/RgtC10LzQsdCw0YA70L7QutGC0L7QsdCw0YA70L3QvtCy0LXQvNCx0LDRgDvQtNC10YbQtdC80LHQsNGAJyksXG4gIGRkZGQ6IF8oJ9C90LXQtNC10ZnQsDvQv9C+0L3QtdC00LXRmdCw0Lo70YPRgtC+0YDQsNC6O9GB0YDQtdC00LA70YfQtdGC0LLRgNGC0LDQujvQv9C10YLQsNC6O9GB0YPQsdC+0YLQsCcpXG59LCAzLCAzKSwgJ3NyJyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAgJywnLFxuICBkZWNpbWFsOiAgJy4nLFxuICBtbW1tOiBfKCfgrpzgrqngrrXgrrDgrr874K6q4K6/4K6q4K+N4K6w4K614K6w4K6/O+CuruCuvuCusOCvjeCumuCvjTvgro/grqrgr43grrDgrrLgr4074K6u4K+HO+CunOCvguCuqeCvjTvgrpzgr4LgrrLgr4g74K6G4K6V4K644K+N4K6f4K+NO+CumuCvhuCuquCvjeCun+CuruCvjeCuquCusOCvjTvgroXgrpXgr43grp/gr4vgrqrgrrDgr4074K6o4K614K6u4K+N4K6q4K6w4K+NO+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScpLFxuICBtbW06ICBfKCfgrpzgrqkuO+CuquCuv+CuquCvjS474K6u4K6+4K6w4K+NLjvgro/grqrgr40uO+CuruCvhzvgrpzgr4Lgrqngr4074K6c4K+C4K6y4K+IO+CuhuCulS474K6a4K+G4K6q4K+NLjvgroXgrpXgr40uO+CuqOCutS474K6f4K6/4K6aLicpLFxuICBkZGRkOiBfKCfgrp7grr7grq/grr/grrHgr4E74K6k4K6/4K6Z4K+N4K6V4K6z4K+NO+CumuCvhuCuteCvjeCuteCuvuCur+CvjTvgrqrgr4HgrqTgrqngr4074K614K6/4K6v4K6+4K604K6p4K+NO+CuteCvhuCus+CvjeCus+Cuvzvgrprgrqngrr8nKSxcbiAgZGRkOiAgXygn4K6e4K6+4K6v4K6/LjvgrqTgrr/grpngr40uO+CumuCvhuCuteCvjS474K6q4K+B4K6kLjvgrrXgrr/grq/grr4uO+CuteCvhuCus+CvjS474K6a4K6p4K6/Jylcbn0sICd0YScpO1xuXG5hZGRMb2NhbGUoe1xuICBncm91cDogICcsJyxcbiAgZGVjaW1hbDogICcuJyxcbiAgbW1tbTogXygn4LCc4LCo4LC14LCw4LC/O+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwvzvgsK7gsL7gsLDgsY3gsJrgsL874LCP4LCq4LGN4LCw4LC/4LCy4LGNO+CwruCxhzvgsJzgsYLgsKjgsY074LCc4LGB4LCy4LGIO+CwhuCwl+CwuOCxjeCwn+CxgTvgsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY074LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNO+CwqOCwteCwguCwrOCwsOCxjTvgsKHgsL/gsLjgsYbgsILgsKzgsLDgsY0nKSxcbiAgbW1tOiAgXygn4LCc4LCoO+Cwq+Cwv+CwrOCxjeCwsDvgsK7gsL7gsLDgsY3gsJrgsL874LCP4LCq4LGN4LCw4LC/O+CwruCxhzvgsJzgsYLgsKjgsY074LCc4LGB4LCy4LGIO+CwhuCwlzvgsLjgsYbgsKrgsY3gsJ/gsYbgsII74LCF4LCV4LGN4LCf4LGLO+CwqOCwteCwgjvgsKHgsL/gsLjgsYbgsIInKSxcbiAgZGRkZDogXygn4LCG4LCm4LC/4LC14LC+4LCw4LCCO+CwuOCxi+CwruCwteCwvuCwsOCwgjvgsK7gsILgsJfgsLPgsLXgsL7gsLDgsII74LCs4LGB4LCn4LC14LC+4LCw4LCCO+Cwl+CxgeCwsOCxgeCwteCwvuCwsOCwgjvgsLbgsYHgsJXgsY3gsLDgsLXgsL7gsLDgsII74LC24LCo4LC/4LC14LC+4LCw4LCCJyksXG4gIGRkZDogIF8oJ+CwhuCwpuCwvzvgsLjgsYvgsK474LCu4LCC4LCX4LCzO+CwrOCxgeCwpzvgsJfgsYHgsLDgsYE74LC24LGB4LCV4LGN4LCwO+CwtuCwqOCwvycpXG59LCAndGUnKTtcblxuYWRkTG9jYWxlKHtcbiAgZGVjaW1hbDogICcsJyxcbiAgbW1tbTogXygn0YHRltGH0L3RjzvQu9GO0YLQvtCz0L470LHQtdGA0LXQt9C90Y870LrQstGW0YLQvdGPO9GC0YDQsNCy0L3RjzvRh9C10YDQstC90Y870LvQuNC/0L3RjzvRgdC10YDQv9C90Y870LLQtdGA0LXRgdC90Y870LbQvtCy0YLQvdGPO9C70LjRgdGC0L7Qv9Cw0LTQsDvQs9GA0YPQtNC90Y8nKSxcbiAgbW1tOiAgXygn0YHRltGHLjvQu9GO0YIuO9Cx0LXRgC470LrQstGW0YIuO9GC0YDQsNCyLjvRh9C10YDQsi470LvQuNC/LjvRgdC10YDQvy470LLQtdGALjvQttC+0LLRgi470LvQuNGB0YIuO9Cz0YDRg9C0LicpLFxuICBkZGRkOiBfKCfQvdC10LTRltC70Y470L/QvtC90LXQtNGW0LvQvtC6O9Cy0ZbQstGC0L7RgNC+0Lo70YHQtdGA0LXQtNGDO9GH0LXRgtCy0LXRgDvQv8q80Y/RgtC90LjRhtGOO9GB0YPQsdC+0YLRgycpLFxuICBkZGQ6ICBfKCfQvdC0O9C/0L070LLRgjvRgdGAO9GH0YI70L/RgjvRgdCxJyksXG4gIGFtcG06IF8oJ9C00L870L/QvycpXG59LCAndWsnKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICAnLicsXG4gIGRlY2ltYWw6ICAnLCcsXG4gIG1tbW06IF8oJ34xO34yO34zO340O341O342O343O344O345O34xMDt+MTE7fjEyJywgJ3Row6FuZyAnKSxcbiAgbW1tOiAgXygnfjE7fjI7fjM7fjQ7fjU7fjY7fjc7fjg7fjk7fjEwO34xMTt+MTInLCAndGhnICcpLFxuICBkZGRkOiBfKCdDaOG7pyBOaOG6rXQ7VGjhu6kgSGFpO1Ro4bupIEJhO1Ro4bupIFTGsDtUaOG7qSBOxINtO1Ro4bupIFPDoXU7VGjhu6kgQuG6o3knKSxcbiAgZGRkOiAgXygnQ047VGggMjtUaCAzO1RoIDQ7VGggNTtUaCA2O1RoIDcnKSxcbiAgYW1wbTogXygnU0E7Q0gnKVxufSwgJ3ZpJyk7XG5cbmFkZExvY2FsZSh4bSh7XG4gIGdyb3VwOiAgJ9msJyxcbiAgZGVjaW1hbDogICfZqycsXG4gIGFtcG06IF8oJ9i1O9mFJyksXG4gIG1tbW06IF8oJ9mK2YbYp9mK2LE72YHYqNix2KfZitixO9mF2KfYsdizO9ij2KjYsdmK2YQ72YXYp9mK2Yg72YrZiNmG2YrZiDvZitmI2YTZitmIO9ij2LrYs9i32LM72LPYqNiq2YXYqNixO9ij2YPYqtmI2KjYsTvZhtmI2YHZhdio2LE72K/Zitiz2YXYqNixJyksXG4gIGRkZGQ6IF8oJ9in2YTYo9it2K872KfZhNin2KvZhtmK2YY72KfZhNir2YTYp9ir2KfYoTvYp9mE2KPYsdio2LnYp9ihO9in2YTYrtmF2YrYszvYp9mE2KzZhdi52Kk72KfZhNiz2KjYqicpLFxuICBtbW1tNjogXygn2LHZhdi22KfZhjvYtNmI2KfZhDvYsNmIINin2YTZgti52K/YqTvYsNmIINin2YTYrdis2Kk72YXYrdix2YU72LHYqNmK2Lkg2KfZhNij2YjZhDvYsdio2YrYuSDYp9mE2KLYrtix2Kk72KzZhdin2K/ZiSDYp9mE2KPZiNmE2Yk72KzZhdin2K/ZiSDYp9mE2KLYrtix2Kk72LHYrNioO9i02LnYqNin2YY72LHZhdi22KfZhicpXG59LCAwLCAwKSwgJ2FyJyk7XG5cbmFkZExvY2FsZSh7XG4gIGdyb3VwOiAnLCcsXG4gIGRlY2ltYWw6ICcuJyxcbiAgbW1tbTogXygn4Kac4Ka+4Kao4KeB4Kav4Ka84Ka+4Kaw4KeAO+Cmq+Cnh+CmrOCnjeCmsOCngeCmr+CmvOCmvuCmsOCngDvgpq7gpr7gprDgp43gppo74KaP4Kaq4KeN4Kaw4Ka/4KayO+CmruCnhzvgppzgp4Hgpqg74Kac4KeB4Kay4Ka+4KaHO+CmhuCml+CmuOCnjeCmnzvgprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprA74KaF4KaV4KeN4Kaf4KeL4Kas4KawO+CmqOCmreCnh+CmruCnjeCmrOCmsDvgpqHgpr/gprjgp4fgpq7gp43gpqzgprAnKSxcbiAgbW1tOiAgXygn4Kac4Ka+4Kao4KeBO+Cmq+Cnh+CmrDvgpq7gpr7gprDgp43gppo74KaP4Kaq4KeN4Kaw4Ka/O+CmruCnhzvgppzgp4Hgpqg74Kac4KeB4KayO+CmhuCmlzvgprjgp4fgpqrgp43gpp/gp4fgpoM74KaF4KaV4KeN4Kaf4KeL4KaDO+CmqOCmreCnh+CmgzvgpqHgpr/gprjgp4fgpoMnKSxcbiAgZGRkZDogXygn4Kaw4Kas4Ka/4Kas4Ka+4KawO+CmuOCni+CmruCmrOCmvuCmsDvgpq7gppngp43gppfgprLgpqzgpr7gprA74Kas4KeB4Kan4Kas4Ka+4KawO+CmrOCng+CmueCmuOCnjeCmquCmpOCmv+CmrOCmvuCmsDvgprbgp4HgppXgp43gprDgpqzgpr7gprA74Ka24Kao4Ka/4Kas4Ka+4KawJyksXG4gIGRkZDogIF8oJ+CmsOCmrOCmvzvgprjgp4vgpq474Kau4KaZ4KeN4KaX4KayO+CmrOCngeCmpzvgpqzgp4Pgprngprjgp43gpqrgpqTgpr874Ka24KeB4KaV4KeN4KawO+CmtuCmqOCmvycpXG59LCAnYm4nKTtcblxuYWRkTG9jYWxlKHtcbiAgZ3JvdXA6ICAnLCcsXG4gIGRlY2ltYWw6ICAnLicsXG4gIG1tbW06IF8oJ+CknOCkqOCkteCksOClgDvgpKvgpLzgpLDgpLXgpLDgpYA74KSu4KS+4KSw4KWN4KSaO+CkheCkquCljeCksOCliOCksjvgpK7gpIg74KSc4KWC4KSoO+CknOClgeCksuCkvuCkiDvgpIXgpJfgpLjgpY3gpKQ74KS44KS/4KSk4KSC4KSs4KSwO+CkheCkleCljeCkpOClguCkrOCksDvgpKjgpLXgpILgpKzgpLA74KSm4KS/4KS44KSC4KSs4KSwJyksXG4gIG1tbTogIF8oJ+CknOCkqOClsDvgpKvgpLzgpLDgpbA74KSu4KS+4KSw4KWN4KSaO+CkheCkquCljeCksOCliOCksjvgpK7gpIg74KSc4KWC4KSoO+CknOClgeCksuClsDvgpIXgpJfgpbA74KS44KS/4KSk4KWwO+CkheCkleCljeCkpOClguClsDvgpKjgpLXgpbA74KSm4KS/4KS44KWwJyksXG4gIGRkZGQ6IF8oJ+CksOCkteCkv+CkteCkvuCksDvgpLjgpYvgpK7gpLXgpL7gpLA74KSu4KSC4KSX4KSy4KS14KS+4KSwO+CkrOClgeCkp+CkteCkvuCksDvgpJfgpYHgpLDgpYHgpLXgpL7gpLA74KS24KWB4KSV4KWN4KSw4KS14KS+4KSwO+CktuCkqOCkv+CkteCkvuCksCcpLFxuICBkZGQ6ICBfKCfgpLDgpLXgpL874KS44KWL4KSuO+CkruCkguCkl+CksjvgpKzgpYHgpKc74KSX4KWB4KSw4KWBO+CktuClgeCkleCljeCksDvgpLbgpKjgpL8nKSxcbiAgYW1wbTogXygnYW07cG0nKVxufSwgJ2hpJyk7XG5cbiIsImV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgLy8gT3ZlcmZsb3cgZXJyb3Igc3RyaW5nXG4gIG92ZXJmbG93OiAnIyMjIyMjJywgLy8gZGF0ZUVycm9yVGhyb3cgbmVlZHMgdG8gYmUgb2ZmISBbcHJldiBpbiBsb2NhbGVdXG4gIC8vIFNob3VsZCBpdCB0aHJvdyB3aGVuIHRoZXJlIGlzIGFuIG92ZXJmbG93IGVycm9yP1xuICBkYXRlRXJyb3JUaHJvd3M6IGZhbHNlLFxuICAvLyBTaG91bGQgaXQgZW1pdCBhIG51bWJlciB3aGVuIGRhdGUgaGFzIGFuIG92ZXJmbG93IGVycm9yPyAoU2hlZXRzIGRvZXMgdGhpcylcbiAgZGF0ZUVycm9yTnVtYmVyOiB0cnVlLCAvLyBkYXRlRXJyb3JUaHJvdyBuZWVkcyB0byBiZSBvZmYhXG4gIC8vIFNob3VsZCBpdCBlbWl0IGEgbnVtYmVyIHdoZW4gYmlnaW50IGhhcyBhbiBpcyBhbiBvdmVyZmxvdyBlcnJvcj9cbiAgYmlnaW50RXJyb3JOdW1iZXI6IGZhbHNlLFxuICAvLyBTaGVldHMgbW9kZSAoc2VlICMzKVxuICBkYXRlU3BhbkxhcmdlOiB0cnVlLFxuICAvLyBTaW11bGF0ZSB0aGUgTG90dXMgMS0yLTMgbGVhcCB5ZWFyIGJ1Z1xuICBsZWFwMTkwMDogdHJ1ZSxcbiAgLy8gRW1pdCByZWd1bGFyIHZzLiBub24tYnJlYWtpbmcgc3BhY2VzXG4gIG5ic3A6IGZhbHNlLFxuICAvLyBSb2J1c3QvdGhyb3cgbW9kZVxuICB0aHJvd3M6IHRydWUsXG4gIC8vIFdoYXQgaXMgZW1pdHRlZCB3aGVuIHJvYnVzdCBtb2RlIGZhaWxzIHRvIHBhcnNlICgjIyMjIyMgY3VycmVudGx5KVxuICBpbnZhbGlkOiAnIyMjIyMjJyxcbiAgLy8gTG9jYWxlXG4gIGxvY2FsZTogJycsXG4gIC8vIERvbid0IGFkanVzdCBkYXRlcyB0byBVVEMgd2hlbiBjb252ZXJ0aW5nIHRoZW0gdG8gc2VyaWFsIHRpbWVcbiAgaWdub3JlVGltZXpvbmU6IGZhbHNlLFxuICAvLyBJbnRlZ2VyIGRpZ2l0IGdyb3VwaW5nXG4gIGdyb3VwaW5nOiBbIDMsIDMgXSxcbiAgLy8gcmVzb2x2ZSBpbmRleGVkIGNvbG9ycyB0byBoZXhcbiAgaW5kZXhDb2xvcnM6IHRydWUsXG4gIC8vIFNraXAtbmV4dCBzaWduaWZpZXIgY2hhcmFjdGVyXG4gIHNraXBDaGFyOiAnJyxcbiAgLy8gUmVwZWFyLW5leHQgc2lnbmlmaWVyIGNoYXJhY3RlclxuICByZXBlYXRDaGFyOiAnJ1xufTtcbiIsIi8qKlxuICogUmV0dXJuIGEgbnVtYmVyIHJvdW5kZWQgdG8gdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgcGxhY2VzLiBUaGlzIGlzIHRoZVxuICogcm91bmRpbmcgZnVuY3Rpb24gdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBmb3JtYXR0ZXIgKHN5bW1ldHJpYyBhcml0aG1ldGljXG4gKiByb3VuZGluZykuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciAtIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gKiBAcGFyYW0ge251bWJlcn0gW3BsYWNlcz0wXSAtIFRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdG8gcm91bmQgdG8uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJvdW5kZWQgbnVtYmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmQgKG51bWJlciwgcGxhY2VzID0gMCkge1xuICBpZiAodHlwZW9mIG51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGlmIChudW1iZXIgPCAwKSB7XG4gICAgcmV0dXJuIC1yb3VuZCgtbnVtYmVyLCBwbGFjZXMpO1xuICB9XG4gIGlmIChwbGFjZXMpIHtcbiAgICBjb25zdCBwID0gMTAgKiogKHBsYWNlcykgfHwgMTtcbiAgICByZXR1cm4gcm91bmQobnVtYmVyICogcCwgMCkgLyBwO1xuICB9XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG59XG4iLCIvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMTA4MTMwNDI2MzYvaHR0cDovL2hvbWVwYWdlLnNtYy5lZHUva2VubmVkeV9qb2huL0RFQzJGUkFDLlBERlxuY29uc3QgUFJFQ0lTSU9OID0gMWUtMTM7XG5cbi8qKlxuICogU3BsaXQgYSBmcmFjdGlvbmFsIG51bWJlciBpbnRvIGEgbnVtZXJhdG9yIGFuZCBkZW5vbWluYXRvciBmb3IgZGlzcGxheSBhc1xuICogdnVsZ2FyIGZyYWN0aW9ucy5cbiAqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSB2YWx1ZSB0byBzcGxpdFxuICogQHBhcmFtIHtudW1iZXJ9IFtudW1lcmF0b3JNYXhEaWdpdHM9Ml0gVGhlIG1heGRpZ2l0cyBudW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZGVub21pbmF0b3JNYXhEaWdpdHM9Ml0gVGhlIG1heGRpZ2l0cyBkZVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IEFycmF5IG9mIHR3byBudW1iZXJzLCBudW1lcmF0b3IgYW5kIGRlbm9taW5hdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjMmZyYWMgKG51bWJlciwgbnVtZXJhdG9yTWF4RGlnaXRzID0gMiwgZGVub21pbmF0b3JNYXhEaWdpdHMgPSAyKSB7XG4gIGNvbnN0IHNpZ24gPSAobnVtYmVyIDwgMCkgPyAtMSA6IDE7XG4gIGNvbnN0IG1heGRpZ2l0c19uID0gMTAgKiogKG51bWVyYXRvck1heERpZ2l0cyB8fCAyKTtcbiAgY29uc3QgbWF4ZGlnaXRzX2QgPSAxMCAqKiAoZGVub21pbmF0b3JNYXhEaWdpdHMgfHwgMik7XG4gIGxldCB6ID0gTWF0aC5hYnMobnVtYmVyKTtcbiAgbGV0IGxhc3RfZCA9IDA7XG4gIGxldCBsYXN0X24gPSAwO1xuICBsZXQgY3Vycl9uID0gMDtcbiAgbGV0IGN1cnJfZCA9IDE7XG4gIGxldCB0bXA7XG4gIGxldCByO1xuICBudW1iZXIgPSB6O1xuICBpZiAobnVtYmVyICUgMSA9PT0gMCkge1xuICAgIC8vIGhhbmRsZXMgZXhhY3QgaW50ZWdlcnMgaW5jbHVkaW5nIDBcbiAgICByID0gWyBudW1iZXIgKiBzaWduLCAxIF07XG4gIH1cbiAgZWxzZSBpZiAobnVtYmVyIDwgMWUtMTkpIHtcbiAgICByID0gWyBzaWduLCAxZSsxOSBdO1xuICB9XG4gIGVsc2UgaWYgKG51bWJlciA+IDFlKzE5KSB7XG4gICAgciA9IFsgMWUrMTkgKiBzaWduLCAxIF07XG4gIH1cbiAgZWxzZSB7XG4gICAgZG8ge1xuICAgICAgeiA9IDEgLyAoeiAtIE1hdGguZmxvb3IoeikpO1xuICAgICAgdG1wID0gY3Vycl9kO1xuICAgICAgY3Vycl9kID0gKGN1cnJfZCAqIE1hdGguZmxvb3IoeikpICsgbGFzdF9kO1xuICAgICAgbGFzdF9kID0gdG1wO1xuICAgICAgbGFzdF9uID0gY3Vycl9uO1xuICAgICAgY3Vycl9uID0gTWF0aC5mbG9vcihudW1iZXIgKiBjdXJyX2QgKyAwLjUpOyAvLyByb3VuZFxuICAgICAgaWYgKGN1cnJfbiA+PSBtYXhkaWdpdHNfbiB8fCBjdXJyX2QgPj0gbWF4ZGlnaXRzX2QpIHtcbiAgICAgICAgcmV0dXJuIFsgc2lnbiAqIGxhc3RfbiwgbGFzdF9kIF07XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChNYXRoLmFicyhudW1iZXIgLSAoY3Vycl9uIC8gY3Vycl9kKSkgPj0gUFJFQ0lTSU9OICYmIHogIT09IE1hdGguZmxvb3IoeikpO1xuICAgIHIgPSBbIHNpZ24gKiBjdXJyX24sIGN1cnJfZCBdO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwiaW1wb3J0IHsgRVBPQ0hfMTMxNywgRVBPQ0hfMTkwNCB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gaHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzI3NTAvRXhjZWwtU2VyaWFsLURhdGUtdG8tRGF5LU1vbnRoLVllYXItYW5kLVZpY2UtVmVyc2FcbmV4cG9ydCBmdW5jdGlvbiB0b1lNRF8xOTAwIChvcmQsIGxlYXAxOTAwID0gdHJ1ZSkge1xuICBpZiAobGVhcDE5MDAgJiYgb3JkID49IDApIHtcbiAgICBpZiAob3JkID09PSAwKSB7XG4gICAgICByZXR1cm4gWyAxOTAwLCAxLCAwIF07XG4gICAgfVxuICAgIGlmIChvcmQgPT09IDYwKSB7XG4gICAgICByZXR1cm4gWyAxOTAwLCAyLCAyOSBdO1xuICAgIH1cbiAgICBpZiAob3JkIDwgNjApIHtcbiAgICAgIHJldHVybiBbIDE5MDAsIChvcmQgPCAzMiA/IDEgOiAyKSwgKChvcmQgLSAxKSAlIDMxKSArIDEgXTtcbiAgICB9XG4gIH1cbiAgbGV0IGwgPSBvcmQgKyA2ODU2OSArIDI0MTUwMTk7XG4gIGNvbnN0IG4gPSBmbG9vcigoNCAqIGwpIC8gMTQ2MDk3KTtcbiAgbCA9IGwgLSBmbG9vcigoMTQ2MDk3ICogbiArIDMpIC8gNCk7XG4gIGNvbnN0IGkgPSBmbG9vcigoNDAwMCAqIChsICsgMSkpIC8gMTQ2MTAwMSk7XG4gIGwgPSBsIC0gZmxvb3IoKDE0NjEgKiBpKSAvIDQpICsgMzE7XG4gIGNvbnN0IGogPSBmbG9vcigoODAgKiBsKSAvIDI0NDcpO1xuICBjb25zdCBuRGF5ID0gbCAtIGZsb29yKCgyNDQ3ICogaikgLyA4MCk7XG4gIGwgPSBmbG9vcihqIC8gMTEpO1xuICBjb25zdCBuTW9udGggPSBqICsgMiAtICgxMiAqIGwpO1xuICBjb25zdCBuWWVhciA9IDEwMCAqIChuIC0gNDkpICsgaSArIGw7XG4gIHJldHVybiBbIG5ZZWFyIHwgMCwgbk1vbnRoIHwgMCwgbkRheSB8IDAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvWU1EXzE5MDQgKG9yZCkge1xuICByZXR1cm4gdG9ZTURfMTkwMChvcmQgKyAxNDYyKTtcbn1cblxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDgwMjA5MTczODU4L2h0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vZ2xvYmFsZGV2L0RySW50bC9jb2x1bW5zLzAwMi9kZWZhdWx0Lm1zcHhcbi8vID4gW2FsZ29yaXRobV0gaXMgdXNlZCBpbiBtYW55IE1pY3Jvc29mdCBwcm9kdWN0cywgaW5jbHVkaW5nIGFsbFxuLy8gPiBvcGVyYXRpbmcgc3lzdGVtcyB0aGF0IHN1cHBvcnQgQXJhYmljIGxvY2FsZXMsIE1pY3Jvc29mdCBPZmZpY2UsXG4vLyA+IENPTSwgVmlzdWFsIEJhc2ljLCBWQkEsIGFuZCBTUUwgU2VydmVyIDIwMDAuXG5leHBvcnQgZnVuY3Rpb24gdG9ZTURfMTMxNyAob3JkKSB7XG4gIGlmIChvcmQgPT09IDYwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcjVkFMVUUhJyk7XG4gIH1cbiAgaWYgKG9yZCA8PSAxKSB7XG4gICAgcmV0dXJuIFsgMTMxNywgOCwgMjkgXTtcbiAgfVxuICBpZiAob3JkIDwgNjApIHtcbiAgICByZXR1cm4gWyAxMzE3LCAob3JkIDwgMzIgPyA5IDogMTApLCAxICsgKChvcmQgLSAyKSAlIDMwKSBdO1xuICB9XG4gIGNvbnN0IHkgPSAxMDYzMSAvIDMwO1xuICBjb25zdCBzaGlmdDEgPSA4LjAxIC8gNjA7XG4gIGxldCB6ID0gb3JkICsgNDY2OTM1O1xuICBjb25zdCBjeWMgPSBmbG9vcih6IC8gMTA2MzEpO1xuICB6ID0geiAtIDEwNjMxICogY3ljO1xuICBjb25zdCBqID0gZmxvb3IoKHogLSBzaGlmdDEpIC8geSk7XG4gIHogPSB6IC0gZmxvb3IoaiAqIHkgKyBzaGlmdDEpO1xuICBjb25zdCBtID0gZmxvb3IoKHogKyAyOC41MDAxKSAvIDI5LjUpO1xuICBpZiAobSA9PT0gMTMpIHtcbiAgICByZXR1cm4gWyAzMCAqIGN5YyArIGosIDEyLCAzMCBdO1xuICB9XG4gIHJldHVybiBbIDMwICogY3ljICsgaiwgbSwgeiAtIGZsb29yKDI5LjUwMDEgKiBtIC0gMjkpIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1lNRCAob3JkLCBzeXN0ZW0gPSAwLCBsZWFwMTkwMCA9IHRydWUpIHtcbiAgY29uc3QgaW50ID0gZmxvb3Iob3JkKTtcbiAgaWYgKHN5c3RlbSA9PT0gRVBPQ0hfMTMxNykge1xuICAgIHJldHVybiB0b1lNRF8xMzE3KGludCk7XG4gIH1cbiAgaWYgKHN5c3RlbSA9PT0gRVBPQ0hfMTkwNCkge1xuICAgIHJldHVybiB0b1lNRF8xOTA0KGludCk7XG4gIH1cbiAgcmV0dXJuIHRvWU1EXzE5MDAoaW50LCBsZWFwMTkwMCk7XG59XG4iLCJpbXBvcnQgeyB0b1lNRCB9IGZyb20gJy4vdG9ZTUQuanMnO1xuY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuY29uc3QgREFZU0laRSA9IDg2NDAwO1xuXG4vKipcbiAqIENvbnZlcnQgYSBuYXRpdmUgSmF2YVNjcmlwdCBEYXRlLCBvciBhcnJheSB0byBhbiBzcHJlYWRzaGVldCBzZXJpYWwgZGF0ZS5cbiAqXG4gKiBSZXR1cm5zIGEgc2VyaWFsIGRhdGUgbnVtYmVyIGlmIGlucHV0IHdhcyBhIERhdGUgb2JqZWN0IG9yIGFuIGFycmF5IG9mXG4gKiBudW1iZXJzLCBhIG51bGwuXG4gKlxuICogYGBganNcbiAqIC8vIGlucHV0IGFzIERhdGVcbiAqIGRhdGVUb1NlcmlhbChuZXcgRGF0ZSgxOTc4LCA1LCAxNykpOyAvLyAyODYyN1xuICogLy8gaW5wdXQgYXMgWyBZLCBNLCBELCBoLCBtLCBzIF1cbiAqIGRhdGVUb1NlcmlhbChbIDE5NzgsIDUsIDE3IF0pOyAvLyAyODYyN1xuICogLy8gb3RoZXIgaW5wdXRcbiAqIGRhdGVUb1NlcmlhbChcInNvbWV0aGluZyBlbHNlXCIpOyAvLyBudWxsXG4gKiBgYGBgXG4gKlxuICogQHBhcmFtIHtEYXRlIHwgQXJyYXk8bnVtYmVyPn0gZGF0ZSBUaGUgZGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pZ25vcmVUaW1lem9uZT1mYWxzZV1cbiAqICAgTm9ybWFsbHkgdGltZSB6b25lIHdpbGwgYmUgdGFrZW4gaW50byBhY2NvdW50LiBUaGlzIG1ha2VzIHRoZSBjb252ZXJzaW9uIHRvXG4gKiAgIHNlcmlhbCBkYXRlIGlnbm9yZSB0aGUgdGltZXpvbmUgb2Zmc2V0LlxuICogQHJldHVybnMge251bWJlciB8IG51bGx9IFRoZSBkYXRlIGFzIGEgc3ByZWFkc2hlZXQgc2VyaWFsIGRhdGUsIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9TZXJpYWwgKGRhdGUsIG9wdGlvbnMpIHtcbiAgbGV0IHRzID0gbnVsbDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZSkpIHtcbiAgICBjb25zdCBbIHksIG0sIGQsIGhoLCBtbSwgc3MgXSA9IGRhdGU7XG4gICAgdHMgPSBEYXRlLlVUQyh5LCBtID09IG51bGwgPyAwIDogbSAtIDEsIGQgPz8gMSwgaGggfHwgMCwgbW0gfHwgMCwgc3MgfHwgMCk7XG4gIH1cbiAgLy8gZGF0ZXMgYXJlIGNoYW5nZWQgdG8gc2VyaWFsXG4gIGVsc2UgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgdHMgPSBkYXRlICogMTtcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuaWdub3JlVGltZXpvbmUpIHtcbiAgICAgIC8vIE1hbnkgdGltZXpvbmVzIGFyZSBvZmZzZXQgaW4gc2Vjb25kcyBidXQgZ2V0VGltZXpvbmVPZmZzZXQoKSByZXR1cm5zXG4gICAgICAvLyB0aW1lIFwicm91bmRlZFwiIHRvIG1pbnV0ZXMgc28gaXQgaXMgYmFzaWNhbGx5IHVzYWJsZS4g8J+Yv1xuICAgICAgY29uc3QgZHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgZHQuc2V0VVRDRnVsbFllYXIoXG4gICAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgZGF0ZS5nZXRNb250aCgpLFxuICAgICAgICBkYXRlLmdldERhdGUoKVxuICAgICAgKTtcbiAgICAgIGR0LnNldFVUQ0hvdXJzKFxuICAgICAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKVxuICAgICAgKTtcbiAgICAgIC8vIHRpbWVzdGFtcFxuICAgICAgdHMgPSBkdCAqIDE7XG4gICAgfVxuICB9XG4gIGlmICh0cyAhPSBudWxsICYmIGlzRmluaXRlKHRzKSkge1xuICAgIGNvbnN0IGQgPSAodHMgLyA4NjRlNSk7XG4gICAgcmV0dXJuIGQgLSAoZCA8PSAtMjU1MDkgPyAtMjU1NjggOiAtMjU1NjkpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBzcHJlYWRzaGVldCBzZXJpYWwgZGF0ZSB0byBhbiBhcnJheSBvZiBkYXRlIHBhcnRzLlxuICogQWNjdXJhdGUgdG8gYSBzZWNvbmQuXG4gKlxuICogYGBganNcbiAqIC8vIG91dHB1dCBhcyBbIFksIE0sIEQsIGgsIG0sIHMgXVxuICogZGF0ZUZyb21TZXJpYWwoMjg2MjcpOyAvLyBbIDE5NzgsIDUsIDE3LCAwLCAwLCAwIF1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc2VyaWFsRGF0ZSBUaGUgZGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFwMTkwMD10cnVlXVxuICogICBTaW11bGF0ZSB0aGUgTG90dXMgMS0yLTMgWzE5MDAgbGVhcCB5ZWFyIGJ1Z10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb2ZmaWNlL3Ryb3VibGVzaG9vdC9leGNlbC93cm9uZ2x5LWFzc3VtZXMtMTkwMC1pcy1sZWFwLXllYXIpLlxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IHJldHVybnMgYW4gYXJyYXkgb2YgZGF0ZSBwYXJ0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0ZUZyb21TZXJpYWwgKHNlcmlhbERhdGUsIG9wdGlvbnMpIHtcbiAgbGV0IGRhdGUgPSAoc2VyaWFsRGF0ZSB8IDApO1xuICBjb25zdCB0ID0gREFZU0laRSAqIChzZXJpYWxEYXRlIC0gZGF0ZSk7XG4gIGxldCB0aW1lID0gZmxvb3IodCk7IC8vIGluIHNlY29uZHNcbiAgLy8gZGF0ZSBcImVwc2lsb25cIiBjb3JyZWN0aW9uXG4gIGlmICgodCAtIHRpbWUpID4gMC45OTk5KSB7XG4gICAgdGltZSArPSAxO1xuICAgIGlmICh0aW1lID09PSBEQVlTSVpFKSB7XG4gICAgICB0aW1lID0gMDtcbiAgICAgIGRhdGUgKz0gMTtcbiAgICB9XG4gIH1cbiAgLy8gc2VyaWFsIGRhdGUvdGltZSB0byBncmVnb3JpYW4gY2FsZW5kYXJcbiAgY29uc3QgeCA9ICh0aW1lIDwgMCkgPyBEQVlTSVpFICsgdGltZSA6IHRpbWU7XG4gIGNvbnN0IFsgeSwgbSwgZCBdID0gdG9ZTUQoc2VyaWFsRGF0ZSwgMCwgb3B0aW9ucyAmJiBvcHRpb25zLmxlYXAxOTAwKTtcbiAgY29uc3QgaGggPSBmbG9vcigoeCAvIDYwKSAvIDYwKSAlIDYwO1xuICBjb25zdCBtbSA9IGZsb29yKHggLyA2MCkgJSA2MDtcbiAgY29uc3Qgc3MgPSBmbG9vcih4KSAlIDYwO1xuICAvLyByZXR1cm4gdGhlIHBhcnRzXG4gIHJldHVybiBbIHksIG0sIGQsIGhoLCBtbSwgc3MgXTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGFycmF5LWVsZW1lbnQtbmV3bGluZSAqL1xuaW1wb3J0IHsgY3VycmVuY3lTeW1ib2xzLCByZUN1cnJlbmN5U3ltYm9scyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGUsIGdldExvY2FsZSB9IGZyb20gJy4vbG9jYWxlLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQYXJzZURhdGFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgYm9vbGVhbn0gdiAtIHRoZSB2YWx1ZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt6XSAtIG51bWJlciBmb3JtYXQgcGF0dGVyblxuICovXG5cbi8qXG5UaGlzIGlzIGEgbGlzdCBvZiB0aGUgYWxsb3dlZCBkYXRlIGZvcm1hdHMuIFRoZSB0ZXN0IGZpbGUgY29udGFpbnNcbnRoZSBmdWxsIGxpc3Qgb2YgcGVybXVhdGlvbnMgYW5kIHRoZSByZXN1bHRpbmcgdmFsdWVzIGFuZCBmb3JtYXRzLlxuXG5MZWdlbmQ6XG4gIFwiLVwiIC0gRGF0ZSBzZXBhcmF0b3IgKGFueSBvZiBcIi9cIiB8IFwiLVwiIHwgXCIgXCIgfCBcIi5cIuKBvcK54oG+IHwgXCIsIFwi4oG9wrLigb4pXG4gIFwiIFwiIC0gV2hpdGVzcGFjZVxuICBcImpcIiAtIERheSB3aXRob3V0IGxlYWRpbmcgemVybyAoMS0zMSlcbiAgXCJkXCIgLSBEYXkgd2l0aCBsZWFkaW5nIHplcm8gKDAwLTMxKVxuICBcIkRcIiAtIEFiYnJldmlhdGVkIGRheSBuYW1lIChcIlN1blwiLVwiU2F0XCIpXG4gIFwibFwiIC0gRnVsbCBkYXkgbmFtZSAoXCJTdW5kYXlcIi1cIlNhdHVyZGF5XCIpXG4gIFwiblwiIC0gTW9udGggd2l0aG91dCBsZWFkaW5nIHplcm8gKDEtMTIpXG4gIFwibVwiIC0gTW9udGggd2l0aCBsZWFkaW5nIHplcm8gKDAxLTEyKVxuICBcIkZcIiAtIEZ1bGwgbW9udGggbmFtZSAoXCJKYW51YXJ5XCItXCJEZWNlbWJlclwiKVxuICBcIk1cIiAtIEFiYnJldmlhdGVkIG1vbnRoIG5hbWUgKFwiSmFuXCItXCJEZWNcIilcbiAgXCJ5XCIgLSBZZWFyIHdpdGhvdXQgY2VudHVyeSAoMDAtOTkpXG4gIFwiWVwiIC0gWWVhciBvZiBvdXIgbG9yZCAoMTkwMC05OTk5KVxuICBcInhcIiAtIFRpbWUgb2YgZGF5IChhbGwgZm9ybWF0czogXCIxMCBQTVwiLCBcIjEwOjExOjEyXCIsIC4uLilcbiAgXCIhXCIgLSBPbmx5IHVzZSBpbiBcImRhdGUtZmlyc3RcIiBsb2NhbGVzOiA0LjIuMjAwMCA9IDQgZmViLlxuICBcIj9cIiAtIE9ubHkgdXNlIGluIFwibW9udGgtZmlyc3RcIiBsb2NhbGVzOiAyLjQuMjAwMCA9IDQgZmViLlxuXG7CuSBPbmx5IGNvbnNpZGVyZWQgdmFsaWQgaWYgdGhlcmUgYXJlIHRocmVlIG9yIG1vcmUgc2VjdGlvbnMgdG8gdGhlIGRhdGUuXG7CsiBDb21tYSBpcyBvbmx5IGFsbG93ZWQgaWYgZm9sbG93ZWQgYnkgYSBzcGFjZS5cblxuVGltZSBpcyBhcHBlbmRlZCB0byBlYWNoIG9mIHRoZXNlIGFzIHRoZXkgYXJlIGluc2VydGVkIGludG8gdGhlXG5jb2xsZWN0aW9uIG9mIHZhbGlkIGRhdGVzIGJlbG93LlxuKi9cbmNvbnN0IG9rRGF0ZUZvcm1hdHMgPSBbXG4gIC8vIGRheS1tb250aC15ZWFyXG4gICchZC1tLXknLCAnIWQtbS1ZJywgJyFqLW0teScsICchai1tLVknLFxuICAnIWQtbi15JywgJyFkLW4tWScsICchai1uLXknLCAnIWotbi1ZJyxcbiAgLy8gbW9udGgtZGF5LXllYXJcbiAgJz9tLWQteScsICc/bS1kLVknLCAnP20tai15JywgJz9tLWotWScsXG4gICc/bi1kLXknLCAnP24tZC1ZJywgJz9uLWoteScsICc/bi1qLVknLFxuICAvLyB1bmFiXG4gICdkLU0teScsICdkLU0tWScsICdqLU0teScsICdqLU0tWScsXG4gICdNLWQteScsICdNLWQtWScsICdNLWoteScsICdNLWotWScsXG4gICdkLUYteScsICdkLUYtWScsICdGLWQteScsICdGLWQtWScsXG4gICdGLWoteScsICdGLWotWScsICdqLUYteScsICdqLUYtWScsXG4gICd5LUYtZCcsICd5LUYtaicsICd5LU0tZCcsICd5LU0taicsXG4gICdZLUYtZCcsICdZLUYtaicsICdZLU0tZCcsICdZLW0tZCcsXG4gICdZLU0taicsICdZLW0taicsICdZLW4tZCcsICdZLW4taicsXG4gICdqLUYnLCAvLyAyLUFwcmlsXG4gICdqLU0nLCAvLyAyLUFwclxuICAnZC1GJywgLy8gMDItQXByaWxcbiAgJ2QtTScsIC8vIDAyLUFwclxuICAnbi1kJywgLy8gNC0wMlxuICAnbi1qJywgLy8gNC0yXG4gICduLVknLCAvLyA0LTE5MDhcbiAgJ20tZCcsIC8vIDA0LTAyXG4gICdtLWonLCAvLyAwNC0yXG4gICdtLVknLCAvLyAwNC0xOTA4XG4gICdNLVknLCAvLyBBcHItMTkwOFxuICAnTS15JywgLy8gQXByLTA4XG4gICdGLXknLCAvLyBBcHJpbC0wOFxuICAnRi1ZJywgLy8gQXByaWwtMTkwOFxuICAnWS1NJywgLy8gMTkwOC1BcHJcbiAgJ1ktbicsIC8vIDE5MDgtNFxuICAnWS1tJywgLy8gMTkwOC0wNFxuICAnWS1GJywgLy8gMTkwOC1BcHJpbFxuICAnWS1NJyAgLy8gMTkwOC1BcHJcbl07XG5cbi8vIGxldHRlciB0byBleGNlbFxuY29uc3QgdHgwID0geyBqOiAnZCcsIGQ6ICdkJywgRDogJ2RkZCcsIGw6ICdkZGRkJywgbjogJ20nLCBtOiAnbScsIE06ICdtbW0nLCBGOiAnbW1tbScsIHk6ICd5eScsIFk6ICd5eXl5JyB9O1xuY29uc3QgdHgwMCA9IHsgajogJ2RkJywgZDogJ2RkJywgRDogJ2RkZCcsIGw6ICdkZGRkJywgbjogJ21tJywgbTogJ21tJywgTTogJ21tbScsIEY6ICdtbW1tJywgeTogJ3l5JywgWTogJ3l5eXknIH07XG5cbi8vIGRhdGUgZm9ybWF0cyBhcmUgc3RvcmVkIGFzIGEgdG9rZW4tdHJlZSBpbiBhIHRyaWVcbi8vIGZvciBtaW5pbWFsIGxvb3BpbmcgYW5kIGJyYW5jaGluZyB3aGlsZSBwYXJzaW5nXG5jb25zdCBkYXRlVHJpZURNID0ge307XG5jb25zdCBkYXRlVHJpZU1EID0ge307XG5mdW5jdGlvbiBwYWNrRGF0ZSAoZiwgbm9kZSwgYWxsb3dUeXBlID0gMSkge1xuICBpZiAoZikge1xuICAgIGNvbnN0IGNoYXIgPSBmWzBdO1xuICAgIGNvbnN0IG5leHQgPSBmLnNsaWNlKDEpO1xuICAgIGlmIChjaGFyID09PSAnIScpIHtcbiAgICAgIHBhY2tEYXRlKG5leHQsIG5vZGUsIDQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGFyID09PSAnPycpIHtcbiAgICAgIHBhY2tEYXRlKG5leHQsIG5vZGUsIDIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG5vZGVbY2hhcl0gPSBub2RlW2NoYXJdIHx8IHt9O1xuICAgICAgcGFja0RhdGUobmV4dCwgbm9kZVtjaGFyXSwgYWxsb3dUeXBlKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgbm9kZS4kID0gYWxsb3dUeXBlO1xuICB9XG59XG5mdW5jdGlvbiBhZGRGb3JtYXRUb1RyaWUgKGZtdCwgdHJpZSkge1xuICAvLyBhZGQgZGF0ZSB0byB0b2tlbiB0cmVlXG4gIHBhY2tEYXRlKGZtdCwgdHJpZSk7XG4gIC8vIGFkZCBhIHZhcmlhbnQgb2YgdGhlIGRhdGUgd2l0aCB0aW1lIHN1ZmZpeGVkXG4gIC8vIEV4Y2VsIGFsbG93cyB0aW1lIGZpcnN0LCBidXQgU2hlZXRzIGFuZCBHUklEIGRvIG5vdFxuICBwYWNrRGF0ZShmbXQgKyAnIHgnLCB0cmllKTtcbiAgLy8gYWRkIGEgdmFyaWFudCBvZiB0aGUgZGF0ZSB3aXRoIHdlZWtkYXlzIHByZS0vc3VmZml4ZWRcbiAgcGFja0RhdGUoZm10ICsgJyBsJywgdHJpZSk7XG4gIHBhY2tEYXRlKGZtdCArICcgbCB4JywgdHJpZSk7XG4gIHBhY2tEYXRlKCdsICcgKyBmbXQsIHRyaWUpO1xuICBwYWNrRGF0ZSgnbCAnICsgZm10ICsgJyB4JywgdHJpZSk7XG4gIHBhY2tEYXRlKGZtdCArICcgRCcsIHRyaWUpO1xuICBwYWNrRGF0ZShmbXQgKyAnIEQgeCcsIHRyaWUpO1xuICBwYWNrRGF0ZSgnRCAnICsgZm10LCB0cmllKTtcbiAgcGFja0RhdGUoJ0QgJyArIGZtdCArICcgeCcsIHRyaWUpO1xufVxub2tEYXRlRm9ybWF0cy5mb3JFYWNoKGZtdCA9PiB7XG4gIChmbXRbMF0gIT09ICc/JykgJiYgYWRkRm9ybWF0VG9UcmllKGZtdCwgZGF0ZVRyaWVETSk7XG4gIChmbXRbMF0gIT09ICchJykgJiYgYWRkRm9ybWF0VG9UcmllKGZtdCwgZGF0ZVRyaWVNRCk7XG59KTtcblxuY29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldFVUQ0Z1bGxZZWFyKCk7XG5cbmNvbnN0IFBUID0gJy4nO1xuY29uc3QgQ00gPSAnLCc7XG5jb25zdCBTUCA9ICcgJztcbmNvbnN0IE5TID0gJ8KgJztcbmNvbnN0IE5OID0gJ+KAryc7XG5jb25zdCBBUCA9IFwiJ1wiO1xuY29uc3QgQUcgPSAn2awnO1xuY29uc3QgZGVjMmdyb3VwID0ge1xuICAnLic6IFsgQ00sIE5TLCBOTiwgQVAsIEFHIF0sXG4gICcsJzogWyBQVCwgTlMsIE5OLCBBUCwgQUcgXSxcbiAgJ9mrJzogWyBQVCwgTlMsIE5OLCBBUCwgQUcgXVxufTtcbmNvbnN0IGlzRGlnaXQgPSBkID0+IGQgJiYgZC5sZW5ndGggPT09IDEgJiYgZCA+PSAnMCcgJiYgZCA8PSAnOSc7XG5cbi8qKlxuICogUGFyc2UgYSBudW1lcmljIHN0cmluZyBpbnB1dCBhbmQgcmV0dXJuIGl0cyB2YWx1ZSBhbmQgZm9ybWF0LiBJZiB0aGUgaW5wdXRcbiAqIHdhcyBub3QgcmVjb2duaXplZCBvciB2YWxpZCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgYSBgbnVsbGAsIGZvciB2YWxpZCBpbnB1dFxuICogaXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0d28gcHJvcGVydGllczpcbiAqIFxuICogKiBgdmA6IHRoZSBwYXJzZWQgdmFsdWUuXG4gKiAqIGB6YDogdGhlIG51bWJlciBmb3JtYXQgb2YgdGhlIGlucHV0IChpZiBhcHBsaWNhYmxlKS5cbiAqIFxuICogQHNlZSBwYXJzZVZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIG51bWJlciB0byBwYXJzZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZT1cIlwiXVxuICogICAgQSBCQ1AgNDcgc3RyaW5nIHRhZy4gTG9jYWxlIGRlZmF1bHQgaXMgZW5nbGlzaCB3aXRoIGEgYFxcdTAwYTBgXG4gKiAgICBncm91cGluZyBzeW1ib2wgKHNlZSBbYWRkTG9jYWxlXSgjYWRkTG9jYWxlKSlcbiAqIEByZXR1cm5zIHtQYXJzZURhdGEgfCBudWxsfSBBbiBvYmplY3Qgb2YgdGhlIHBhcnNlZCB2YWx1ZSBhbmQgYSBjb3JyZXNwb25kaW5nIGZvcm1hdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVtYmVyICh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGwxMG4gPSBnZXRMb2NhbGUob3B0aW9ucy5sb2NhbGUgfHwgJycpIHx8IGRlZmF1bHRMb2NhbGU7XG4gIC8vIHdlIGJhc2UgZXZlcnl0aGluZyBvbiB0aGUgZGVjaW1hbCBzZXBhcmF0b3JcbiAgY29uc3QgZGVjID0gbDEwbi5kZWNpbWFsO1xuICAvLyBiYXNlIGFsbG93ZWQgZ3JvdXBpbmcgY2hhcnMgb24gZGVjaW1hbFxuICBjb25zdCBncnAgPSBbIC4uLihkZWMyZ3JvdXBbZGVjXSB8fCBbIEFQLCBBRyBdKSBdO1xuICBpZiAoIWdycC5pbmNsdWRlcyhsMTBuLmdyb3VwKSAmJiBsMTBuLmdyb3VwICE9PSBTUCAmJiBsMTBuLmdyb3VwICE9PSBkZWMpIHtcbiAgICBncnAucHVzaChsMTBuLmdyb3VwKTtcbiAgfVxuICBsZXQgbnVtID0gJyc7XG4gIGxldCBleHAgPSAnJztcbiAgbGV0IHNpZ24gPSAxO1xuICBsZXQgZm9ybWF0ID0gJyc7XG4gIGxldCBtaW51cyA9IGZhbHNlO1xuICBsZXQgb3BlblBhcmVuID0gZmFsc2U7XG4gIGxldCBjbG9zZVBhcmVuID0gZmFsc2U7XG4gIGxldCBwZXJjZW50ID0gZmFsc2U7XG4gIGxldCBjdXJyZW5jeSA9IGZhbHNlO1xuICBsZXQgY3VycmVuY3lTeW1ib2wgPSBudWxsO1xuICBsZXQgY3VycmVuY3lUcmFpbGluZyA9IGZhbHNlO1xuICBsZXQgaSA9IDA7XG4gIC8vIHByZWZpeFxuICBjb25zdCBwcmVmaXhDaGFycyA9IFsgU1AsIE5TLCBOTiwgJysnLCAnJScsICcoJywgJy0nIF0uY29uY2F0KGN1cnJlbmN5U3ltYm9scyk7XG4gIHdoaWxlIChwcmVmaXhDaGFycy5pbmNsdWRlcyh2YWx1ZVtpXSkpIHtcbiAgICBjb25zdCBjaGFyID0gdmFsdWVbaV07XG4gICAgaWYgKGNoYXIgPT09ICctJykge1xuICAgICAgaWYgKG1pbnVzIHx8IG9wZW5QYXJlbikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgbWludXMgPSB0cnVlO1xuICAgICAgc2lnbiA9IC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZUN1cnJlbmN5U3ltYm9scy50ZXN0KGNoYXIpKSB7XG4gICAgICBpZiAoY3VycmVuY3kpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgIGN1cnJlbmN5ID0gdHJ1ZTtcbiAgICAgIGN1cnJlbmN5U3ltYm9sID0gY2hhcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhciA9PT0gJygnKSB7XG4gICAgICBpZiAob3BlblBhcmVuIHx8IG1pbnVzKSB7IHJldHVybiBudWxsOyB9XG4gICAgICBvcGVuUGFyZW4gPSB0cnVlO1xuICAgICAgc2lnbiA9IC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGFyID09PSAnJScpIHtcbiAgICAgIGlmIChwZXJjZW50KSB7IHJldHVybiBudWxsOyB9XG4gICAgICBwZXJjZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIC8vIG51bWJlclxuICBsZXQgaGF2ZURlY2ltYWwgPSBmYWxzZTtcbiAgbGV0IGc7XG4gIGlmICh2YWx1ZVtpXSA9PT0gZGVjIHx8IGlzRGlnaXQodmFsdWVbaV0pKSB7XG4gICAgd2hpbGUgKGkgPCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoID0gdmFsdWVbaV07XG4gICAgICAvLyBjYW4gbWF5YmUgYWxsb3cgc3BhY2UgYXMgdGhlIGdyb3VwaW5nIG9wZXJhdG9yIGlmIHdlIGZpbmQgdGhhdCBpdCBpc1xuICAgICAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgYSBkaWdpdCBvciBkZWNpbWFsP1xuICAgICAgaWYgKCFnICYmIGdycC5pbmNsdWRlcyhjaCkpIHtcbiAgICAgICAgZyA9IGNoO1xuICAgICAgICAvLyBza2lwXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnICYmIGcgPT09IGNoKSB7XG4gICAgICAgIC8vIHNraXBcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNoID09PSBkZWMpIHtcbiAgICAgICAgaWYgKGhhdmVEZWNpbWFsKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbnVtICs9ICcuJztcbiAgICAgICAgaGF2ZURlY2ltYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNEaWdpdChjaCkpIHtcbiAgICAgICAgbnVtICs9IGNoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuICAvLyBleHBvbmVudFxuICBpZiAodmFsdWVbaV0gPT09ICdlJyB8fCB2YWx1ZVtpXSA9PT0gJ0UnKSB7XG4gICAgZXhwICs9IHZhbHVlW2ldO1xuICAgIGkrKztcbiAgICBpZiAodmFsdWVbaV0gPT09ICcrJyB8fCB2YWx1ZVtpXSA9PT0gJy0nKSB7XG4gICAgICBleHAgKz0gdmFsdWVbaV07XG4gICAgICBpKys7XG4gICAgfVxuICAgIGNvbnN0IGQgPSBpO1xuICAgIHdoaWxlIChpc0RpZ2l0KHZhbHVlW2ldKSkge1xuICAgICAgZXhwICs9IHZhbHVlW2ldO1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoZCA9PT0gaSkge1xuICAgICAgLy8gY29udGFpbnMgbm8gZGlnaXRzXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgLy8gc3VmZml4XG4gIGNvbnN0IHN1ZmZpeENoYXJzID0gWyBTUCwgTlMsIE5OLCAnJScsICckJywgJyknIF0uY29uY2F0KGN1cnJlbmN5U3ltYm9scyk7XG4gIHdoaWxlIChzdWZmaXhDaGFycy5pbmNsdWRlcyh2YWx1ZVtpXSkpIHtcbiAgICBjb25zdCBjaGFyID0gdmFsdWVbaV07XG4gICAgLy8gb25seSAxIG9jY3VyYW5jZSBvZiB0aGVzZSBpcyBhbGxvd2VkXG4gICAgaWYgKHJlQ3VycmVuY3lTeW1ib2xzLnRlc3QoY2hhcikpIHtcbiAgICAgIGlmIChjdXJyZW5jeSkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgY3VycmVuY3kgPSB0cnVlO1xuICAgICAgY3VycmVuY3lTeW1ib2wgPSBjaGFyO1xuICAgICAgY3VycmVuY3lUcmFpbGluZyA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoYXIgPT09ICcpJykge1xuICAgICAgaWYgKGNsb3NlUGFyZW4gfHwgIW9wZW5QYXJlbikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgY2xvc2VQYXJlbiA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoYXIgPT09ICclJykge1xuICAgICAgaWYgKHBlcmNlbnQpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgIHBlcmNlbnQgPSB0cnVlO1xuICAgIH1cbiAgICBpKys7XG4gIH1cblxuICBpZiAoaSAhPT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBpcyBudW1iZXIgb2s/XG4gIGxldCBudW1iZXJWYWx1ZSA9IHBhcnNlRmxvYXQobnVtICsgZXhwKTtcbiAgaWYgKCFpc0Zpbml0ZShudW1iZXJWYWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChleHApIHtcbiAgICBpZiAocGVyY2VudCB8fCBjdXJyZW5jeSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIGFsbG93IHBhcmVucyBhbmQgbWludXMsIGJ1dCBub3QgJSRcbiAgICBmb3JtYXQgPSAnMC4wMEUrMDAnO1xuICB9XG4gIGVsc2UgaWYgKHBlcmNlbnQpIHtcbiAgICBpZiAoY3VycmVuY3kpIHtcbiAgICAgIC8vIFNoZWV0cyBhbGxvd3MgdGhpczogJDEyMyUgPT4gJDEuMjMgKEV4Y2VsIGRvZXMgbm90KVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIG51bXBhcnQgZGljdGF0ZXMgaG93IFwiZGVlcFwiIHRoZSBmb3JtYXQgaXM6IFwiMFwiIHZzIFwiMC4wMFwiXG4gICAgZm9ybWF0ID0gbnVtLmluY2x1ZGVzKCcuJylcbiAgICAgID8gJzAuMDAlJ1xuICAgICAgOiAnMCUnO1xuICAgIG51bWJlclZhbHVlICo9IDAuMDE7XG4gIH1cbiAgZWxzZSBpZiAoY3VycmVuY3kpIHtcbiAgICAvLyBudW1wYXJ0IGRpY3RhdGVzIGhvdyBcImRlZXBcIiB0aGUgZm9ybWF0IGlzOiBcIjBcIiB2cyBcIjAuMDBcIlxuICAgIGNvbnN0IGN1cnJlbmN5Rm9ybWF0ID0gbnVtLmluY2x1ZGVzKCcuJylcbiAgICAgID8gJyMsIyMwLjAwJ1xuICAgICAgOiAnIywjIzAnO1xuICAgIGlmIChjdXJyZW5jeVRyYWlsaW5nKSB7XG4gICAgICBmb3JtYXQgPSBjdXJyZW5jeUZvcm1hdCArIGN1cnJlbmN5U3ltYm9sO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvcm1hdCA9IGN1cnJlbmN5U3ltYm9sICsgY3VycmVuY3lGb3JtYXQ7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGcpIHtcbiAgICBmb3JtYXQgPSBudW0uaW5jbHVkZXMoJy4nKVxuICAgICAgPyAnIywjIzAuMDAnXG4gICAgICA6ICcjLCMjMCc7XG4gIH1cbiAgLy8gd2UgbWF5IHdhbnQgdG8gbG93ZXIgdGhlIGZpZGVsaXR5IG9mIHRoZSBudW1iZXI6ICtudW0udG9GaXhlZCgxMylcbiAgY29uc3QgcmV0ID0geyB2OiBudW1iZXJWYWx1ZSAqIHNpZ24gfTtcbiAgaWYgKGZvcm1hdCkge1xuICAgIHJldC56ID0gZm9ybWF0O1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSAoeSwgbSwgZCkge1xuICAvLyBkYXkgY2FuJ3QgYmUgMFxuICBpZiAoZCA8IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gbW9udGggbXVzdCBiZSAxLTEyXG4gIGlmIChtIDwgMSB8fCBtID4gMTIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gZmVicnVhcnlcbiAgaWYgKG0gPT09IDIpIHtcbiAgICBjb25zdCBpc0xlYXBZZWFyID0gKCgoeSAlIDQgPT09IDApICYmICh5ICUgMTAwICE9PSAwKSkgfHwgKHkgJSA0MDAgPT09IDApKTtcbiAgICAvLyAxOTAwIGlzIGEgbGVhcCB5ZWFyIGluIEV4Y2VsXG4gICAgY29uc3QgZmViRGF5cyA9IChpc0xlYXBZZWFyIHx8IHkgPT09IDE5MDApID8gMjkgOiAyODtcbiAgICBpZiAoZCA+IGZlYkRheXMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gdGVzdCBhbnkgb3RoZXIgbW9udGhcbiAgZWxzZSBpZiAoXG4gICAgKChtID09PSA0IHx8IG0gPT09IDYgfHwgbSA9PT0gOSB8fCBtID09PSAxMSkgJiYgZCA+IDMwKSB8fFxuICAgICgobSA9PT0gMSB8fCBtID09PSAzIHx8IG0gPT09IDUgfHwgbSA9PT0gNyB8fCBtID09PSA4IHx8IG0gPT09IDEwIHx8IG0gPT09IDEyKSAmJiBkID4gMzEpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBzaG91bGQgcmVhbGx5IG1hdGNoIHsg4oCZJyAgIH0gYW5kIGFsbCB3aGl0ZXNwYWNlXG5jb25zdCBtYXRjaFJlYyA9IChzdHIsIGRhdGEsIHNraXBQZXJpb2QgPSBmYWxzZSkgPT4ge1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YSkge1xuICAgIGlmIChzdHIuc3RhcnRzV2l0aChpdGVtWzBdKSkge1xuICAgICAgLy8gaWYgdGhlIG1hdGNoIGlzIGZvbGxvd2VkIGJ5IGEgXCIuXCIgd2UnbGwgc2tpcCBpdCBpZiB0aGUgYWJici4gaXMgYnlcbiAgICAgIC8vIGNvbnZlbnRpb24gYWJicmV2aWF0ZWQgaW4gdGhlIGxvY2FsZS5cbiAgICAgIGxldCBsID0gaXRlbVswXS5sZW5ndGg7XG4gICAgICBpZiAoc2tpcFBlcmlvZCAmJiAoaXRlbVsyXSA9PT0gJ0QnIHx8IGl0ZW1bMl0gPT09ICdNJykgJiYgc3RyW2xdID09PSAnLicpIHtcbiAgICAgICAgbCsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFsgc3RyLnNsaWNlKDAsIGwpLCBpdGVtIF07XG4gICAgfVxuICB9XG4gIHJldHVybiBbICcnLCBudWxsIF07XG59O1xuXG5jb25zdCBuZXh0VG9rZW4gPSAoc3RyLCBub2RlLCBkYXRhLCBsRGF0YSkgPT4ge1xuICBjb25zdCBwYXRoID0gZGF0YS5wYXRoIHx8ICcnO1xuICBjb25zdCBtYXRjaE9yZGVyID0gT2JqZWN0LmtleXMobm9kZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hPcmRlci5sZW5ndGg7IGkrKykge1xuICAgIGxldCByO1xuICAgIGNvbnN0IHQgPSBtYXRjaE9yZGVyW2ldO1xuICAgIGlmICghbm9kZVt0XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0ID09PSAnJCcgfHwgdCA9PT0gJ+KCrCcpIHtcbiAgICAgIC8vIGlmIHN0cmluZyBpcyBkb25lLCB0aGVuIHdlIGNhbiByZXR1cm5cbiAgICAgIGlmICghc3RyKSB7XG4gICAgICAgIHIgPSBkYXRhO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0ID09PSAnLScpIHtcbiAgICAgIGNvbnN0IG0gPSAvXihcXHMqKFsuLy1dfCxcXHMpXFxzKnxcXHMrKS8uZXhlYyhzdHIpO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgY29uc3Qgc2VwID0gKG1bMV0gPT09ICctJyB8fCBtWzFdID09PSAnLycgfHwgbVsxXSA9PT0gJy4nKSA/IG1bMV0gOiAnICc7XG4gICAgICAgIC8vIGRvbid0IGFsbG93IG1peGluZyBkYXRlIHNlcGFyYXRvcnNcbiAgICAgICAgaWYgKCFkYXRhLnNlcCB8fCBkYXRhLnNlcCA9PT0gc2VwKSB7XG4gICAgICAgICAgY29uc3QgcyA9IG1bMF0ucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgICAgIHIgPSBuZXh0VG9rZW4oc3RyLnNsaWNlKG1bMF0ubGVuZ3RoKSwgbm9kZVt0XSwgeyAuLi5kYXRhLCBzZXAsIHBhdGg6IHBhdGggKyBzIH0sIGxEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0ID09PSAnICcpIHtcbiAgICAgIGNvbnN0IG0gPSAvXlssLl0/XFxzKy8uZXhlYyhzdHIpO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgY29uc3QgcyA9IG1bMF0ucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgICByID0gbmV4dFRva2VuKHN0ci5zbGljZShtWzBdLmxlbmd0aCksIG5vZGVbdF0sIHsgLi4uZGF0YSwgcGF0aDogcGF0aCArIHMgfSwgbERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0ID09PSAnaicgfHwgdCA9PT0gJ2QnKSB7XG4gICAgICBjb25zdCBtID0gL14oMD9bMS05XXwxXFxkfDJcXGR8M1swMV0pXFxiLy5leGVjKHN0cik7XG4gICAgICBpZiAobSkge1xuICAgICAgICByID0gbmV4dFRva2VuKHN0ci5zbGljZShtWzBdLmxlbmd0aCksIG5vZGVbdF0sIHsgLi4uZGF0YSwgZGF5OiBtWzBdLCBwYXRoOiBwYXRoICsgdCB9LCBsRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHQgPT09ICduJyB8fCB0ID09PSAnbScpIHtcbiAgICAgIGNvbnN0IG0gPSAvXigwP1sxLTldfDFbMDEyXSlcXGIvLmV4ZWMoc3RyKTtcbiAgICAgIGlmIChtKSB7XG4gICAgICAgIHIgPSBuZXh0VG9rZW4oc3RyLnNsaWNlKG1bMF0ubGVuZ3RoKSwgbm9kZVt0XSwgeyAuLi5kYXRhLCBtb250aDogK21bMF0sIF9tb246IG1bMF0sIHBhdGg6IHBhdGggKyB0IH0sIGxEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodCA9PT0gJ0YnIHx8IHQgPT09ICdNJykge1xuICAgICAgY29uc3QgWyBtLCBtYXRjaCBdID0gbWF0Y2hSZWMoc3RyLCBsRGF0YS5tb24sIGxEYXRhLm1wKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PT0gdCkge1xuICAgICAgICByID0gbmV4dFRva2VuKHN0ci5zbGljZShtLmxlbmd0aCksIG5vZGVbdF0sXG4gICAgICAgICAgeyAuLi5kYXRhLCBtb250aDogbWF0Y2hbMV0sIF9tb246IG0sIHBhdGg6IHBhdGggKyB0IH0sIGxEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodCA9PT0gJ2wnIHx8IHQgPT09ICdEJykge1xuICAgICAgY29uc3QgWyBtLCBtYXRjaCBdID0gbWF0Y2hSZWMoc3RyLCBsRGF0YS5kYXksIGxEYXRhLmRwKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PT0gdCkge1xuICAgICAgICAvLyB0aGUgdmFsdWUgaXMgaWdub3JlZFxuICAgICAgICByID0gbmV4dFRva2VuKHN0ci5zbGljZShtLmxlbmd0aCksIG5vZGVbdF0sIHsgLi4uZGF0YSwgcGF0aDogcGF0aCArIHQgfSwgbERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0ID09PSAneScpIHtcbiAgICAgIGNvbnN0IG0gPSAvXlxcZFxcZFxcYi8uZXhlYyhzdHIpO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgY29uc3QgeSA9ICgrbVswXSA+PSAzMCkgPyArbVswXSArIDE5MDAgOiArbVswXSArIDIwMDA7XG4gICAgICAgIHIgPSBuZXh0VG9rZW4oc3RyLnNsaWNlKG1bMF0ubGVuZ3RoKSwgbm9kZVt0XSwgeyAuLi5kYXRhLCB5ZWFyOiB5LCBwYXRoOiBwYXRoICsgdCB9LCBsRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHQgPT09ICdZJykge1xuICAgICAgY29uc3QgbSA9IC9eXFxkXFxkXFxkXFxkXFxiLy5leGVjKHN0cik7XG4gICAgICBpZiAobSkge1xuICAgICAgICByID0gbmV4dFRva2VuKHN0ci5zbGljZShtWzBdLmxlbmd0aCksIG5vZGVbdF0sIHsgLi4uZGF0YSwgeWVhcjogK21bMF0sIHBhdGg6IHBhdGggKyB0IH0sIGxEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodCA9PT0gJ3gnKSB7XG4gICAgICBjb25zdCB0aW1lID0gcGFyc2VUaW1lKHN0ciwgeyBsb2NhbGU6IGxEYXRhLmxvY2FsZSB9KTtcbiAgICAgIGlmICh0aW1lKSB7XG4gICAgICAgIHIgPSBuZXh0VG9rZW4oJycsIG5vZGVbdF0sIHsgLi4uZGF0YSwgdGltZTogdGltZS52LCB0ZjogdGltZS56LCBwYXRoOiBwYXRoICsgdCB9LCBsRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGRhdGUgdG9rZW4gXCIke3R9XCJgKTtcbiAgICB9XG4gICAgaWYgKHIpIHtcbiAgICAgIC8vIHJlamVjdCBpbnZhbGlkIGRhdGVzIHNvIHdlIGNvbnRpbnVlIHRyYXZlcnNpbmcgdGhlIHRyZWVcbiAgICAgIGlmIChpc1ZhbGlkRGF0ZShkYXRhLnllYXIgfHwgMTkxNiwgZGF0YS5tb250aCB8fCAxLCBkYXRhLmRheSA/ICtkYXRhLmRheSA6IDEpKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuY29uc3Qgbm9ybURhdGVTdHIgPSBzID0+IChcbiAgcy5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpXG4gICAgLnJlcGxhY2UoL+KAmS8sIFwiJ1wiKVxuICAgIC5yZXBsYWNlKC9cXC4kLywgJycpXG4gICAgLnRvTG93ZXJDYXNlKClcbik7XG5cbmNvbnN0IGdldExvb2t1cHMgPSAoYXJyLCBzeW0pID0+IHtcbiAgY29uc3QgcyA9IGFyci5tYXAoKGQsIGkpID0+IFsgbm9ybURhdGVTdHIoZCksIGkgKyAxLCBzeW0gXSk7XG4gIHMuc29ydCgoYSwgYikgPT4gYlswXS5sZW5ndGggLSBhWzBdLmxlbmd0aCk7XG4gIHJldHVybiBzO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhIGRhdGUgb3IgZGF0ZXRpbWUgc3RyaW5nIGlucHV0IGFuZCByZXR1cm4gaXRzIHZhbHVlIGFuZCBmb3JtYXQuIElmXG4gKiB0aGUgaW5wdXQgd2FzIG5vdCByZWNvZ25pemVkIG9yIHZhbGlkLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBhIGBudWxsYCwgZm9yXG4gKiB2YWxpZCBpbnB1dCBpdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHR3byBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gYHZgOiB0aGUgcGFyc2VkIHZhbHVlLlxuICogLSBgemA6IHRoZSBudW1iZXIgZm9ybWF0IG9mIHRoZSBpbnB1dCAoaWYgYXBwbGljYWJsZSkuXG4gKlxuICogQHNlZSBwYXJzZVZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIGRhdGUgdG8gcGFyc2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9XCJcIl1cbiAqICAgIEEgQkNQIDQ3IHN0cmluZyB0YWcuIExvY2FsZSBkZWZhdWx0IGlzIGVuZ2xpc2ggd2l0aCBhIGBcXHUwMGEwYFxuICogICAgZ3JvdXBpbmcgc3ltYm9sIChzZWUgW2FkZExvY2FsZV0oI2FkZExvY2FsZSkpXG4gKiBAcmV0dXJucyB7UGFyc2VEYXRhIHwgbnVsbH0gQW4gb2JqZWN0IG9mIHRoZSBwYXJzZWQgdmFsdWUgYW5kIGEgY29ycmVzcG9uZGluZyBmb3JtYXQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGUgKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgbDEwbiA9IGdldExvY2FsZShvcHRpb25zLmxvY2FsZSB8fCAnJykgfHwgZGVmYXVsdExvY2FsZTtcbiAgY29uc3QgbERhdGEgPSB7XG4gICAgbW9uOiBnZXRMb29rdXBzKGwxMG4ubW1tbSwgJ0YnKS5jb25jYXQoZ2V0TG9va3VwcyhsMTBuLm1tbSwgJ00nKSksXG4gICAgbXA6IGwxMG4ubW1tWzBdLmF0KC0xKSA9PT0gJy4nLFxuICAgIGRheTogZ2V0TG9va3VwcyhsMTBuLmRkZGQsICdsJykuY29uY2F0KGdldExvb2t1cHMobDEwbi5kZGQsICdEJykpLFxuICAgIGRwOiBsMTBuLmRkZFswXS5hdCgtMSkgPT09ICcuJyxcbiAgICBsb2NhbGU6IG9wdGlvbnMubG9jYWxlXG4gIH07XG4gIC8vIHBvc3NpYmxlIHNob3J0Y3V0OiBxdWlja2x5IGRpc21pc3MgaWYgdGhlcmUgaXNuJ3QgYSBudW1iZXI/XG4gIGNvbnN0IGRhdGUgPSBuZXh0VG9rZW4oXG4gICAgbm9ybURhdGVTdHIodmFsdWUpLFxuICAgIGwxMG4ucHJlZmVyTURZID8gZGF0ZVRyaWVNRCA6IGRhdGVUcmllRE0sXG4gICAgeyBwYXRoOiAnJyB9LFxuICAgIGxEYXRhXG4gICk7XG4gIGlmIChkYXRlKSB7XG4gICAgLy8gZGlzYWxsb3cgbWF0Y2hlcyB3aGVyZSB0d28gdG9rZW5zIGFyZSBzZXBhcmF0ZWQgYnkgYSBwZXJpb2RcbiAgICBpZiAoZGF0ZS5zZXAgPT09ICcuJyAmJiBkYXRlLnBhdGgubGVuZ3RoID09PSAzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeWVhciA9ICsoZGF0ZS55ZWFyID8/IGN1cnJlbnRZZWFyKTtcbiAgICBpZiAoIWRhdGUuZGF5KSB7XG4gICAgICBkYXRlLmRheSA9IDE7XG4gICAgfVxuICAgIGxldCBlcG9jaCA9IC1JbmZpbml0eTtcbiAgICBpZiAoeWVhciA8IDE5MDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIGlmICh5ZWFyIDw9IDE5MDAgJiYgZGF0ZS5tb250aCA8PSAyKSB7XG4gICAgICBlcG9jaCA9IDI1NTY4O1xuICAgIH1cbiAgICBlbHNlIGlmICh5ZWFyIDwgMTAwMDApIHtcbiAgICAgIGVwb2NoID0gMjU1Njk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGVWYWx1ZSA9IChEYXRlLlVUQyh5ZWFyLCBkYXRlLm1vbnRoIC0gMSwgZGF0ZS5kYXkpIC8gODY0ZTUpICsgZXBvY2ggKyAoZGF0ZS50aW1lIHx8IDApO1xuICAgIGlmIChkYXRlVmFsdWUgPj0gMCAmJiBkYXRlVmFsdWUgPD0gMjk1ODQ2NSkge1xuICAgICAgY29uc3QgbGVhZDAgPSAoXG4gICAgICAgIC8vIGVpdGhlciBoYXMgYSBsZWFkaW5nIHplcm9cbiAgICAgICAgKGRhdGUuX21vblswXSA9PT0gJzAnIHx8IGRhdGUuZGF5WzBdID09PSAnMCcpIHx8XG4gICAgICAgIC8vIGJvdGggYXJlIDItZGlnaXRzIGxvbmdcbiAgICAgICAgKGRhdGUuX21vbi5sZW5ndGggPT09IDIgJiYgZGF0ZS5kYXkubGVuZ3RoID09PSAyKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcm1hdCA9IGRhdGUucGF0aC5yZXBsYWNlKC9bamRsRG5tTUZ5WXhdL2csIGEgPT4ge1xuICAgICAgICBpZiAoYSA9PT0gJ3gnKSB7IHJldHVybiBkYXRlLnRmIHx8ICcnOyB9XG4gICAgICAgIHJldHVybiAobGVhZDAgPyB0eDAwW2FdIDogdHgwW2FdKSB8fCBhO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4geyB2OiBkYXRlVmFsdWUsIHo6IGZvcm1hdCB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3Qgbm9ybUFNUE1TdHIgPSBzID0+IChcbiAgcy5yZXBsYWNlKC9cXHMrL2csICcnKS50cmltKClcbiAgICAucmVwbGFjZSgvXFwuL2csICcnKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4pO1xuXG4vKipcbiAqIFBhcnNlIGEgdGltZSBzdHJpbmcgaW5wdXQgYW5kIHJldHVybiBpdHMgdmFsdWUgYW5kIGZvcm1hdC4gSWYgdGhlIGlucHV0IHdhc1xuICogbm90IHJlY29nbml6ZWQgb3IgdmFsaWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGEgYG51bGxgLCBmb3IgdmFsaWQgaW5wdXQgaXRcbiAqIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdHdvIHByb3BlcnRpZXM6XG4gKlxuICogLSBgdmA6IHRoZSBwYXJzZWQgdmFsdWUuXG4gKiAtIGB6YDogdGhlIG51bWJlciBmb3JtYXQgb2YgdGhlIGlucHV0IChpZiBhcHBsaWNhYmxlKS5cbiAqXG4gKiBAc2VlIHBhcnNlVmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgZGF0ZSB0byBwYXJzZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZT1cIlwiXVxuICogICAgQSBCQ1AgNDcgc3RyaW5nIHRhZy4gTG9jYWxlIGRlZmF1bHQgaXMgZW5nbGlzaCB3aXRoIGEgYFxcdTAwYTBgXG4gKiAgICBncm91cGluZyBzeW1ib2wgKHNlZSBbYWRkTG9jYWxlXSgjYWRkTG9jYWxlKSlcbiAqIEByZXR1cm5zIHtQYXJzZURhdGEgfCBudWxsfSBBbiBvYmplY3Qgb2YgdGhlIHBhcnNlZCB2YWx1ZSBhbmQgYSBjb3JyZXNwb25kaW5nIGZvcm1hdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGltZSAodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBsMTBuID0gZ2V0TG9jYWxlKG9wdGlvbnMubG9jYWxlIHx8ICcnKSB8fCBkZWZhdWx0TG9jYWxlO1xuICBjb25zdCBwYXJ0cyA9IC9eXFxzKihbMTBdP1xcZHwyWzAtNF0pKD86OihbMC01XVxcZHxcXGQpKT8oPzo6KFswLTVdXFxkfFxcZCkpPyhcXC5cXGR7MSwxMH0pPyg/PVxccypbXlxcc1xcZF18JCkvLmV4ZWModmFsdWUpO1xuICBsZXQgYW1wbSA9ICcnO1xuICBpZiAocGFydHMpIHtcbiAgICBjb25zdCB0YWlsID0gbm9ybUFNUE1TdHIodmFsdWUuc2xpY2UocGFydHNbMF0ubGVuZ3RoKSk7XG4gICAgaWYgKHRhaWwgPT09IG5vcm1BTVBNU3RyKGwxMG4uYW1wbVswXSkgfHwgdGFpbCA9PT0gJ2EnIHx8IHRhaWwgPT09ICdhbScpIHtcbiAgICAgIGFtcG0gPSAnYSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhaWwgPT09IG5vcm1BTVBNU3RyKGwxMG4uYW1wbVsxXSkgfHwgdGFpbCA9PT0gJ3AnIHx8IHRhaWwgPT09ICdwbScpIHtcbiAgICAgIGFtcG0gPSAncCc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhaWwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAocGFydHMpIHtcbiAgICBjb25zdCBbICwgaCwgbSwgcywgZiBdID0gcGFydHM7XG4gICAgLy8gZG9uJ3QgYWxsb3cgbWlsbGlzZWNvbmRzIHdpdGhvdXQgc2Vjb25kc1xuICAgIGlmIChmICYmICFzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gc2luZ2xlIG51bWJlciBtdXN0IGFsc28gaW5jbHVkZSBBTS9QTSBwYXJ0XG4gICAgaWYgKCFhbXBtICYmICFtICYmICFzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gQU0vUE0gcGFydCBtdXN0IGFsaWduIHdpdGggaG91cnNcbiAgICBsZXQgaHJzID0gKyhoIHx8IDApICogMTtcbiAgICBpZiAoYW1wbSkge1xuICAgICAgaWYgKGhycyA+PSAxMykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoYW0pO1xuICAgICAgLy8gdmFsaWQgLS0gRXJ0dSBtZcOwIGZhciBlw7BcbiAgICAgIC8vIDAwOjAwIEFNIC0gMTI6MDAgQU1cbiAgICAgIGlmIChhbXBtID09PSAncCcpIHtcbiAgICAgICAgaHJzICs9IDEyO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtaW4gPSArKG0gfHwgMCkgKiAxO1xuICAgIGNvbnN0IHNlYyA9ICsocyB8fCAwKSAqIDE7XG4gICAgY29uc3QgbXNzID0gKyhmIHx8IDApICogMTtcbiAgICByZXR1cm4ge1xuICAgICAgdjogKChocnMgKiA2MCAqIDYwKSArIChtaW4gKiA2MCkgKyBzZWMgKyBtc3MpIC8gKDYwICogNjAgKiAyNCksXG4gICAgICB6OiAoXG4gICAgICAgIChoLmxlbmd0aCA9PT0gMiA/ICdoaCcgOiAnaCcpICtcbiAgICAgICAgJzptbScgK1xuICAgICAgICAocyA/ICc6c3MnIDogJycpICtcbiAgICAgICAgKGFtcG0gPyAnIEFNL1BNJyA6ICcnKVxuICAgICAgKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgaW5wdXQgYW5kIHJldHVybiBpdHMgYm9vbGVhbiB2YWx1ZS4gSWYgdGhlIGlucHV0IHdhcyBub3RcbiAqIHJlY29nbml6ZWQgb3IgdmFsaWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGEgYG51bGxgLCBmb3IgdmFsaWQgaW5wdXQgaXRcbiAqIHJldHVybnMgYW4gb2JqZWN0IHdpdGggb25lIHByb3BlcnR5OlxuICpcbiAqIC0gYHZgOiB0aGUgcGFyc2VkIHZhbHVlLlxuICpcbiAqIEBzZWUgcGFyc2VWYWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBzdXBwb3NlZCBib29sZWFuIHRvIHBhcnNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICBPcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlPVwiXCJdXG4gKiAgICBBIEJDUCA0NyBzdHJpbmcgdGFnLiBMb2NhbGUgZGVmYXVsdCBpcyBlbmdsaXNoIHdpdGggYSBgXFx1MDBhMGBcbiAqICAgIGdyb3VwaW5nIHN5bWJvbCAoc2VlIFthZGRMb2NhbGVdKCNhZGRMb2NhbGUpKVxuICogQHJldHVybnMge1BhcnNlRGF0YSB8IG51bGx9IEFuIG9iamVjdCBvZiB0aGUgcGFyc2VkIHZhbHVlIGFuZCBhIGNvcnJlc3BvbmRpbmcgZm9ybWF0IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sICh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGwxMG4gPSBnZXRMb2NhbGUob3B0aW9ucy5sb2NhbGUgfHwgJycpIHx8IGRlZmF1bHRMb2NhbGU7XG4gIGNvbnN0IHYgPSB2YWx1ZS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgYlQgPSBsMTBuLmJvb2xbMF0udG9Mb3dlckNhc2UoKTtcbiAgaWYgKHYgPT09ICd0cnVlJyB8fCB2ID09PSBiVCkge1xuICAgIHJldHVybiB7IHY6IHRydWUgfTtcbiAgfVxuICBjb25zdCBiRiA9IGwxMG4uYm9vbFsxXS50b0xvd2VyQ2FzZSgpO1xuICBpZiAodiA9PT0gJ2ZhbHNlJyB8fCB2ID09PSBiRikge1xuICAgIHJldHVybiB7IHY6IGZhbHNlIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBwYXJzZSBhIFwic3ByZWFkc2hlZXQgaW5wdXRcIiBzdHJpbmcgaW5wdXQgYW5kIHJldHVybiBpdHMgdmFsdWUgYW5kXG4gKiBmb3JtYXQuIElmIHRoZSBpbnB1dCB3YXMgbm90IHJlY29nbml6ZWQgb3IgdmFsaWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGFcbiAqIGBudWxsYCwgZm9yIHZhbGlkIGlucHV0IGl0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggdHdvIHByb3BlcnRpZXM6XG4gKlxuICogLSBgdmA6IFRoZSBwYXJzZWQgdmFsdWUuIEZvciBkYXRlcywgdGhpcyB3aWxsIGJlIGFuIEV4Y2VsIHN0eWxlIHNlcmlhbCBkYXRlLlxuICogLSBgemA6IChPcHRpb25hbGx5KSB0aGUgbnVtYmVyIGZvcm1hdCBzdHJpbmcgb2YgdGhlIGlucHV0LiBUaGlzIHByb3BlcnR5IHdpbGxcbiAqICAgICAgICBub3QgYmUgcHJlc2VudCBpZiBpdCBhbW91bnRzIHRvIHRoZSBgR2VuZXJhbGAgZm9ybWF0LlxuICogXG4gKiBgcGFyc2VWYWx1ZSgpYCByZWNvZ25pemVzIGEgd2lkZSByYW5nZSBvZiBkYXRlcyBhbmQgZGF0ZS10aW1lcywgdGltZXMsXG4gKiBudW1iZXJzLCBhbmQgYm9vbGVhbnMuIFNvbWUgZXhhbXBsZXM6XG4gKlxuICogYGBganNcbiAqIC8vIGJhc2ljIG51bWJlclxuICogcGFyc2VWYWx1ZShcIi0xMjNcIik7Ly8geyB2OiAtMTIzIH1cbiAqIC8vIGZvcm1hdHRlZCBudW1iZXJcbiAqIHBhcnNlVmFsdWUoXCIkMSwyMzRcIik7IC8vIHsgdjogMTIzNCwgejogXCIkIywjIzBcIiB9XG4gKiAvLyBhIHBlcmNlbnRcbiAqIHBhcnNlVmFsdWUoXCIxMi4zJVwiKTsgLy8geyB2OiAwLjEyMywgejogXCIwLjAwJVwiIH1cbiAqIC8vIGEgZGF0ZVxuICogcGFyc2VWYWx1ZShcIjA3IE9jdG9iZXIgMTk4NFwiKTsgLy8geyB2OiAzMDk2MiwgejogJ2RkIG1tbW0geXl5eScgfVxuICogLy8gYW4gSVNPIGZvcm1hdHRlZCBkYXRlLXRpbWVcbiAqIHBhcnNlVmFsdWUoXCIxOTg0LTA5LTEwIDExOjEyOjEzLjEyMzRcIik7IC8vIHsgdjogMzA5MzUuNDY2ODE4NTU3ODcsIHo6IFwieXl5eS1tbS1kZCBoaDptbTpzc1wiIH1cbiAqIC8vIGEgYm9vbGVhblxuICogcGFyc2VWYWx1ZShcImZhbHNlXCIpOyAvLyB7IHY6IGZhbHNlIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBmb3JtYXR0aW5nIHN0cmluZyBvdXRwdXR0ZWQgbWF5IG5vdCBjb3JyZXNwb25kIGV4YWN0bHkgdG8gdGhlIGlucHV0LlxuICogUmF0aGVyLCBpcyBpdCBjb21wb3NlZCBvZiBjZXJ0YWluIGVsZW1lbnRzIHdoaWNoIHRoZSBpbnB1dCBjb250cm9scy4gVGhpcyBpc1xuICogY29tcGFyYWJsZSB0byBob3cgTWljcm9zb2Z0IEV4Y2VsIGFuZCBHb29nbGUgU2hlZXRzIHBhcnNlIHBhc3RlZCBpbnB1dC4gU29tZVxuICogdGhpbmdzIHlvdSBtYXkgZXhwZWN0OlxuICpcbiAqIC0gV2hpdGVzcGFjZSBpcyBpZ25vcmVkLlxuICogLSBEZWNpbWFsIGZyYWN0aW9ucyBhcmUgYWx3YXlzIHJlcHJlc2VudGVkIGJ5IGAuMDBgIHJlZ2FyZGxlc3Mgb2YgaG93IG1hbnlcbiAqICAgZGlnaXRzIHdlcmUgc2hvd24gaW4gdGhlIGlucHV0LlxuICogLSBOZWdhdGl2ZXMgZGVub3RlZCBieSBwYXJlbnRoZXNlcyBbYCgxLDIzNClgXSB3aWxsIG5vdCBpbmNsdWRlIHRoZVxuICogICBwYXJlbnRoZXNlcyBpbiB0aGUgZm9ybWF0IHN0cmluZyAodGhlIHZhbHVlIHdpbGwgc3RpbGwgYnkgbmVnYXRpdmUuKVxuICogLSBBbGwgXCJzY2llbnRpZmljIG5vdGF0aW9uXCIgcmV0dXJucyB0aGUgc2FtZSBmb3JtYXQ6IGAwLjAwRSswMGAuXG4gKlxuICogSW50ZXJuYWxseSB0aGUgcGFyc2VyIGNhbGxzLCBgcGFyc2VOdW1iZXJgLCBgcGFyc2VEYXRlYCxcbiAqIGBwYXJzZVRpbWVgIGFuZCBgcGFyc2VCb29sYC4gVGhleSB3b3JrIGluIHRoZSBzYW1lIHdheSBleGNlcHRcbiAqIHdpdGggYSBtb3JlIGxpbWl0ZWQgc2NvcGUuIFlvdSBtYXkgd2FudCB0aG9zZSBmdW5jdGlvbiBpZiB5b3UgYXJlIGxpbWl0aW5nXG4gKiBpbnB1dCB0byBhIHNtYWxsZXIgc2NvcGUuXG4gKlxuICogQmUgd2FybmVkIHRoYXQgdGhlIHBhcnNlciBkbyBub3QgKHlldCkgdGFrZSBsb2NhbGUgaW50byBhY2NvdW50IHNvIGFsbCBpbnB1dFxuICogaXMgYXNzdW1lZCB0byBiZSBpbiBcImVuLVVTXCIuIFRoaXMgbWVhbnMgdGhhdCBgMSwyMzQuNWAgd2lsbCBwYXJzZSwgYnV0XG4gKiBgMS4yMzQsNWAgd2lsbCBub3QuIFNpbWlsYXJseSwgdGhlIG9yZGVyIG9mIGRhdGUgcGFydHMgd2lsbCBiZSBVUyBjZW50cmljLlxuICogVGhpcyBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmUgc28gYmUgY2FyZWZ1bCB3aGF0IG9wdGlvbnMgeW91IHBhc3MgdGhlXG4gKiBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXJzZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAgT3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZT1cIlwiXVxuICogICAgQSBCQ1AgNDcgc3RyaW5nIHRhZy4gTG9jYWxlIGRlZmF1bHQgaXMgZW5nbGlzaCB3aXRoIGEgYFxcdTAwYTBgXG4gKiAgICBncm91cGluZyBzeW1ib2wgKHNlZSBbYWRkTG9jYWxlXSgjYWRkTG9jYWxlKSlcbiAqIEByZXR1cm5zIHtQYXJzZURhdGEgfCBudWxsfSBBbiBvYmplY3Qgb2YgdGhlIHBhcnNlZCB2YWx1ZSBhbmQgYSBjb3JyZXNwb25kaW5nIGZvcm1hdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiAoXG4gICAgcGFyc2VOdW1iZXIodmFsdWUsIG9wdGlvbnMpID8/XG4gICAgcGFyc2VEYXRlKHZhbHVlLCBvcHRpb25zKSA/P1xuICAgIHBhcnNlVGltZSh2YWx1ZSwgb3B0aW9ucykgPz9cbiAgICBwYXJzZUJvb2wodmFsdWUsIG9wdGlvbnMpXG4gICk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBwYWRkZWQtYmxvY2tzICovXG5pbXBvcnQgeyByZXNvbHZlTG9jYWxlIH0gZnJvbSAnLi9sb2NhbGUuanMnO1xuaW1wb3J0IHtcbiAgdV9ZRUFSLCB1X01PTlRILCB1X0RBWSwgdV9IT1VSLCB1X01JTiwgdV9TRUMsIHVfRFNFQywgdV9DU0VDLCB1X01TRUMsXG4gIEVQT0NIXzE5MDAsIEVQT0NIXzEzMTcsXG4gIFRPS0VOX0FNUE0sIFRPS0VOX0JSRUFLLCBUT0tFTl9DQUxFTkRBUiwgVE9LRU5fQ0hBUiwgVE9LRU5fQ09MT1IsIFRPS0VOX0NPTU1BLCBUT0tFTl9DT05ESVRJT04sXG4gIFRPS0VOX0RBVEVUSU1FLCBUT0tFTl9EQk5VTSwgVE9LRU5fRElHSVQsIFRPS0VOX0RVUkFUSU9OLCBUT0tFTl9FUlJPUiwgVE9LRU5fRVNDQVBFRCwgVE9LRU5fRVhQLFxuICBUT0tFTl9GSUxMLCBUT0tFTl9HRU5FUkFMLCBUT0tFTl9HUk9VUCwgVE9LRU5fSEFTSCwgVE9LRU5fTE9DQUxFLCBUT0tFTl9NSU5VUywgVE9LRU5fTkFUTlVNLFxuICBUT0tFTl9QQVJFTiwgVE9LRU5fUEVSQ0VOVCwgVE9LRU5fUExVUywgVE9LRU5fUE9JTlQsIFRPS0VOX1FNQVJLLCBUT0tFTl9TQ0FMRSwgVE9LRU5fU0tJUCxcbiAgVE9LRU5fU0xBU0gsIFRPS0VOX1NQQUNFLCBUT0tFTl9TVFJJTkcsIFRPS0VOX1RFWFQsIFRPS0VOX1pFUk9cbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5mdW5jdGlvbiBtaW5NYXhQYWQgKHN0ciwgcGFydCwgcHJlZml4KSB7XG4gIHBhcnRbcHJlZml4ICsgJ19tYXgnXSA9IHN0ci5sZW5ndGg7XG4gIHBhcnRbcHJlZml4ICsgJ19taW4nXSA9IHN0ci5yZXBsYWNlKC8jL2csICcnKS5sZW5ndGg7XG4gIHJldHVybiBwYXJ0O1xufVxuXG5mdW5jdGlvbiBhZGQgKHMsIHRva2Vucykge1xuICAvLyBhbGxvdyBhZGRpbmcgc3RyaW5nIHRva2VucyB3aXRob3V0IHdyYXBwaW5nXG4gIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcbiAgICB0b2tlbnMucHVzaCh7IHR5cGU6ICdzdHJpbmcnLCB2YWx1ZTogcyB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0b2tlbnMucHVzaChzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bU9wICh0b2tlbiwgYWN0aXZlUGF0dGVybikge1xuICBjb25zdCB0eXBlID0gdG9rZW4gJiYgdG9rZW4udHlwZTtcbiAgcmV0dXJuIChcbiAgICAodHlwZSA9PT0gVE9LRU5fSEFTSCB8fCB0eXBlID09PSBUT0tFTl9aRVJPIHx8IHR5cGUgPT09IFRPS0VOX1FNQVJLKSB8fFxuICAgICh0eXBlID09PSBUT0tFTl9ESUdJVCAmJiBhY3RpdmVQYXR0ZXJuID09PSAnZGVuJylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRm9ybWF0U2VjdGlvbiAoaW5wdXRUb2tlbnMpIHtcbiAgY29uc3Qgb3V0cHV0VG9rZW5zID0gW107XG5cbiAgY29uc3QgcGFydCA9IHtcbiAgICBzY2FsZTogMSxcbiAgICBwZXJjZW50OiBmYWxzZSxcbiAgICB0ZXh0OiBmYWxzZSxcbiAgICBkYXRlOiAwLFxuICAgIGRhdGVfZXZhbDogZmFsc2UsXG4gICAgZGF0ZV9zeXN0ZW06IEVQT0NIXzE5MDAsXG4gICAgc2VjX2RlY2ltYWxzOiAwLFxuICAgIGdlbmVyYWw6IGZhbHNlLFxuICAgIGNsb2NrOiAyNCxcbiAgICBpbnRfcGF0dGVybjogW10sXG4gICAgZnJhY19wYXR0ZXJuOiBbXSxcbiAgICBtYW5fcGF0dGVybjogW10sXG4gICAgZGVuX3BhdHRlcm46IFtdLFxuICAgIG51bV9wYXR0ZXJuOiBbXSxcbiAgICB0b2tlbnM6IG91dHB1dFRva2Vuc1xuICB9O1xuXG4gIGxldCBjdXJyZW50UGF0dGVybiA9ICdpbnQnO1xuICBsZXQgbGFzdE51bWJlckNodW5rID0gbnVsbDtcbiAgY29uc3QgZGF0ZUNodW5rcyA9IFtdO1xuICBsZXQgbGFzdDtcbiAgbGV0IGhhdmVMb2NhbGUgPSBmYWxzZTtcblxuICBsZXQgaW5kZXggPSAtMTtcbiAgbGV0IHBhcnRPdmVyID0gZmFsc2U7XG4gIGxldCBwYXR0ZXJuU291cmNlID0gJyc7XG4gIGxldCBoYXZlU2xhc2ggPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGlucHV0VG9rZW5zLmxlbmd0aCAmJiAhcGFydE92ZXIpIHtcbiAgICBjb25zdCB0b2tlbiA9IGlucHV0VG9rZW5zW2luZGV4XTtcbiAgICBjb25zdCB0eXBlID0gdG9rZW4udHlwZSB8fCBUT0tFTl9FUlJPUjtcbiAgICBwYXR0ZXJuU291cmNlICs9IHRva2VuLnJhdztcblxuICAgIGlmICh0eXBlID09PSBUT0tFTl9HRU5FUkFMKSB7XG4gICAgICBwYXJ0LmdlbmVyYWwgPSB0cnVlO1xuICAgICAgYWRkKHRva2VuLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIC8vIG5ldyBwYXJ0aXRpb25cbiAgICBlbHNlIGlmIChpc051bU9wKHRva2VuLCBjdXJyZW50UGF0dGVybikpIHtcbiAgICAgIGNvbnN0IHB0ID0gcGFydFtjdXJyZW50UGF0dGVybiArICdfcGF0dGVybiddO1xuICAgICAgaWYgKGlzTnVtT3AobGFzdCwgY3VycmVudFBhdHRlcm4pIHx8IGxhc3Q/LnR5cGUgPT09IFRPS0VOX0dST1VQKSB7XG4gICAgICAgIC8vIGFwcGVuZCB0byBjdXJyZW50XG4gICAgICAgIHB0LnB1c2goKHB0LnBvcCgpIHx8ICcnKSArIHRva2VuLnZhbHVlKTtcbiAgICAgICAgbGFzdE51bWJlckNodW5rLm51bSArPSB0b2tlbi52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBuZXcgbnVtYmVyIHNlY3Rpb25cbiAgICAgICAgcHQucHVzaCh0b2tlbi52YWx1ZSk7XG4gICAgICAgIGxhc3ROdW1iZXJDaHVuayA9IHsgdHlwZTogY3VycmVudFBhdHRlcm4sIG51bTogdG9rZW4udmFsdWUgfTtcbiAgICAgICAgYWRkKGxhc3ROdW1iZXJDaHVuaywgb3V0cHV0VG9rZW5zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9QQVJFTikge1xuICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnKCcpIHtcbiAgICAgICAgcGFydC5wYXJlbnMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYWRkKHRva2VuLnZhbHVlLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9ESUdJVCkge1xuICAgICAgLy8ganVzdCBwcmludCBpdFxuICAgICAgYWRkKHRva2VuLnZhbHVlLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIC8vIHZ1bGdhciBmcmFjdGlvbnNcbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9TTEFTSCkge1xuICAgICAgaGF2ZVNsYXNoID0gdHJ1ZTtcbiAgICAgIGlmIChwYXJ0W2N1cnJlbnRQYXR0ZXJuICsgJ19wYXR0ZXJuJ10ubGVuZ3RoKSB7XG4gICAgICAgIGlmICghbGFzdE51bWJlckNodW5rKSB7IC8vIG5lZWQgdG8gaGF2ZSBhIG51bWVyYXRvciBwcmVzZW50XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdGb3JtYXQgcGF0dGVybiBpcyBtaXNzaW5nIGEgbnVtZXJhdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFydC5mcmFjdGlvbnMgPSB0cnVlO1xuICAgICAgICAvLyAuLi4gd2UganVzdCBwYXNzZWQgdGhlIG51bWVyYXRvciAtIGNvcnJlY3QgdGhhdCBpdGVtXG4gICAgICAgIHBhcnQubnVtX3BhdHRlcm4ucHVzaChwYXJ0W2N1cnJlbnRQYXR0ZXJuICsgJ19wYXR0ZXJuJ10ucG9wKCkpO1xuICAgICAgICBsYXN0TnVtYmVyQ2h1bmsudHlwZSA9ICdudW0nO1xuICAgICAgICAvLyBuZXh0IHVwLi4uIHRoZSBkZW5vbWluYXRvclxuICAgICAgICBjdXJyZW50UGF0dGVybiA9ICdkZW4nO1xuICAgICAgICBhZGQoeyB0eXBlOiAnZGl2JyB9LCBvdXRwdXRUb2tlbnMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGFkZCh0b2tlbi52YWx1ZSwgb3V0cHV0VG9rZW5zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9DT01NQSkge1xuICAgICAgYWRkKCcsJywgb3V0cHV0VG9rZW5zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fU0NBTEUpIHtcbiAgICAgIHBhcnQuc2NhbGUgPSAwLjAwMSAqKiB0b2tlbi5yYXcubGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9HUk9VUCkge1xuICAgICAgaWYgKGN1cnJlbnRQYXR0ZXJuID09PSAnaW50Jykge1xuICAgICAgICBwYXJ0Lmdyb3VwaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UGF0dGVybiA9PT0gJ2RlbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdDYW5ub3QgZ3JvdXAgZGVub21pbmF0b3IgZGlnaXRzJyk7XG4gICAgICB9XG4gICAgICAvLyBlbHNlIHdlIGp1c3QgaWdub3JlIGl0IVxuICAgIH1cblxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX1NQQUNFKSB7XG4gICAgICBhZGQodG9rZW4sIG91dHB1dFRva2Vucyk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fQlJFQUspIHtcbiAgICAgIHBhcnRPdmVyID0gdHJ1ZTtcbiAgICAgIGJyZWFrOyAvLyBsZWF2ZSB0aGUgXCI7XCIgaGFuZ2luZ1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX1RFWFQpIHsgLy8gQFxuICAgICAgcGFydC50ZXh0ID0gdHJ1ZTtcbiAgICAgIGFkZCh0b2tlbiwgb3V0cHV0VG9rZW5zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fUExVUyB8fCB0eXBlID09PSBUT0tFTl9NSU5VUykge1xuICAgICAgYWRkKHRva2VuLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIC8vIFtoXSBbbV0gW3NdXG4gICAgLy8gZWxzZSBpZiAoKG0gPSAvXig/OlxcWyhoK3xtK3xzKylcXF0pL2kuZXhlYyhzKSkpIHtcbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9EVVJBVElPTikge1xuICAgICAgY29uc3QgdG9rZW5WYWx1ZSA9IHRva2VuLnZhbHVlLnRvTG93ZXJDYXNlKCk7IC8vIGRlYWwgd2l0aCBpbiB0b2tlbml6ZXJcbiAgICAgIGNvbnN0IHN0YXJ0c1dpdGggPSB0b2tlblZhbHVlWzBdO1xuICAgICAgY29uc3QgYml0ID0geyB0eXBlOiAnJywgc2l6ZTogMCwgZGF0ZTogMSwgcGFkOiB0b2tlblZhbHVlLmxlbmd0aCB9O1xuICAgICAgaWYgKHN0YXJ0c1dpdGggPT09ICdoJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfSE9VUjtcbiAgICAgICAgYml0LnR5cGUgPSAnaG91ci1lbGFwJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGggPT09ICdtJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfTUlOO1xuICAgICAgICBiaXQudHlwZSA9ICdtaW4tZWxhcCc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYml0LnNpemUgPSB1X1NFQztcbiAgICAgICAgYml0LnR5cGUgPSAnc2VjLWVsYXAnO1xuICAgICAgfVxuICAgICAgLy8gc2lnbmFsIGRhdGUgY2FsYyBhbmQgdHJhY2sgc21hbGxlc3QgbmVlZGVkIHVuaXRcbiAgICAgIHBhcnQuZGF0ZSA9IHBhcnQuZGF0ZSB8IGJpdC5zaXplO1xuICAgICAgZGF0ZUNodW5rcy5wdXNoKGJpdCk7XG4gICAgICBhZGQoYml0LCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cbiAgICAvLyBOb3RlOiBJbiBsb2NhbGVzIHdoZXJlIGRlY2ltYWwgc3ltYm9sIGlzIHNldCB0byBcIixcIiBFeGNlbCB3aWxsIGV4cGVjdFxuICAgIC8vICAgICAgIFwiLFwiIHJhdGhlciB0aGFuIGEgXCIuXCIuIFRoaXMgbXVzdCBiZSBzb2x2ZWQgYnkgcmUtbG9jYWxpemluZyB0aGVcbiAgICAvLyAgICAgICBwYXR0ZXJuIGJlZm9yZSB1c2luZyBpdC5cbiAgICAvLyAuMCAuMDAgLjAwMFxuICAgIGVsc2UgaWYgKHBhcnQuZGF0ZSAmJiB0eXBlID09PSBUT0tFTl9QT0lOVCAmJiBpbnB1dFRva2Vuc1tpbmRleCArIDFdPy50eXBlID09PSBUT0tFTl9aRVJPKSB7XG4gICAgICBsZXQgZGVjID0gMTtcbiAgICAgIGluZGV4Kys7XG4gICAgICBsZXQgcmF3ID0gJzAnO1xuICAgICAgaWYgKGlucHV0VG9rZW5zW2luZGV4ICsgMV0/LnR5cGUgPT09IFRPS0VOX1pFUk8pIHtcbiAgICAgICAgcmF3ICs9ICcwJztcbiAgICAgICAgZGVjID0gMjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dFRva2Vuc1tpbmRleCArIDFdPy50eXBlID09PSBUT0tFTl9aRVJPKSB7XG4gICAgICAgIHJhdyArPSAnMCc7XG4gICAgICAgIGRlYyA9IDM7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBwYXR0ZXJuU291cmNlICs9IHJhdztcbiAgICAgIGNvbnN0IHNpemUgPSBbIHVfU0VDLCB1X0RTRUMsIHVfQ1NFQywgdV9NU0VDIF1bZGVjXTtcbiAgICAgIHBhcnQuZGF0ZSA9IHBhcnQuZGF0ZSB8IHNpemU7XG4gICAgICBwYXJ0LmRhdGVfZXZhbCA9IHRydWU7XG4gICAgICBwYXJ0LnNlY19kZWNpbWFscyA9IE1hdGgubWF4KHBhcnQuc2VjX2RlY2ltYWxzLCBkZWMpO1xuICAgICAgYWRkKHtcbiAgICAgICAgdHlwZTogJ3N1YnNlYycsXG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIGRlY2ltYWxzOiBkZWMsXG4gICAgICAgIGRhdGU6IDFcbiAgICAgIH0sIG91dHB1dFRva2Vucyk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fQ0FMRU5EQVIpIHtcbiAgICAgIC8vIHNpZ25hbCBkYXRlIHN5c3RlbSAoaWdub3JlZCBpZiBkZWZpbmVkIHdpdGggWyQteHh4XSlcbiAgICAgIGlmICghaGF2ZUxvY2FsZSkge1xuICAgICAgICAvLyBVc2UgSGlqcmkgY2FsZW5kYXIgc3lzdGVtXG4gICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ0IyJyB8fCB0b2tlbi52YWx1ZSA9PT0gJ2IyJykge1xuICAgICAgICAgIC8vIFRPRE86IEIyIGRvZXMgbW9yZSB0aGFuIHRoaXNcbiAgICAgICAgICAvLyBpdCBzd2l0Y2hlcyBsb2NhbGUgdG8gWyQtMDYwNDAxXSAoYXIpIHdoaWNoIGFmZmVjdHMgZGlzcGxheSAoUlRMKVxuICAgICAgICAgIHBhcnQuZGF0ZV9zeXN0ZW0gPSBFUE9DSF8xMzE3O1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBHcmVnb3JpYW4gY2FsZW5kYXIgc3lzdGVtXG4gICAgICAgIGVsc2UgeyAvLyBCMSB8IGIxXG4gICAgICAgICAgLy8gc2lnbmFsIGRhdGUgc3lzdGVtIChpZ25vcmVkIGlmIGRlZmluZWQgd2l0aCBbJC14eHhdKVxuICAgICAgICAgIHBhcnQuZGF0ZV9zeXN0ZW0gPSBFUE9DSF8xOTAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGg6bW06c3MgWVlZWS1NTS1ERFxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX0RBVEVUSU1FKSB7XG4gICAgICAvLyBFeGNlbCBpcyBcIm1vc3RseVwiIGNhc2UgaW5zZW5zaXRpdmUgaGVyZSBleGNlcHQgaXQgY2hlY2tzIHRoZSBsYXN0IHVzZWRcbiAgICAgIC8vIGRhdGUgdG9rZW4uIFdoaWNoLCBpZiBpdCB3YXMgcyBvciBoLCBtaW51dGVzIGlzIHVzZWQuIFRoZSBzYW1lIGlzIHRydWVcbiAgICAgIC8vIGlmIHdlIGhpdCBtIG9yIHMsIGFuZCBsYXN0IGlzIG0uXG4gICAgICAvLyBtIGFuZCBtbSBhcmUgc3B1cmlvdXMsIG1tbSBpcyBhbHdheXMgbW9udGhcbiAgICAgIGNvbnN0IGJpdCA9IHsgdHlwZTogJycsIHNpemU6IDAsIGRhdGU6IDEgfTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdG9rZW4udmFsdWUudG9Mb3dlckNhc2UoKTsgLy8gZGVhbCB3aXRoIGluIHRva2VuaXplcj9cbiAgICAgIGNvbnN0IHN0YXJ0c1dpdGggPSB2YWx1ZVswXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3knIHx8IHZhbHVlID09PSAneXknKSB7XG4gICAgICAgIGJpdC5zaXplID0gdV9ZRUFSO1xuICAgICAgICBiaXQudHlwZSA9ICd5ZWFyLXNob3J0JztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGggPT09ICd5JyB8fCBzdGFydHNXaXRoID09PSAnZScpIHtcbiAgICAgICAgYml0LnNpemUgPSB1X1lFQVI7XG4gICAgICAgIGJpdC50eXBlID0gJ3llYXInO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWUgPT09ICdiJyB8fCB2YWx1ZSA9PT0gJ2JiJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfWUVBUjtcbiAgICAgICAgYml0LnR5cGUgPSAnYi15ZWFyLXNob3J0JztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGggPT09ICdiJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfWUVBUjtcbiAgICAgICAgYml0LnR5cGUgPSAnYi15ZWFyJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnZCcgfHwgdmFsdWUgPT09ICdkZCcpIHtcbiAgICAgICAgYml0LnNpemUgPSB1X0RBWTtcbiAgICAgICAgYml0LnR5cGUgPSAnZGF5JztcbiAgICAgICAgYml0LnBhZCA9IC9kZC8udGVzdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gJ2RkZCcgfHwgdmFsdWUgPT09ICdhYWEnKSB7XG4gICAgICAgIGJpdC5zaXplID0gdV9EQVk7XG4gICAgICAgIGJpdC50eXBlID0gJ3dlZWtkYXktc2hvcnQnO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhcnRzV2l0aCA9PT0gJ2QnIHx8IHN0YXJ0c1dpdGggPT09ICdhJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfREFZO1xuICAgICAgICBiaXQudHlwZSA9ICd3ZWVrZGF5JztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGggPT09ICdoJykge1xuICAgICAgICBiaXQuc2l6ZSA9IHVfSE9VUjtcbiAgICAgICAgYml0LnR5cGUgPSAnaG91cic7XG4gICAgICAgIGJpdC5wYWQgPSAvaGgvaS50ZXN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGggPT09ICdtJykge1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgYml0LnNpemUgPSB1X01PTlRIO1xuICAgICAgICAgIGJpdC50eXBlID0gJ21vbnRobmFtZS1zaG9ydCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgYml0LnNpemUgPSB1X01PTlRIO1xuICAgICAgICAgIGJpdC50eXBlID0gJ21vbnRobmFtZS1zaW5nbGUnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLmxlbmd0aCA+PSA0KSB7XG4gICAgICAgICAgYml0LnNpemUgPSB1X01PTlRIO1xuICAgICAgICAgIGJpdC50eXBlID0gJ21vbnRobmFtZSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbSBvciBtbSBjYW4gYmUgZWl0aGVyIG1pbnV0ZSBvciBtb250aCBiYXNlZCBvbiBjb250ZXh0XG4gICAgICAgIGNvbnN0IGxhc3RfZGF0ZV9jaHVuayA9IGRhdGVDaHVua3NbZGF0ZUNodW5rcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKCFiaXQudHlwZSAmJiBsYXN0X2RhdGVfY2h1bmsgJiZcbiAgICAgICAgICAgICFsYXN0X2RhdGVfY2h1bmsudXNlZCAmJlxuICAgICAgICAgICAgKGxhc3RfZGF0ZV9jaHVuay5zaXplICYgKHVfSE9VUiB8IHVfU0VDKSkpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIHZhbHVlIGZvbGxvd3MgaG91ciBvciBzZWNvbmQsIGl0IGlzIGEgbWludXRlXG4gICAgICAgICAgbGFzdF9kYXRlX2NodW5rLnVzZWQgPSB0cnVlO1xuICAgICAgICAgIGJpdC5zaXplID0gdV9NSU47XG4gICAgICAgICAgYml0LnR5cGUgPSAnbWluJztcbiAgICAgICAgICBiaXQucGFkID0gL21tLy50ZXN0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB3ZSBzdGlsbCBkb24ndCBrbm93LCB3ZSB0cmVhdCBhcyBhIG1vbnRoXG4gICAgICAgIC8vIGFuZCBkZWZlciwgYSBsYXRlciAnc2VjJyB2YWx1ZSBtYXkgc3dpdGNoIGl0XG4gICAgICAgIGlmICghYml0LnR5cGUpIHtcbiAgICAgICAgICBiaXQuc2l6ZSA9IHVfTU9OVEg7XG4gICAgICAgICAgYml0LnR5cGUgPSAnbW9udGgnO1xuICAgICAgICAgIGJpdC5wYWQgPSAvbW0vLnRlc3QodmFsdWUpO1xuICAgICAgICAgIGJpdC5pbmRldGVybWluYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhcnRzV2l0aCA9PT0gJ3MnKSB7XG4gICAgICAgIGJpdC5zaXplID0gdV9TRUM7XG4gICAgICAgIGJpdC50eXBlID0gJ3NlYyc7XG4gICAgICAgIGJpdC5wYWQgPSAvc3MvLnRlc3QodmFsdWUpO1xuICAgICAgICAvLyBpZiBsYXN0IGRhdGUgY2h1bmsgd2FzIG0sIGZsYWcgdGhpcyB1c2VkXG4gICAgICAgIGNvbnN0IGxhc3RfZGF0ZV9jaHVuayA9IGRhdGVDaHVua3NbZGF0ZUNodW5rcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RfZGF0ZV9jaHVuayAmJiBsYXN0X2RhdGVfY2h1bmsuc2l6ZSAmIHVfTUlOKSB7XG4gICAgICAgICAgYml0LnVzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGxhc3QgZGF0ZSBjaHVuayBpcyB1bmRlY2lkZWQsIHdlIGtub3cgdGhhdCBpdCBpcyBhIG1pbnV0ZVxuICAgICAgICBlbHNlIGlmIChsYXN0X2RhdGVfY2h1bmsgJiYgbGFzdF9kYXRlX2NodW5rLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICBkZWxldGUgbGFzdF9kYXRlX2NodW5rLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgICAgbGFzdF9kYXRlX2NodW5rLnNpemUgPSB1X01JTjtcbiAgICAgICAgICBsYXN0X2RhdGVfY2h1bmsudHlwZSA9ICdtaW4nO1xuICAgICAgICAgIGJpdC51c2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc3RhcnRzV2l0aCA9PT0gJ2cnKSB7XG4gICAgICAgIC8vIFRPRE86IERvbid0IGtub3cgd2hhdCB0aGlzIGRvZXM/ICh5ZXQhKVxuICAgICAgfVxuICAgICAgLy8gc2lnbmFsIGRhdGUgY2FsYyBhbmQgdHJhY2sgc21hbGxlc3QgbmVlZGVkIHVuaXRcbiAgICAgIHBhcnQuZGF0ZSA9IHBhcnQuZGF0ZSB8IGJpdC5zaXplO1xuICAgICAgcGFydC5kYXRlX2V2YWwgPSB0cnVlO1xuICAgICAgZGF0ZUNodW5rcy5wdXNoKGJpdCk7XG4gICAgICBhZGQoYml0LCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIC8vIEFNL1BNXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vU2hlZXRKUy9zaGVldGpzL2lzc3Vlcy82NzZcbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9BTVBNKSB7XG4gICAgICBwYXJ0LmNsb2NrID0gMTI7XG4gICAgICBwYXJ0LmRhdGUgPSBwYXJ0LmRhdGUgfCB1X0hPVVI7XG4gICAgICBwYXJ0LmRhdGVfZXZhbCA9IHRydWU7XG4gICAgICAvLyBkZWFsIHdpdGggaW4gdG9rZW5pemVyP1xuICAgICAgdG9rZW4uc2hvcnQgPSB0b2tlbi52YWx1ZSA9PT0gJ0EvUCc7XG4gICAgICBhZGQodG9rZW4sIG91dHB1dFRva2Vucyk7XG4gICAgfVxuXG4gICAgLy8gZXNjYXBlZCBjaGFyYWN0ZXIsIHN0cmluZ1xuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX1NUUklORyB8fCB0eXBlID09PSBUT0tFTl9FU0NBUEVEIHx8IHR5cGUgPT09IFRPS0VOX0NIQVIpIHtcbiAgICAgIGFkZCh0b2tlbi52YWx1ZSwgb3V0cHV0VG9rZW5zKTtcbiAgICB9XG5cbiAgICAvLyBjb25kaXRpb25cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9DT05ESVRJT04pIHtcbiAgICAgIHBhcnQuY29uZGl0aW9uID0gW1xuICAgICAgICB0b2tlbi52YWx1ZVswXSwgLy8gb3BlcmF0b3JcbiAgICAgICAgcGFyc2VGbG9hdCh0b2tlbi52YWx1ZVsxXSkgLy8gb3BlcmFuZFxuICAgICAgXTtcbiAgICB9XG5cbiAgICAvLyBsb2NhbGUgY29kZSAtLSB3ZSBhbGxvdyBzdGQuIFwiZW4tVVNcIiBzdHlsZSBjb2Rlc1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0MTM0NzI5L3doYXQtZG9lcy10aGUtMTMwMDAwLWluLWV4Y2VsLWxvY2FsZS1jb2RlLTEzMDAwMC1tZWFuLzU0NTQwNDU1IzU0NTQwNDU1XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fTE9DQUxFKSB7XG4gICAgICBjb25zdCBiaXRzID0gdG9rZW4udmFsdWUuc3BsaXQoJy0nKTtcbiAgICAgIGNvbnN0IGNvZGUgPSBiaXRzLmxlbmd0aCA8IDIgPyAnJyA6IGJpdHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gICAgICBjb25zdCBjdXJyZW5jeSA9IGJpdHNbMF07XG4gICAgICBpZiAoY3VycmVuY3kpIHtcbiAgICAgICAgYWRkKGN1cnJlbmN5LCBvdXRwdXRUb2tlbnMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsNGUgPSByZXNvbHZlTG9jYWxlKGNvZGUpO1xuICAgICAgaWYgKGw0ZSkgeyBwYXJ0LmxvY2FsZSA9IGw0ZTsgfVxuICAgICAgY29uc3Qgd2luY29kZSA9IHBhcnNlSW50KGNvZGUsIDE2KTtcbiAgICAgIGlmIChpc0Zpbml0ZSh3aW5jb2RlKSAmJiAod2luY29kZSAmIDB4ZmYwMDAwKSkge1xuICAgICAgICBjb25zdCBjYWwgPSAod2luY29kZSA+PiAxNikgJiAweGZmO1xuICAgICAgICAvLyBvbmx5IEhpanJpIGlzIHN1cHBvcnRlZCBhdG0uXG4gICAgICAgIGlmIChjYWwgPT09IDYpIHsgcGFydC5kYXRlX3N5c3RlbSA9IEVQT0NIXzEzMTc7IH1cbiAgICAgIH1cblxuICAgICAgaGF2ZUxvY2FsZSA9IHRydWU7IC8vIGlnbm9yZSBhbnkgQjIgJiBCMSB0b2tlbnNcbiAgICB9XG5cbiAgICAvLyBjb2xvclxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX0NPTE9SKSB7XG4gICAgICBsZXQgY207XG4gICAgICBsZXQgdiA9IHRva2VuLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoKGNtID0gL15jb2xvclxccyooXFxkKykkL2kuZXhlYyh2KSkpIHtcbiAgICAgICAgdiA9IHBhcnNlSW50KGNtWzFdLCAxMCk7XG4gICAgICB9XG4gICAgICBwYXJ0LmNvbG9yID0gdjtcbiAgICB9XG5cbiAgICAvLyBwZXJjZW50YWdlXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fUEVSQ0VOVCkge1xuICAgICAgcGFydC5zY2FsZSA9IDEwMDtcbiAgICAgIHBhcnQucGVyY2VudCA9IHRydWU7XG4gICAgICBhZGQoJyUnLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIC8vIGRlY2ltYWwgZnJhY3Rpb25cbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9QT0lOVCkge1xuICAgICAgYWRkKHRva2VuLCBvdXRwdXRUb2tlbnMpO1xuICAgICAgaWYgKCFwYXJ0LmRhdGUpIHtcbiAgICAgICAgcGFydC5kZWNfZnJhY3Rpb25zID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudFBhdHRlcm4gPSAnZnJhYyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXhwb25lbnRcbiAgICBlbHNlIGlmICh0eXBlID09PSBUT0tFTl9FWFApIHtcbiAgICAgIC8vIEV4cG9uZW50IHBhdHRlcm4gcmVxdWlyZXMgc3ltYm9sIHRvIGRpcmVjdGx5IGZvbGxvdyBcIkVcIiBidXQgdGhlXG4gICAgICAvLyBzaWduYXR1cmUgc3ltYm9sLCBob3dldmVyLCBwcmVmaXhlcyB0aGUgZmlyc3QgZGlnaXQgb2YgdGhlIG1hbnRpc3NhXG4gICAgICBwYXJ0LmV4cG9uZW50aWFsID0gdHJ1ZTtcbiAgICAgIHBhcnQuZXhwX3BsdXMgPSB0b2tlbi52YWx1ZS5pbmNsdWRlcygnKycpO1xuICAgICAgY3VycmVudFBhdHRlcm4gPSAnbWFuJztcbiAgICAgIGFkZCh7IHR5cGU6ICdleHAnLCBwbHVzOiBwYXJ0LmV4cF9wbHVzIH0sIG91dHB1dFRva2Vucyk7XG4gICAgfVxuXG4gICAgLy8gc2tpcCB3aWR0aFxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX1NLSVApIHtcbiAgICAgIGFkZCh0b2tlbiwgb3V0cHV0VG9rZW5zKTtcbiAgICB9XG5cbiAgICAvLyBmaWxsIHNwYWNlIHdpdGggbmV4dCBjaGFyXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5fRklMTCkge1xuICAgICAgYWRkKHRva2VuLCBvdXRwdXRUb2tlbnMpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX0RCTlVNIHx8IHR5cGUgPT09IFRPS0VOX05BVE5VTSkge1xuICAgICAgLy8gVU5TVVBQT1JURUQ6XG4gICAgICAvLyAtIERCTnVtMSA9IE5hdE51bTRcbiAgICAgIC8vIC0gREJOdW0yID0gTmF0TnVtNVxuICAgICAgLy8gLSBEQk51bTMgPSBlaXRoZXIgTmF0TnVtNiBvciBOYXROdW0zP1xuICAgICAgLy8gLSBEQk51bTMgPSBOYXROdW0xMFxuICAgICAgLy8gTmF0TnVtOiBodHRwczovL3d3dy5vcGVub2ZmaWNlLm9yZy9hcGkvZG9jcy9jb21tb24vcmVmL2NvbS9zdW4vc3Rhci9pMThuL05hdGl2ZU51bWJlck1vZGUuaHRtbFxuICAgIH1cblxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOX0VSUk9SKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElsbGVnYWwgY2hhcmFjdGVyOiAke3BhdHRlcm5Tb3VyY2V9YCk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVua25vd24gdG9rZW4gJHt0eXBlfSBpbiAke3BhdHRlcm5Tb3VyY2V9YCk7XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBwYXJzZXJcbiAgICBsYXN0ID0gdG9rZW47XG4gIH1cbiAgcGFydC50b2tlbnNVc2VkID0gaW5kZXg7XG4gIHBhcnQucGF0dGVybiA9IHBhdHRlcm5Tb3VyY2U7XG5cbiAgLy8gUXVpY2tseSBkZXRlcm1pbmUgaWYgdGhpcyBwYXR0ZXJuIGlzIGNvbmRpdGlvbiBvbmx5XG4gIC8vIGlmIHNvLCB0aGVuIGFkZCBTdHJpbmcodmFsdWUpIGJ1dCB1c2luZyB0aGUgY29uZGl0aW9uXG4gIGlmICgvXigoPzpcXFtbXlxcXV0rXFxdKSspKDt8JCkvLnRlc3QocGFydC5wYXR0ZXJuKSAmJiAhL15cXFsoPzpoK3xtK3xzKylcXF0vLnRlc3QocGFydC5wYXR0ZXJuKSkge1xuICAgIGFkZCh7IHR5cGU6ICd0ZXh0JyB9LCBvdXRwdXRUb2tlbnMpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgYW4gaWxsZWdhbCBwYXR0ZXJuLiBXZSBjb3VsZCBzdXBwb3J0IHNvbWUgb2YgdGhpc1xuICAvLyBidXQgd2Ugc2lkZSB3aXRoIEV4Y2VsIGFuZCBkb24ndCBiZWNhdXNlIHRoZXkgbWFrZSBubyBzZW5zZS5cbiAgaWYgKFxuICAgIChwYXJ0LmZyYWN0aW9ucyAmJiBwYXJ0LmRlY19mcmFjdGlvbnMpIHx8XG4gICAgKHBhcnQuZ3JvdXBpbmcgJiYgIXBhcnQuaW50X3BhdHRlcm4ubGVuZ3RoKSB8fFxuICAgIChwYXJ0LmZyYWN0aW9ucyAmJiBwYXJ0LmV4cG9uZW50aWFsKSB8fFxuICAgIChwYXJ0LmZyYWN0aW9ucyAmJiAocGFydC5kZW5fcGF0dGVybi5sZW5ndGggKiBwYXJ0Lm51bV9wYXR0ZXJuLmxlbmd0aCkgPT09IDApIHx8XG4gICAgKGhhdmVTbGFzaCAmJiAhcGFydC5mcmFjdGlvbnMgJiYgIXBhcnQuZGF0ZSkgfHxcbiAgICAocGFydC5leHBvbmVudGlhbCAmJiAoKHBhcnQuaW50X3BhdHRlcm4ubGVuZ3RoIHx8IHBhcnQuZnJhY19wYXR0ZXJuLmxlbmd0aCkgKiBwYXJ0Lm1hbl9wYXR0ZXJuLmxlbmd0aCkgPT09IDApXG4gICkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgSW52YWxpZCBwYXR0ZXJuOiAke3BhdHRlcm5Tb3VyY2V9YCk7XG4gIH1cblxuICBjb25zdCBpbnRQYXR0ZXJuID0gcGFydC5pbnRfcGF0dGVybi5qb2luKCcnKTtcbiAgY29uc3QgbWFuUGF0dGVybiA9IHBhcnQubWFuX3BhdHRlcm4uam9pbignJyk7XG4gIGNvbnN0IGZyYWNQYXR0ZXJuID0gcGFydC5mcmFjX3BhdHRlcm4uam9pbignJyk7XG4gIG1pbk1heFBhZChpbnRQYXR0ZXJuLCBwYXJ0LCAnaW50Jyk7XG4gIGxldCBtaW4gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGludFBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaCA9IGludFBhdHRlcm5baW50UGF0dGVybi5sZW5ndGggLSAxIC0gaV07XG4gICAgaWYgKC9eWzAtOT9dLy50ZXN0KGNoKSkge1xuICAgICAgbWluID0gaSArIDE7XG4gICAgfVxuICB9XG4gIHBhcnQuaW50X21pbiA9IG1pbjtcblxuICBtaW5NYXhQYWQoZnJhY1BhdHRlcm4sIHBhcnQsICdmcmFjJyk7XG4gIG1pbk1heFBhZChtYW5QYXR0ZXJuLCBwYXJ0LCAnbWFuJyk7XG5cbiAgbGV0IG51bV9wYXQgPSBwYXJ0Lm51bV9wYXR0ZXJuLmpvaW4oJycpO1xuICAvLyBsZXQgZGVuX3BhdCA9IHBhcnQuZGVuX3BhdHRlcm4uam9pbignJyk7XG4gIGxldCBkZW5fcGF0ID0gcGFydC5kZW5fcGF0dGVyblswXSB8fCAnJztcbiAgY29uc3QgZW5mb3JjZV9wYWRkZWQgPSBkZW5fcGF0LmluY2x1ZGVzKCc/JykgfHwgbnVtX3BhdC5pbmNsdWRlcygnPycpO1xuICAvLyBudW1lcmljYWwgZGVub21pbmF0b3IgcGFkZGluZyB0eXBlIGlzIGluaGVyaXRlZCBmcm9tIG51bWVyYXRvciBwYWRkaW5nIHR5cGVcbiAgaWYgKGVuZm9yY2VfcGFkZGVkKSB7XG4gICAgZGVuX3BhdCA9IGRlbl9wYXQucmVwbGFjZSgvXFxkL2csICc/Jyk7XG4gICAgZGVuX3BhdCA9IGRlbl9wYXQucmVwbGFjZSgvIyQvZywgJz8nKTtcbiAgICBtaW5NYXhQYWQobnVtX3BhdCwgcGFydCwgJ251bScpO1xuICAgIG1pbk1heFBhZChkZW5fcGF0LCBwYXJ0LCAnZGVuJyk7XG4gICAgbnVtX3BhdCA9IG51bV9wYXQucmVwbGFjZSgvIyQvZywgJz8nKTtcbiAgfVxuICBlbHNlIHtcbiAgICBtaW5NYXhQYWQobnVtX3BhdCwgcGFydCwgJ251bScpO1xuICAgIG1pbk1heFBhZChkZW5fcGF0LCBwYXJ0LCAnZGVuJyk7XG4gIH1cblxuICBwYXJ0LmludF9wID0gaW50UGF0dGVybjtcbiAgcGFydC5tYW5fcCA9IG1hblBhdHRlcm47XG4gIHBhcnQubnVtX3AgPSBudW1fcGF0O1xuICBwYXJ0LmRlbl9wID0gZGVuX3BhdDtcblxuICBpZiAocGFydC5kZW5fcGF0dGVybi5sZW5ndGgpIHtcbiAgICAvLyBkZXRlY3QgYW5kIHNldCByb3VuZGluZyBmYWN0b3IgZm9yIGRlbm9taW5hdG9yXG4gICAgcGFydC5kZW5vbWluYXRvciA9IHBhcnNlSW50KHBhcnQuZGVuX3BhdHRlcm4uam9pbignJykucmVwbGFjZSgvXFxEL2csICcnKSwgMTApO1xuICB9XG5cbiAgcGFydC5pbnRlZ2VyID0gISFpbnRQYXR0ZXJuLmxlbmd0aDtcblxuICBpZiAoIXBhcnQuaW50ZWdlciAmJiAhcGFydC5leHBvbmVudGlhbCAmJiBmcmFjUGF0dGVybi5sZW5ndGgpIHtcbiAgICAvLyBpZiBubyBpbnRlZ2VyIGhhcyBiZWVuIGZvdW5kLCB3ZSBpbmplY3Qgb25lXG4gICAgY29uc3QgcG9pbnRJZHggPSBwYXJ0LnRva2Vucy5maW5kSW5kZXgoZCA9PiBkLnR5cGUgPT09ICdwb2ludCcpO1xuICAgIHBhcnQudG9rZW5zLnNwbGljZShwb2ludElkeCwgMCwgeyB0eXBlOiAnaW50JywgdmFsdWU6ICcjJyB9KTtcbiAgICBwYXJ0LmludGVnZXIgPSB0cnVlO1xuICAgIHBhcnQuaW50X3BhdHRlcm4gPSBbICcjJyBdO1xuICAgIHBhcnQuaW50X3AgPSAnIyc7XG4gIH1cblxuICAvLyBleHRyYSB3aGl0ZXNwYWNlIHJ1bGVzIGZvciB2dWxnYXIgZnJhY3Rpb25zXG4gIGlmIChwYXJ0LmZyYWN0aW9ucykge1xuICAgIC8vIGZyYWdtZW50IGJpdHMgYWZmZWN0IHN1cnJvdW5kaW5nIHdoaXRlc3BhY2VcbiAgICAvLyBpZiBlaXRoZXIgYml0IGlzIFwiI1wiLCB0aGUgd2hpdGVzcGFjZSBhcm91bmQgaXQsIGFuZFxuICAgIC8vIHRoZSBkaXYgc3ltYm9sLCBpcyByZW1vdmVkIGlmIHRoZSBiaXQgaXMgbm90IHNob3duXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRUb2tlbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjb25zdCB0b2sgPSBvdXRwdXRUb2tlbnNbaV07XG4gICAgICBpZiAodG9rLnR5cGUgIT09ICdzdHJpbmcnICYmIHRvay50eXBlICE9PSAnc3BhY2UnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV4dFR5cGUgPSBvdXRwdXRUb2tlbnNbaSArIDFdLnR5cGU7XG4gICAgICBpZiAobmV4dFR5cGUgPT09ICdudW0nKSB7XG4gICAgICAgIHRvay5ydWxlID0gJ251bStpbnQnO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobmV4dFR5cGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHRvay5ydWxlID0gJ251bSc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChuZXh0VHlwZSA9PT0gJ2RlbicpIHtcbiAgICAgICAgdG9rLnJ1bGUgPSAnZGVuJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyB0b2sucnVsZSA9ICc/Pz8nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBudW1iZXIgaXMgZnJhZ21lbnRlZCwgZ3JvdXBpbmcgc2hvdWxkIG5vdCBiZSBhcHBsaWVkXG4gIGlmIChwYXJ0Lmdyb3VwaW5nKSB7XG4gICAgaWYgKHBhcnQuaW50X3BhdHRlcm4ubGVuZ3RoID4gMSkge1xuICAgICAgcGFydC5ncm91cGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0O1xufVxuIiwiaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuL3JvdW5kLmpzJztcblxuY29uc3QgemVybyA9IHtcbiAgdG90YWw6IDEsXG4gIHNpZ246IDAsXG4gIHBlcmlvZDogMCxcbiAgaW50OiAxLFxuICBmcmFjOiAwXG59O1xuXG4vLyByZXR1cm5zIHRoZSBjb3VudCBvZiBkaWdpdHMgKGluY2x1ZGluZyAtIGFuZCAuKSBuZWVkIHRvIHJlcHJlc2VudCB0aGUgbnVtYmVyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1kZWMgKHZhbHVlLCBpbmNsX3NpZ24gPSB0cnVlKSB7XG4gIGNvbnN0IHYgPSBNYXRoLmFicyh2YWx1ZSk7XG5cbiAgLy8gc2hvcnRjdXQgemVyb1xuICBpZiAoIXYpIHsgcmV0dXJuIHplcm87IH1cblxuICBjb25zdCBzaWduU2l6ZSA9IChpbmNsX3NpZ24gJiYgdmFsdWUgPCAwKSA/IDEgOiAwO1xuICBjb25zdCBpbnRQYXJ0ID0gTWF0aC5mbG9vcih2KTtcbiAgY29uc3QgaW50U2l6ZSA9IE1hdGguZmxvb3IoTWF0aC5sb2cxMCh2KSArIDEpO1xuICBsZXQgcGVyaW9kU2l6ZSA9IDA7XG4gIGxldCBmcmFjU2l6ZSA9IDA7XG5cbiAgLy8gaXMgbm90IGFuIGludGVnZXJcbiAgaWYgKGludFBhcnQgIT09IHYpIHtcbiAgICBwZXJpb2RTaXplID0gMTtcblxuICAgIC8vIEI6IHRoaXMgaGFzIHR1cm5lZCBvdXQgdG8gYmUgbXVjaCBmYXN0ZXIgdGhhbiBhbGwgcHVyZSBtYXRoXG4gICAgLy8gYmFzZWQgc29sdXRpb25zIEkgd2FzIGFibGUgdG8gY29tZSB1cCB3aXRoIMKvXFxfKOODhClfL8KvXG4gICAgY29uc3QgbiA9IFN0cmluZyhcbiAgICAgIHJvdW5kKHYgKiAoMTAgKiogLWludFNpemUpLCAxNSlcbiAgICApO1xuICAgIGxldCBmID0gbi5sZW5ndGg7XG4gICAgbGV0IHogPSB0cnVlO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8PSBuLmxlbmd0aCkge1xuICAgICAgaWYgKG5baV0gPT09ICcuJykge1xuICAgICAgICAvLyBkaXNjb3VudCBwZXJpb2RcbiAgICAgICAgZi0tO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG5baV0gPT09ICcwJyAmJiB6KSB7XG4gICAgICAgIC8vIGxlYWRpbmcgemVyb3MgYmVmb3JlIHBlcmlvZCBhcmUgZGlzY291bnRlZFxuICAgICAgICBmLS07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gbm9uLXplcm8gZGlnaXRcbiAgICAgICAgeiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICBmcmFjU2l6ZSA9IGYgLSBpbnRTaXplO1xuXG4gICAgaWYgKGZyYWNTaXplIDwgMCkge1xuICAgICAgLy8gdGhlIG51bWJlciBpcyBub3QgcmVwcmVzZW50YWJsZSBbYnkgRXhjZWxdXG4gICAgICAvLyB0aGlzIHdvdWxkIGJlIHNvbWV0aGluZyBsaWtlIDEwMDAuMDAwMDAwMDAwMDAwMVxuICAgICAgLy8gaXQgd291bGQgbm9ybWFsbHkgZ2V0IHRydW5jYXRlZCB0byAxNSBzaWduaWZpY2FudCBmaWd1cmVzIGFuZFxuICAgICAgLy8gZW5kIHVwIGluIHRoZSBzYW1lIHBsYWNlIGFzIHRoZSBmb2xsb3dpbmcgZG9lczpcbiAgICAgIGZyYWNTaXplID0gMDtcbiAgICAgIHBlcmlvZFNpemUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG90YWw6IHNpZ25TaXplICsgTWF0aC5tYXgoaW50U2l6ZSwgMSkgKyBwZXJpb2RTaXplICsgZnJhY1NpemUsXG4gICAgZGlnaXRzOiBNYXRoLm1heChpbnRTaXplLCAwKSArIGZyYWNTaXplLFxuICAgIHNpZ246IHNpZ25TaXplLFxuICAgIHBlcmlvZDogcGVyaW9kU2l6ZSxcbiAgICBpbnQ6IE1hdGgubWF4KGludFNpemUsIDEpLFxuICAgIGZyYWM6IGZyYWNTaXplXG4gIH07XG59XG4iLCJpbXBvcnQgbnVtZGVjIGZyb20gJy4vbnVtZGVjLmpzJztcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSAnLi9yb3VuZC5qcyc7XG5cbmNvbnN0IGZpeExvY2FsZSA9IChzLCBsMTBuKSA9PiB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1xcLi8sIGwxMG4uZGVjaW1hbCk7XG59O1xuXG5jb25zdCBnZXRFeHAgPSAobiwgZXhwLCBsMTBuKSA9PiB7XG4gIGNvbnN0IHggPSBNYXRoLmFicyhleHApO1xuICBsZXQgbTtcbiAgaWYgKG4gPT09IDEpIHtcbiAgICBtID0gbjtcbiAgfVxuICBlbHNlIHtcbiAgICBtID0gcm91bmQobiwgNSk7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBmaXhMb2NhbGUobSArICcnLCBsMTBuKSxcbiAgICBsMTBuLmV4cG9uZW50LFxuICAgIChleHAgPCAwID8gbDEwbi5uZWdhdGl2ZSA6IGwxMG4ucG9zaXRpdmUpLFxuICAgIHggPCAxMCA/ICcwJyA6ICcnLFxuICAgIHhcbiAgXTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmFsIChyZXQsIHBhcnQsIHZhbHVlLCBsMTBuKSB7XG4gIGNvbnN0IGludCA9IHZhbHVlIHwgMDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIC8vIHNwZWNpYWwgY2FzZSBmb3I6IFs8LTI1XUdlbmVyYWw7Wz4yNV1HZW5lcmFsO0dlbmVyYWw7R2VuZXJhbFxuICAgIHJldC5wdXNoKHZhbHVlKTtcbiAgfVxuICBlbHNlIGlmICh2YWx1ZSA9PT0gaW50KSB7XG4gICAgcmV0LnB1c2goTWF0aC5hYnMoaW50KSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgdiA9IE1hdGguYWJzKHZhbHVlKTtcbiAgICAvLyBGSVhNRTogaXQgaXMgYmVzdCBpZiBudW1kZWMgcmV0dXJucyBhbGwgb2YgdGhlc2VcbiAgICBsZXQgZXhwID0gdlxuICAgICAgPyBNYXRoLmZsb29yKE1hdGgubG9nMTAodikpXG4gICAgICA6IDA7XG4gICAgbGV0IG4gPSB2ICogKDEwICoqIC1leHApO1xuICAgIGlmIChuID09PSAxMCkge1xuICAgICAgbiA9IDE7XG4gICAgICBleHArKztcbiAgICB9XG5cbiAgICAvLyBUaGUgYXBwbGljYXRpb24gc2hhbGwgYXR0ZW1wdCB0byBkaXNwbGF5IHRoZSBmdWxsIG51bWJlclxuICAgIC8vIHVwIHRvIDExIGRpZ2l0cyAoaW5jLiBkZWNpbWFsIHBvaW50KS5cbiAgICBjb25zdCBudW1fZGlnID0gbnVtZGVjKHYpO1xuICAgIGlmIChleHAgPj0gLTQgJiYgZXhwIDw9IC0xKSB7XG4gICAgICBjb25zdCBvID0gdi50b1ByZWNpc2lvbigxMCArIGV4cCkucmVwbGFjZSgvXFwuPzArJC8sICcnKTtcbiAgICAgIHJldC5wdXNoKGZpeExvY2FsZShvLCBsMTBuKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cCA9PT0gMTApIHtcbiAgICAgIGNvbnN0IG8gPSB2LnRvRml4ZWQoMTApXG4gICAgICAgIC5zbGljZSgwLCAxMilcbiAgICAgICAgLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gICAgICByZXQucHVzaChmaXhMb2NhbGUobywgbDEwbikpO1xuICAgIH1cbiAgICBlbHNlIGlmIChNYXRoLmFicyhleHApIDw9IDkpIHtcbiAgICAgIGlmIChudW1fZGlnLnRvdGFsIDw9IDExKSB7XG4gICAgICAgIGNvbnN0IG8gPSByb3VuZCh2LCA5KS50b0ZpeGVkKG51bV9kaWcuZnJhYyk7XG4gICAgICAgIHJldC5wdXNoKGZpeExvY2FsZShvLCBsMTBuKSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChleHAgPT09IDkpIHtcbiAgICAgICAgcmV0LnB1c2goTWF0aC5mbG9vcih2KSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChleHAgPj0gMCAmJiBleHAgPCA5KSB7XG4gICAgICAgIHJldC5wdXNoKGZpeExvY2FsZShTdHJpbmcocm91bmQodiwgOSAtIGV4cCkpLCBsMTBuKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0LnB1c2goLi4uZ2V0RXhwKG4sIGV4cCwgbDEwbikpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChudW1fZGlnLnRvdGFsID49IDEyKSB7XG4gICAgICByZXQucHVzaCguLi5nZXRFeHAobiwgZXhwLCBsMTBuKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0LnB1c2goZml4TG9jYWxlKHJvdW5kKHYsIDkpLnRvRml4ZWQobnVtX2RpZy5mcmFjKSwgbDEwbikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiLyoqXG4gKiBAaWdub3JlXG4gKiBAcGFyYW0ge3N0cmluZ30gYyBJbnN0cnVjdGlvbiBjaGFyYWN0ZXIgKFsnIycsICc/JywgJzAnXSlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW25ic3A9ZmFsc2VdIFVzZSBub25icmVha2luZyBzcGFjZSBvciBub3Q/XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBQYWRkaW5nIGNoYXJhY3RlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFkIChjLCBuYnNwID0gZmFsc2UpIHtcbiAgaWYgKGMgPT09ICcwJykge1xuICAgIHJldHVybiAnMCc7XG4gIH1cbiAgZWxzZSBpZiAoYyA9PT0gJz8nKSB7XG4gICAgcmV0dXJuIG5ic3AgPyAnXFx1MDBhMCcgOiAnICc7XG4gIH1cbiAgLy8gaWYgKGMgPT09ICcjJylcbiAgcmV0dXJuICcnO1xufVxuIiwiaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuL3JvdW5kLmpzJztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi9jbGFtcC5qcyc7XG5pbXBvcnQgeyBkZWMyZnJhYyB9IGZyb20gJy4vZGVjMmZyYWMuanMnO1xuaW1wb3J0IHsgZ2VuZXJhbCB9IGZyb20gJy4vZ2VuZXJhbC5qcyc7XG5pbXBvcnQgeyB0b1lNRCB9IGZyb20gJy4vdG9ZTUQuanMnO1xuaW1wb3J0IHsgZGVmYXVsdExvY2FsZSB9IGZyb20gJy4vbG9jYWxlLmpzJztcbmltcG9ydCB7XG4gIHVfRFNFQywgdV9DU0VDLCB1X01TRUMsXG4gIEVQT0NIXzEzMTcsXG4gIE1JTl9TX0RBVEUsIE1BWF9TX0RBVEUsXG4gIE1JTl9MX0RBVEUsIE1BWF9MX0RBVEVcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgcGFkIH0gZnJvbSAnLi9wYWQuanMnO1xuXG5jb25zdCBEQVlTSVpFID0gODY0MDA7XG5cbmNvbnN0IGdldEV4cG9uZW50ID0gKG51bSwgaW50X21heCA9IDApID0+IHtcbiAgY29uc3QgZXhwID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKG51bSkpO1xuICByZXR1cm4gKGludF9tYXggPiAxKVxuICAgID8gTWF0aC5mbG9vcihleHAgLyBpbnRfbWF4KSAqIGludF9tYXhcbiAgICA6IGV4cDtcbn07XG5cbmNvbnN0IGRhdGVPdmVyZmxvd3MgPSAoaW5wdXRWYWx1ZSwgcm91bmRlZFZhbHVlLCBiaWdSYW5nZSkgPT4ge1xuICBpZiAoYmlnUmFuZ2UpIHtcbiAgICByZXR1cm4gKGlucHV0VmFsdWUgPCBNSU5fTF9EQVRFIHx8IHJvdW5kZWRWYWx1ZSA+PSBNQVhfTF9EQVRFKTtcbiAgfVxuICByZXR1cm4gKGlucHV0VmFsdWUgPCBNSU5fU19EQVRFIHx8IHJvdW5kZWRWYWx1ZSA+PSBNQVhfU19EQVRFKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5QYXJ0ICh2YWx1ZSwgcGFydCwgb3B0cywgbDEwbl8pIHtcbiAgbGV0IG1hbnRpc3NhID0gJyc7XG4gIGxldCBtYW50aXNzYV9zaWduID0gJyc7XG4gIGxldCBudW1lcmF0b3IgPSAnJztcbiAgbGV0IGRlbm9taW5hdG9yID0gJyc7XG4gIGxldCBmcmFjdGlvbiA9ICcnO1xuICBsZXQgaW50ZWdlciA9ICcnO1xuICBsZXQgZXhwID0gMDtcblxuICBsZXQgZGF0ZSA9IDA7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKSB7XG4gICAgaWYgKHZhbHVlIDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlID49IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSB7XG4gICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdHMuYmlnaW50RXJyb3JOdW1iZXJcbiAgICAgICAgPyBTdHJpbmcodmFsdWUpXG4gICAgICAgIDogb3B0cy5vdmVyZmxvdztcbiAgICB9XG4gICAgZGF0ZSA9IHZhbHVlO1xuICB9XG4gIGVsc2Uge1xuICAgIGRhdGUgPSBNYXRoLnRydW5jKHZhbHVlKTtcbiAgfVxuICBsZXQgdGltZSA9IDA7XG4gIGxldCB5ZWFyID0gMDtcbiAgbGV0IG1vbnRoID0gMTtcbiAgbGV0IGRheSA9IDA7XG4gIGxldCB3ZWVrZGF5ID0gMDtcbiAgbGV0IGhvdXIgPSAwO1xuICBsZXQgbWludXRlID0gMDtcbiAgbGV0IHNlY29uZCA9IDA7XG4gIGxldCBzdWJzZWMgPSAwO1xuXG4gIGNvbnN0IGwxMG4gPSBsMTBuXyB8fCBkZWZhdWx0TG9jYWxlO1xuXG4gIC8vIHNjYWxlIG51bWJlclxuICBpZiAoIXBhcnQudGV4dCAmJiBpc0Zpbml0ZShwYXJ0LnNjYWxlKSAmJiBwYXJ0LnNjYWxlICE9PSAxKSB7XG4gICAgdmFsdWUgPSBjbGFtcCh2YWx1ZSAqIHBhcnQuc2NhbGUpO1xuICB9XG5cbiAgLy8gY2FsYyBleHBvbmVudFxuICBpZiAocGFydC5leHBvbmVudGlhbCkge1xuICAgIGxldCB2ID0gTWF0aC5hYnModmFsdWUpO1xuICAgIGlmICh2KSB7XG4gICAgICBjb25zdCBzY2FsZSA9IDEwICoqIC1nZXRFeHBvbmVudCh2LCBwYXJ0LmludF9tYXgpO1xuICAgICAgY29uc3QgdGVtcFZhbHVlID0gcm91bmQodiAqIHNjYWxlLCBwYXJ0LmZyYWNfbWF4KSAvIHNjYWxlO1xuICAgICAgZXhwID0gZ2V0RXhwb25lbnQodGVtcFZhbHVlLCBwYXJ0LmludF9tYXgpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgJiYgIXBhcnQuaW50ZWdlcikge1xuICAgICAgLy8gd2hlbiB0aGVyZSBpc24ndCBhbiBpbnRlZ2VyIHBhcnQsIHRoZSBleHAgZ2V0cyBzaGlmdGVkIGJ5IDFcbiAgICAgIGV4cCsrO1xuICAgIH1cbiAgICB2ID0gdiAqICgxMCAqKiAtZXhwKTtcbiAgICB2YWx1ZSA9ICh2YWx1ZSA8IDApID8gLXYgOiB2O1xuICAgIG1hbnRpc3NhICs9IE1hdGguYWJzKGV4cCk7XG4gIH1cblxuICAvLyBpbnRlZ2VyIHRvIHRleHRcbiAgaWYgKHBhcnQuaW50ZWdlcikge1xuICAgIGNvbnN0IGkgPSBNYXRoLmFicyhyb3VuZCh2YWx1ZSwgcGFydC5mcmFjdGlvbnMgPyAxIDogcGFydC5mcmFjX21heCkpO1xuICAgIGludGVnZXIgKz0gKGkgPCAxKSA/ICcnIDogTWF0aC5mbG9vcihpKTtcbiAgfVxuICAvLyBpbnRlZ2VyIGdyb3VwaW5nXG4gIGNvbnN0IGdyb3VwX3ByaSA9IG9wdHMuZ3JvdXBpbmdbMF0gPz8gMztcbiAgY29uc3QgZ3JvdXBfc2VjID0gb3B0cy5ncm91cGluZ1sxXSA/PyBncm91cF9wcmk7XG5cbiAgLy8gZnJhY3Rpb24gdG8gdGV4dFxuICBpZiAocGFydC5kZWNfZnJhY3Rpb25zKSB7XG4gICAgZnJhY3Rpb24gPSBTdHJpbmcocm91bmQodmFsdWUsIHBhcnQuZnJhY19tYXgpKS5zcGxpdCgnLicpWzFdIHx8ICcnO1xuICB9XG5cbiAgLy8gdXNpbmcgdnVsZ2FyIGZyYWN0aW9uc1xuICBjb25zdCBmaXhlZF9zbGFzaCA9ICFwYXJ0LmVycm9yICYmIChwYXJ0Lm51bV9wLmluY2x1ZGVzKCcwJykgfHwgcGFydC5kZW5fcC5pbmNsdWRlcygnMCcpKTtcblxuICBsZXQgaGF2ZV9mcmFjdGlvbiA9IGZpeGVkX3NsYXNoO1xuICBpZiAocGFydC5mcmFjdGlvbnMpIHtcbiAgICBoYXZlX2ZyYWN0aW9uID0gZml4ZWRfc2xhc2ggfHwgISEodmFsdWUgJSAxKTtcbiAgICBjb25zdCBfZGVjID0gTWF0aC5hYnMocGFydC5pbnRlZ2VyID8gdmFsdWUgJSAxIDogdmFsdWUpO1xuICAgIGlmIChfZGVjKSB7XG4gICAgICBoYXZlX2ZyYWN0aW9uID0gdHJ1ZTtcbiAgICAgIGlmIChwYXJ0LmRlbm9taW5hdG9yICYmIGlzRmluaXRlKHBhcnQuZGVub21pbmF0b3IpKSB7XG4gICAgICAgIC8vIHByZWRlZmluZWQgZGVub21pbmF0b3JcbiAgICAgICAgZGVub21pbmF0b3IgKz0gcGFydC5kZW5vbWluYXRvcjtcbiAgICAgICAgbnVtZXJhdG9yICs9IHJvdW5kKF9kZWMgKiBwYXJ0LmRlbm9taW5hdG9yKTtcbiAgICAgICAgaWYgKG51bWVyYXRvciA9PT0gJzAnKSB7XG4gICAgICAgICAgbnVtZXJhdG9yID0gJyc7XG4gICAgICAgICAgZGVub21pbmF0b3IgPSAnJztcbiAgICAgICAgICBoYXZlX2ZyYWN0aW9uID0gZml4ZWRfc2xhc2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBmcnQgPSBkZWMyZnJhYyhfZGVjLCBJbmZpbml0eSwgcGFydC5kZW5fbWF4KTtcbiAgICAgICAgbnVtZXJhdG9yICs9IGZydFswXTtcbiAgICAgICAgZGVub21pbmF0b3IgKz0gZnJ0WzFdO1xuICAgICAgICBpZiAocGFydC5pbnRlZ2VyICYmIG51bWVyYXRvciA9PT0gJzAnKSB7XG4gICAgICAgICAgbnVtZXJhdG9yID0gJyc7XG4gICAgICAgICAgZGVub21pbmF0b3IgPSAnJztcbiAgICAgICAgICBoYXZlX2ZyYWN0aW9uID0gZml4ZWRfc2xhc2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoIXZhbHVlICYmICFwYXJ0LmludGVnZXIpIHtcbiAgICAgIGhhdmVfZnJhY3Rpb24gPSB0cnVlO1xuICAgICAgbnVtZXJhdG9yID0gJzAnO1xuICAgICAgZGVub21pbmF0b3IgPSAnMSc7XG4gICAgfVxuICAgIGlmIChwYXJ0LmludGVnZXIgJiYgIWhhdmVfZnJhY3Rpb24gJiYgIU1hdGgudHJ1bmModmFsdWUpKSB7XG4gICAgICBpbnRlZ2VyID0gJzAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIHVzaW5nIGRhdGUvdGltZVxuICBpZiAocGFydC5kYXRlKSB7XG4gICAgZGF0ZSA9IE1hdGgudHJ1bmModmFsdWUpO1xuICAgIGNvbnN0IHQgPSBEQVlTSVpFICogKHZhbHVlIC0gZGF0ZSk7XG4gICAgdGltZSA9IE1hdGguZmxvb3IodCk7IC8vIGluIHNlY29uZHNcbiAgICAvLyBcImVwc2lsb25cIiBjb3JyZWN0aW9uXG4gICAgc3Vic2VjID0gdCAtIHRpbWU7XG4gICAgaWYgKE1hdGguYWJzKHN1YnNlYykgPCAxZS02KSB7IC8vIDAuMDAwMDAxXG4gICAgICBzdWJzZWMgPSAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdWJzZWMgPiAwLjk5OTkpIHtcbiAgICAgIHN1YnNlYyA9IDA7XG4gICAgICB0aW1lICs9IDE7XG4gICAgICBpZiAodGltZSA9PT0gREFZU0laRSkge1xuICAgICAgICB0aW1lID0gMDtcbiAgICAgICAgZGF0ZSArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3Vic2VjKSB7XG4gICAgICAvLyByb3VuZCB0aW1lIGJhc2VkIG9uIHNtYWxsZXN0IHVzZWQgdW5pdFxuICAgICAgY29uc3QgbWluVSA9IHBhcnQuZGF0ZSAmIHVfTVNFQyB8fCBwYXJ0LmRhdGUgJiB1X0NTRUMgfHwgcGFydC5kYXRlICYgdV9EU0VDO1xuICAgICAgaWYgKFxuICAgICAgICAobWluVSA9PT0gdV9NU0VDICYmIHN1YnNlYyA+IDAuOTk5NSkgfHxcbiAgICAgICAgKG1pblUgPT09IHVfQ1NFQyAmJiBzdWJzZWMgPiAwLjk5NSkgfHxcbiAgICAgICAgKG1pblUgPT09IHVfRFNFQyAmJiBzdWJzZWMgPiAwLjk1KSB8fFxuICAgICAgICAoIW1pblUgJiYgc3Vic2VjID49IDAuNSlcbiAgICAgICkge1xuICAgICAgICB0aW1lKys7XG4gICAgICAgIHN1YnNlYyA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHNlcmlhbCBkYXRlL3RpbWUgdG8gZ3JlZ29yaWFuIGNhbGVuZGFyXG4gICAgaWYgKGRhdGUgfHwgcGFydC5kYXRlX3N5c3RlbSkge1xuICAgICAgY29uc3QgZG91dCA9IHRvWU1EKHZhbHVlLCBwYXJ0LmRhdGVfc3lzdGVtLCBvcHRzLmxlYXAxOTAwKTtcbiAgICAgIHllYXIgPSBkb3V0WzBdO1xuICAgICAgbW9udGggPSBkb3V0WzFdO1xuICAgICAgZGF5ID0gZG91dFsyXTtcbiAgICB9XG4gICAgaWYgKHRpbWUpIHtcbiAgICAgIGNvbnN0IHggPSAodGltZSA8IDApID8gREFZU0laRSArIHRpbWUgOiB0aW1lO1xuICAgICAgc2Vjb25kID0gTWF0aC5mbG9vcih4KSAlIDYwO1xuICAgICAgbWludXRlID0gTWF0aC5mbG9vcih4IC8gNjApICUgNjA7XG4gICAgICBob3VyID0gTWF0aC5mbG9vcigoeCAvIDYwKSAvIDYwKSAlIDYwO1xuICAgIH1cbiAgICB3ZWVrZGF5ID0gKDYgKyBkYXRlKSAlIDc7XG4gICAgaWYgKHBhcnQuZGF0ZV9ldmFsICYmIGRhdGVPdmVyZmxvd3ModmFsdWUsIGRhdGUgKyAodGltZSAvIERBWVNJWkUpLCBvcHRzLmRhdGVTcGFuTGFyZ2UpKSB7XG4gICAgICAvLyBpZiB2YWx1ZSBpcyBvdXQgb2YgYm91bmRzIGFuZCBmb3JtYXR0aW5nIGlzIGRhdGUgRXhjZWwgZW1pdHMgYVxuICAgICAgLy8gc3RyZWFtIG9mIFwiIyMjIyMjXCIgdGhhdCBmaWxscyB0aGUgY2VsbCB3aWR0aC5cbiAgICAgIC8vIFRoaXMgZG9lc24ndCBoYXBwZW4sIGlmIHRoZSBvbmx5IGRhdGUgdG9rZW5zIGFyZSBcImVsYXBzZWQgdGltZVwiIHRva2Vucy5cbiAgICAgIC8vIENvZGUgaW5zdGVhZCBmb2xsb3dzIHRoZSBURVhUIGZ1bmN0aW9uIHdoaWNoIGVtaXRzIGEgI1ZBTFVFISBlcnJvci5cbiAgICAgIGlmIChvcHRzLmRhdGVFcnJvclRocm93cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGUgb3V0IG9mIGJvdW5kcycpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdHMuZGF0ZUVycm9yTnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IF9yZXQgPSB2YWx1ZSA8IDAgPyBbIGwxMG4ubmVnYXRpdmUgXSA6IFtdO1xuICAgICAgICByZXR1cm4gZ2VuZXJhbChfcmV0LCB7fSwgdmFsdWUsIGwxMG4pLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdHMub3ZlcmZsb3c7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGFkUSA9IHBhZCgnPycsIG9wdHMubmJzcCk7XG5cbiAgLy8gbWFudGlzc2Egc2lnblxuICBpZiAoZXhwIDwgMCkge1xuICAgIG1hbnRpc3NhX3NpZ24gPSAnLSc7XG4gIH1cbiAgZWxzZSBpZiAocGFydC5leHBfcGx1cykge1xuICAgIG1hbnRpc3NhX3NpZ24gPSAnKyc7XG4gIH1cblxuICBjb25zdCByZXQgPSBbXTtcblxuICBjb25zdCBkaWdpdHNTdGFydCA9IChudW1zdHIsIHBhdHRlcm4sIHBhcnQsIG9mZnNldCkgPT4ge1xuICAgIGNvbnN0IGwgPSAoIW9mZnNldCAmJiBudW1zdHIubGVuZ3RoID4gcGF0dGVybi5sZW5ndGgpXG4gICAgICA/IHBhcnQubGVuZ3RoICsgbnVtc3RyLmxlbmd0aCAtIHBhdHRlcm4ubGVuZ3RoXG4gICAgICA6IHBhcnQubGVuZ3RoO1xuICAgIGlmIChudW1zdHIubGVuZ3RoIDwgcGF0dGVybi5sZW5ndGgpIHtcbiAgICAgIG9mZnNldCArPSBudW1zdHIubGVuZ3RoIC0gcGF0dGVybi5sZW5ndGg7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXQucHVzaChudW1zdHJbaSArIG9mZnNldF0gfHwgcGFkKHBhcnRbaV0sIG9wdHMubmJzcCkpO1xuICAgIH1cbiAgICByZXR1cm4gbDtcbiAgfTtcblxuICBsZXQgZGVub21pbmF0b3JfZml4ZWQgPSBmYWxzZTtcbiAgY29uc3QgY291bnRlciA9IHsgaW50OiAwLCBmcmFjOiAwLCBtYW46IDAsIG51bTogMCwgZGVuOiAwIH07XG4gIGZvciAobGV0IHRpID0gMCwgdGwgPSBwYXJ0LnRva2Vucy5sZW5ndGg7IHRpIDwgdGw7IHRpKyspIHtcbiAgICBjb25zdCB0b2sgPSBwYXJ0LnRva2Vuc1t0aV07XG4gICAgY29uc3QgdG9rZW5UeXBlID0gdG9rLnR5cGU7XG4gICAgY29uc3QgbGVuID0gdG9rLm51bSA/IHRvay5udW0ubGVuZ3RoIDogMDtcblxuICAgIGlmICh0b2tlblR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBzcGVjaWFsIHJ1bGVzIG1heSBhcHBseSBpZiBuZXh0IG9yIHByZXYgaXMgbnVtZXJhdG9yIG9yIGRlbm9taW5hdG9yXG4gICAgICBpZiAodG9rLnJ1bGUpIHtcbiAgICAgICAgaWYgKHRvay5ydWxlID09PSAnbnVtJykge1xuICAgICAgICAgIGlmIChoYXZlX2ZyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXQucHVzaCh0b2sudmFsdWUucmVwbGFjZSgvIC9nLCBwYWRRKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHBhcnQubnVtX21pbiA+IDAgfHwgcGFydC5kZW5fbWluID4gMCkge1xuICAgICAgICAgICAgLy8gRklYTUU6IHJldC5wdXNoKCcnLnJlcGVhdCh0b2sudmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgIHJldC5wdXNoKHRvay52YWx1ZS5yZXBsYWNlKC8uL2csIHBhZFEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG9rLnJ1bGUgPT09ICdudW0raW50Jykge1xuICAgICAgICAgIGlmIChoYXZlX2ZyYWN0aW9uICYmIGludGVnZXIpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHRvay52YWx1ZS5yZXBsYWNlKC8gL2csIHBhZFEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKHBhcnQuZGVuX21pbiA+IDApICYmIChpbnRlZ2VyIHx8IHBhcnQubnVtX21pbikpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHRvay52YWx1ZS5yZXBsYWNlKC8uL2csIHBhZFEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG9rLnJ1bGUgPT09ICdkZW4nKSB7XG4gICAgICAgICAgaWYgKGhhdmVfZnJhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHRvay52YWx1ZS5yZXBsYWNlKC8gL2csIHBhZFEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAocGFydC5kZW5fbWluID4gMCB8fCBwYXJ0LmRlbl9taW4gPiAwKSB7XG4gICAgICAgICAgICByZXQucHVzaCh0b2sudmFsdWUucmVwbGFjZSgvLi9nLCBwYWRRKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0LnB1c2godG9rLnZhbHVlLnJlcGxhY2UoLyAvZywgcGFkUSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdzcGFjZScpIHtcbiAgICAgIGlmICh0b2sucnVsZSA9PT0gJ251bStpbnQnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoaGF2ZV9mcmFjdGlvbiB8fCBwYXJ0Lm51bV9taW4gfHwgcGFydC5kZW5fbWluKSAmJlxuICAgICAgICAgIChpbnRlZ2VyIHx8IHBhcnQubnVtX21pbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0LnB1c2gocGFkUSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChwYWRRKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnZXJyb3InKSB7XG4gICAgICAvLyB0b2tlbiB1c2VkIHRvIGRlZmluZSBpbnZhbGlkIHBhdHRlcm5cbiAgICAgIHJldC5wdXNoKG9wdHMuaW52YWxpZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ3BvaW50Jykge1xuICAgICAgLy8gRXhjZWwgYWx3YXlzIGVtaXRzIGEgcGVyaW9kOiBURVhUKDAsIFwiIy4jXCIpID0+IFwiLlwiXG4gICAgICByZXQucHVzaChwYXJ0LmRhdGUgPyB0b2sudmFsdWUgOiBsMTBuLmRlY2ltYWwpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdnZW5lcmFsJykge1xuICAgICAgZ2VuZXJhbChyZXQsIHBhcnQsIHZhbHVlLCBsMTBuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnZXhwJykge1xuICAgICAgcmV0LnB1c2gobDEwbi5leHBvbmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ21pbnVzJykge1xuICAgICAgaWYgKHRvay52b2xhdGlsZSAmJiBwYXJ0LmRhdGUpIHtcbiAgICAgICAgLy8gZG9uJ3QgZW1pdCB0aGUgcHJlcGVuZGVkIG1pbnVzIGlmIHRoaXMgaXMgYSBkYXRlXG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0b2sudm9sYXRpbGUgJiYgKHZhbHVlID49IDAgfHwgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgICAgLy8gZG9uJ3QgZW1pdCB2b2xhdGlsZSBtaW51cyBmb3IgcG9zaXRpdmUgbnVtYmVyc1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodG9rLnZvbGF0aWxlICYmICFwYXJ0LmZyYWN0aW9ucyAmJiAocGFydC5pbnRlZ2VyIHx8IHBhcnQuZGVjX2ZyYWN0aW9ucykpIHtcbiAgICAgICAgLy8gbWludXMgaXMgb25seSBzaG93biBpZiB0aGVyZSBpcyBhIG5vbi16ZXJvIGRpZ2l0IHByZXNlbnRcbiAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiAoaW50ZWdlciAmJiBpbnRlZ2VyICE9PSAnMCcpIHx8IGZyYWN0aW9uKSB7XG4gICAgICAgICAgcmV0LnB1c2gobDEwbi5uZWdhdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChsMTBuLm5lZ2F0aXZlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAncGx1cycpIHtcbiAgICAgIHJldC5wdXNoKGwxMG4ucG9zaXRpdmUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgcmV0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdmaWxsJykge1xuICAgICAgLy8gSWYgdXNlciBoYXMgcHJvdmlkZWQgYSB0b2tlbiB0byBzaWduYWwgdGhhdCBuZXh0IGNoYXIgaXMgYSBmaWxsIGNoYXIsXG4gICAgICAvLyB0aGVuIGVtaXQgdGhlIHRoYXQgcGx1cyB0aGUgZmlsbCBjaGFyLiBCeSBkZWZhdWx0IHRoaXMgZG9lcyB3aGF0IHRoZVxuICAgICAgLy8gVEVYVCBmdW5jdGlvbiBkb2VzIGluIHRoaXMgY2FzZTogRW1pdHMgbm90aGluZy5cbiAgICAgIGlmIChvcHRzLmZpbGxDaGFyKSB7XG4gICAgICAgIHJldC5wdXNoKG9wdHMuZmlsbENoYXIsIHRvay52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ3NraXAnKSB7XG4gICAgICAvLyBJZiB1c2VyIGhhcyBwcm92aWRlZCBhIHRva2VuIHRvIHNpZ25hbCB0aGF0IG5leHQgY2hhciBpcyBhIGZpbGwgY2hhcixcbiAgICAgIC8vIHRoZW4gZW1pdCB0aGUgdGhhdCBwbHVzIHRoZSBmaWxsIGNoYXIuIEJ5IGRlZmF1bHQgdGhpcyBkb2VzIHdoYXQgdGhlXG4gICAgICAvLyBURVhUIGZ1bmN0aW9uIGRvZXMgaW4gdGhpcyBjYXNlOiBFbWl0cyBhIHNwYWNlLlxuICAgICAgaWYgKG9wdHMuc2tpcENoYXIpIHtcbiAgICAgICAgcmV0LnB1c2gob3B0cy5za2lwQ2hhciwgdG9rLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChvcHRzLm5ic3AgPyAnXFx1MDBhMCcgOiAnICcpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdkaXYnKSB7XG4gICAgICBpZiAoaGF2ZV9mcmFjdGlvbikge1xuICAgICAgICByZXQucHVzaCgnLycpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocGFydC5udW1fbWluID4gMCB8fCBwYXJ0LmRlbl9taW4gPiAwKSB7XG4gICAgICAgIHJldC5wdXNoKHBhZFEpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldC5wdXNoKHBhZCgnIycsIG9wdHMubmJzcCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdpbnQnKSB7XG4gICAgICAvLyBudW1iZXIgaXNuJ3QgZnJhZ21lbnRlZFxuICAgICAgaWYgKHBhcnQuaW50X3BhdHRlcm4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHB0ID0gcGFydC5pbnRfcDtcbiAgICAgICAgY29uc3QgbCA9IE1hdGgubWF4KHBhcnQuaW50X21pbiwgaW50ZWdlci5sZW5ndGgpO1xuICAgICAgICBsZXQgZGlnaXRzID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSBsOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgY29uc3QgZCA9IGludGVnZXIuY2hhckF0KGludGVnZXIubGVuZ3RoIC0gaSk7XG4gICAgICAgICAgY29uc3QgcCA9IGQgPyAnJyA6IHB0LmNoYXJBdChwdC5sZW5ndGggLSBpKSB8fCBwdFswXTtcbiAgICAgICAgICBsZXQgc2VwID0gJyc7XG4gICAgICAgICAgaWYgKHBhcnQuZ3JvdXBpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSAoaSAtIDEpIC0gZ3JvdXBfcHJpO1xuICAgICAgICAgICAgaWYgKG4gPj0gMCAmJiAhKG4gJSBncm91cF9zZWMpKSB7XG4gICAgICAgICAgICAgIHNlcCA9IChkIHx8IHAgPT09ICcwJylcbiAgICAgICAgICAgICAgICA/IGwxMG4uZ3JvdXBcbiAgICAgICAgICAgICAgICA6IHBhZCgnPycsIG9wdHMubmJzcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpZ2l0cyArPSAoZCB8fCBwYWQocCwgb3B0cy5uYnNwKSkgKyBzZXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0LnB1c2goZGlnaXRzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb3VudGVyLmludCArPSBkaWdpdHNTdGFydChpbnRlZ2VyLCBwYXJ0LmludF9wLCB0b2subnVtLCBjb3VudGVyLmludCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ2ZyYWMnKSB7XG4gICAgICBjb25zdCBvID0gY291bnRlci5mcmFjO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICByZXQucHVzaChmcmFjdGlvbltpICsgb10gfHwgcGFkKHRvay5udW1baV0sIG9wdHMubmJzcCkpO1xuICAgICAgfVxuICAgICAgY291bnRlci5mcmFjICs9IGxlbjtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnbWFuJykge1xuICAgICAgLy8gbWFudGlzc2Egc2lnbiBpcyBhdHRhY2hlZCB0byB0aGUgZmlyc3QgZGlnaXQsIG5vdCB0aGUgZXhwb25lbnQgc3ltYm9sXG4gICAgICAvLyBcIjBFKyAwXCIgd2lsbCBwcmludCBhcyBcIjFFICsxMlwiXG4gICAgICBpZiAoIWNvdW50ZXJbdG9rZW5UeXBlXSAmJiAhY291bnRlci5tYW4pIHtcbiAgICAgICAgcmV0LnB1c2gobWFudGlzc2Ffc2lnbik7XG4gICAgICB9XG4gICAgICBjb3VudGVyLm1hbiArPSBkaWdpdHNTdGFydChtYW50aXNzYSwgcGFydC5tYW5fcCwgdG9rLm51bSwgY291bnRlci5tYW4pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdudW0nKSB7XG4gICAgICBjb3VudGVyLm51bSArPSBkaWdpdHNTdGFydChudW1lcmF0b3IsIHBhcnQubnVtX3AsIHRvay5udW0sIGNvdW50ZXIubnVtKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnZGVuJykge1xuICAgICAgY29uc3QgbyA9IGNvdW50ZXIuZGVuO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBsZXQgZGlnaXQgPSBkZW5vbWluYXRvcltpICsgb107XG4gICAgICAgIGlmICghZGlnaXQpIHtcbiAgICAgICAgICBjb25zdCBjaCA9IHRvay5udW1baV07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgJzEyMzQ1Njc4OScuaW5jbHVkZXMoY2gpIHx8XG4gICAgICAgICAgICAoZGVub21pbmF0b3JfZml4ZWQgJiYgY2ggPT09ICcwJylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGRlbm9taW5hdG9yX2ZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRpZ2l0ID0gb3B0cy5uYnNwID8gJ1xcdTAwYTAnIDogJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgICFkZW5vbWluYXRvcl9maXhlZCAmJlxuICAgICAgICAgICAgKGkgPT09IGxlbiAtIDEpICYmXG4gICAgICAgICAgICBjaCA9PT0gJzAnICYmXG4gICAgICAgICAgICAhZGVub21pbmF0b3JcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZ2l0ID0gJzEnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpZ2l0ID0gcGFkKGNoLCBvcHRzLm5ic3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXQucHVzaChkaWdpdCk7XG4gICAgICB9XG4gICAgICBjb3VudGVyLmRlbiArPSBsZW47XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ3llYXInKSB7XG4gICAgICBpZiAoeWVhciA8IDApIHsgcmV0LnB1c2gobDEwbi5uZWdhdGl2ZSk7IH1cbiAgICAgIHJldC5wdXNoKFN0cmluZyhNYXRoLmFicyh5ZWFyKSkucGFkU3RhcnQoNCwgJzAnKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ3llYXItc2hvcnQnKSB7XG4gICAgICBjb25zdCB5ID0geWVhciAlIDEwMDtcbiAgICAgIHJldC5wdXNoKHkgPCAxMCA/ICcwJyA6ICcnLCB5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnbW9udGgnKSB7XG4gICAgICByZXQucHVzaCgodG9rLnBhZCAmJiBtb250aCA8IDEwID8gJzAnIDogJycpLCBtb250aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ21vbnRobmFtZS1zaW5nbGUnKSB7XG4gICAgICAvLyBUaGlzIGlzIHdoYXQgRXhjZWwgZG9lcy5cbiAgICAgIC8vIFRoZSBWaWV0bmFtZXNlIGxpc3QgZ29lczpcbiAgICAgIC8vICBmcm9tIFtcIlRow6FuZyAxXCIsIFwiVGjDoW5nIDJcIiwgLi4uIF0gdG8gWyBcIlRcIiwgXCJUXCIsIC4uLiBdXG4gICAgICAvLyBTaW1wbGlmaWVkIENoaW5lc2UgZ29lczpcbiAgICAgIC8vICBmcm9tIFsgMeaciCwgLi4uIDnmnIgsIDEw5pyILCAxMeaciCwgMTLmnIggXSB0byBbIDEsIC4uLiA5LCAxLCAxLCAxIF1cbiAgICAgIGlmIChwYXJ0LmRhdGVfc3lzdGVtID09PSBFUE9DSF8xMzE3KSB7XG4gICAgICAgIHJldC5wdXNoKGwxMG4ubW1tbTZbbW9udGggLSAxXS5jaGFyQXQoMCkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldC5wdXNoKGwxMG4ubW1tbVttb250aCAtIDFdLmNoYXJBdCgwKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ21vbnRobmFtZS1zaG9ydCcpIHtcbiAgICAgIGlmIChwYXJ0LmRhdGVfc3lzdGVtID09PSBFUE9DSF8xMzE3KSB7XG4gICAgICAgIHJldC5wdXNoKGwxMG4ubW1tNlttb250aCAtIDFdKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChsMTBuLm1tbVttb250aCAtIDFdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnbW9udGhuYW1lJykge1xuICAgICAgaWYgKHBhcnQuZGF0ZV9zeXN0ZW0gPT09IEVQT0NIXzEzMTcpIHtcbiAgICAgICAgcmV0LnB1c2gobDEwbi5tbW1tNlttb250aCAtIDFdKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChsMTBuLm1tbW1bbW9udGggLSAxXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRvay50eXBlID09PSAnd2Vla2RheS1zaG9ydCcpIHtcbiAgICAgIHJldC5wdXNoKGwxMG4uZGRkW3dlZWtkYXldKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnd2Vla2RheScpIHtcbiAgICAgIHJldC5wdXNoKGwxMG4uZGRkZFt3ZWVrZGF5XSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ2RheScpIHtcbiAgICAgIHJldC5wdXNoKCh0b2sucGFkICYmIGRheSA8IDEwID8gJzAnIDogJycpLCBkYXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdob3VyJykge1xuICAgICAgY29uc3QgaCA9IGhvdXIgJSBwYXJ0LmNsb2NrIHx8IChwYXJ0LmNsb2NrIDwgMjQgPyBwYXJ0LmNsb2NrIDogMCk7XG4gICAgICByZXQucHVzaCgodG9rLnBhZCAmJiBoIDwgMTAgPyAnMCcgOiAnJyksIGgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdtaW4nKSB7XG4gICAgICByZXQucHVzaCgodG9rLnBhZCAmJiBtaW51dGUgPCAxMCA/ICcwJyA6ICcnKSwgbWludXRlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnc2VjJykge1xuICAgICAgcmV0LnB1c2goKHRvay5wYWQgJiYgc2Vjb25kIDwgMTAgPyAnMCcgOiAnJyksIHNlY29uZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ3N1YnNlYycpIHtcbiAgICAgIHJldC5wdXNoKGwxMG4uZGVjaW1hbCk7XG4gICAgICAvLyBkZWNpbWFscyBpcyBwcmUtZGV0ZXJtaW5lZCBieSBsb25nZXN0IHN1YnNlYyB0b2tlblxuICAgICAgLy8gYnV0IHRoZSBudW1iZXIgZW1pdHRlZCBpcyBwZXItdG9rZW5cbiAgICAgIGNvbnN0IGYgPSBzdWJzZWMudG9GaXhlZChwYXJ0LnNlY19kZWNpbWFscyk7XG4gICAgICByZXQucHVzaChmLnNsaWNlKDIsIDIgKyB0b2suZGVjaW1hbHMpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnYW1wbScpIHtcbiAgICAgIGNvbnN0IGlkeCA9IGhvdXIgPCAxMiA/IDAgOiAxO1xuICAgICAgaWYgKHRvay5zaG9ydCAmJiAhbDEwbl8pIHtcbiAgICAgICAgcmV0LnB1c2goJ0FQJ1tpZHhdKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXQucHVzaChsMTBuLmFtcG1baWR4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRva2VuVHlwZSA9PT0gJ2hvdXItZWxhcCcpIHtcbiAgICAgIGlmICh2YWx1ZSA8IDApIHsgcmV0LnB1c2gobDEwbi5uZWdhdGl2ZSk7IH1cbiAgICAgIGNvbnN0IGhoID0gKGRhdGUgKiAyNCkgKyBNYXRoLmZsb29yKE1hdGguYWJzKHRpbWUpIC8gKDYwICogNjApKTtcbiAgICAgIHJldC5wdXNoKFN0cmluZyhNYXRoLmFicyhoaCkpLnBhZFN0YXJ0KHRvay5wYWQsICcwJykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdtaW4tZWxhcCcpIHtcbiAgICAgIGlmICh2YWx1ZSA8IDApIHsgcmV0LnB1c2gobDEwbi5uZWdhdGl2ZSk7IH1cbiAgICAgIGNvbnN0IG1tID0gKGRhdGUgKiAxNDQwKSArIE1hdGguZmxvb3IoTWF0aC5hYnModGltZSkgLyA2MCk7XG4gICAgICByZXQucHVzaChTdHJpbmcoTWF0aC5hYnMobW0pKS5wYWRTdGFydCh0b2sucGFkLCAnMCcpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnc2VjLWVsYXAnKSB7XG4gICAgICBpZiAodmFsdWUgPCAwKSB7IHJldC5wdXNoKGwxMG4ubmVnYXRpdmUpOyB9XG4gICAgICBjb25zdCBzcyA9IChkYXRlICogREFZU0laRSkgKyBNYXRoLmFicyh0aW1lKTtcbiAgICAgIHJldC5wdXNoKFN0cmluZyhNYXRoLmFicyhzcykpLnBhZFN0YXJ0KHRvay5wYWQsICcwJykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlblR5cGUgPT09ICdiLXllYXInKSB7XG4gICAgICByZXQucHVzaCh5ZWFyICsgNTQzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW5UeXBlID09PSAnYi15ZWFyLXNob3J0Jykge1xuICAgICAgY29uc3QgeSA9ICh5ZWFyICsgNTQzKSAlIDEwMDtcbiAgICAgIHJldC5wdXNoKHkgPCAxMCA/ICcwJyA6ICcnLCB5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldC5qb2luKCcnKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjbGFtcCAobnVtYmVyKSB7XG4gIGlmIChudW1iZXIgPT09IDApIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIGNvbnN0IGQgPSBNYXRoLmNlaWwoTWF0aC5sb2cxMChudW1iZXIgPCAwID8gLW51bWJlciA6IG51bWJlcikpO1xuICBjb25zdCBtYWcgPSAxMCAqKiAoMTYgLSBNYXRoLmZsb29yKGQpKTtcbiAgcmV0dXJuIGlzRmluaXRlKG1hZykgPyBNYXRoLnJvdW5kKG51bWJlciAqIG1hZykgLyBtYWcgOiAwO1xufVxuIiwiaW1wb3J0IHsgVE9LRU5fVEVYVCwgaW5kZXhDb2xvcnMgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBkZWZhdWx0TG9jYWxlLCBnZXRMb2NhbGUgfSBmcm9tICcuL2xvY2FsZS5qcyc7XG5pbXBvcnQgeyBwYXJzZUZvcm1hdFNlY3Rpb24gfSBmcm9tICcuL3BhcnNlRm9ybWF0U2VjdGlvbi5qcyc7XG5pbXBvcnQgeyBydW5QYXJ0IH0gZnJvbSAnLi9ydW5QYXJ0LmpzJztcblxuY29uc3QgZGVmYXVsdF90ZXh0ID0gcGFyc2VGb3JtYXRTZWN0aW9uKFtcbiAgeyB0eXBlOiBUT0tFTl9URVhULCB2YWx1ZTogJ0AnLCByYXc6ICdAJyB9XG5dKTtcblxuZnVuY3Rpb24gZ2V0UGFydCAodmFsdWUsIHBhcnRzKSB7XG4gIGZvciAobGV0IHBpID0gMDsgcGkgPCAzOyBwaSsrKSB7XG4gICAgY29uc3QgcGFydCA9IHBhcnRzW3BpXTtcbiAgICBpZiAocGFydCkge1xuICAgICAgbGV0IGNvbmQ7XG4gICAgICBpZiAocGFydC5jb25kaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBwYXJ0LmNvbmRpdGlvblswXTtcbiAgICAgICAgY29uc3Qgb3BlcmFuZCA9IHBhcnQuY29uZGl0aW9uWzFdO1xuICAgICAgICBpZiAob3BlcmF0b3IgPT09ICc9JykgeyBjb25kID0gKHZhbHVlID09PSBvcGVyYW5kKTsgfVxuICAgICAgICBlbHNlIGlmIChvcGVyYXRvciA9PT0gJz4nKSB7IGNvbmQgPSAodmFsdWUgPiBvcGVyYW5kKTsgfVxuICAgICAgICBlbHNlIGlmIChvcGVyYXRvciA9PT0gJzwnKSB7IGNvbmQgPSAodmFsdWUgPCBvcGVyYW5kKTsgfVxuICAgICAgICBlbHNlIGlmIChvcGVyYXRvciA9PT0gJz49JykgeyBjb25kID0gKHZhbHVlID49IG9wZXJhbmQpOyB9XG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdG9yID09PSAnPD0nKSB7IGNvbmQgPSAodmFsdWUgPD0gb3BlcmFuZCk7IH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0b3IgPT09ICc8PicpIHsgY29uZCA9ICh2YWx1ZSAhPT0gb3BlcmFuZCk7IH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25kKSB7XG4gICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdENvbG9yICh2YWx1ZSwgcGFyc2VEYXRhLCBvcHRzKSB7XG4gIGNvbnN0IHBhcnRzID0gcGFyc2VEYXRhLnBhcnRpdGlvbnM7XG4gIGxldCBwYXJ0ID0gcGFydHNbM107XG4gIGxldCBjb2xvciA9IG51bGw7XG4gIGlmICgodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKSAmJiBpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICBwYXJ0ID0gZ2V0UGFydCh2YWx1ZSwgcGFydHMpO1xuICB9XG4gIGlmIChwYXJ0ICYmIHBhcnQuY29sb3IpIHtcbiAgICBjb2xvciA9IHBhcnQuY29sb3I7XG4gIH1cbiAgaWYgKGNvbG9yICYmIHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicgJiYgb3B0cy5pbmRleENvbG9ycykge1xuICAgIGNvbG9yID0gaW5kZXhDb2xvcnNbY29sb3IgLSAxXSB8fCAnIzAwMCc7XG4gIH1cbiAgcmV0dXJuIGNvbG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VmFsdWUgKHZhbHVlLCBwYXJzZURhdGEsIG9wdHMpIHtcbiAgY29uc3QgcGFydHMgPSBwYXJzZURhdGEucGFydGl0aW9ucztcbiAgY29uc3QgbDEwbiA9IGdldExvY2FsZShwYXJzZURhdGEubG9jYWxlIHx8IG9wdHMubG9jYWxlKTtcbiAgLy8gbm90IGEgbnVtYmVyP1xuICBjb25zdCB0ZXh0X3BhcnQgPSBwYXJ0c1szXSA/IHBhcnRzWzNdIDogZGVmYXVsdF90ZXh0O1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBjb25zdCBsb2MgPSBsMTBuIHx8IGRlZmF1bHRMb2NhbGU7XG4gICAgdmFsdWUgPSBsb2MuYm9vbFt2YWx1ZSA/IDAgOiAxXTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBuID0gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JztcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicgJiYgIW4pIHtcbiAgICByZXR1cm4gcnVuUGFydCh2YWx1ZSwgdGV4dF9wYXJ0LCBvcHRzLCBsMTBuKTtcbiAgfVxuICAvLyBndWFyZCBhZ2FpbnN0IG5vbi1maW5pdGUgbnVtYmVyczpcbiAgaWYgKCFuICYmICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBsb2MgPSBsMTBuIHx8IGRlZmF1bHRMb2NhbGU7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkgeyByZXR1cm4gbG9jLm5hbjsgfVxuICAgIHJldHVybiAodmFsdWUgPCAwID8gbG9jLm5lZ2F0aXZlIDogJycpICsgbG9jLmluZmluaXR5O1xuICB9XG4gIC8vIGZpbmQgYW5kIHJ1biB0aGUgcGF0dGVybiBwYXJ0IHRoYXQgYXBwbGllcyB0byB0aGlzIG51bWJlclxuICBjb25zdCBwYXJ0ID0gZ2V0UGFydCh2YWx1ZSwgcGFydHMpO1xuICByZXR1cm4gcGFydCA/IHJ1blBhcnQodmFsdWUsIHBhcnQsIG9wdHMsIGwxMG4pIDogb3B0cy5vdmVyZmxvdztcbn1cbiIsImltcG9ydCB7IHVfWUVBUiwgdV9NT05USCwgdV9EQVksIHVfSE9VUiwgdV9NSU4sIHVfU0VDLCByZUN1cnJlbmN5U3ltYm9scyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGVyY2VudCAocGFydGl0aW9ucykge1xuICByZXR1cm4gISEoXG4gICAgKHBhcnRpdGlvbnNbMF0gJiYgcGFydGl0aW9uc1swXS5wZXJjZW50KSB8fFxuICAgIChwYXJ0aXRpb25zWzFdICYmIHBhcnRpdGlvbnNbMV0ucGVyY2VudCkgfHxcbiAgICAocGFydGl0aW9uc1syXSAmJiBwYXJ0aXRpb25zWzJdLnBlcmNlbnQpIHx8XG4gICAgKHBhcnRpdGlvbnNbM10gJiYgcGFydGl0aW9uc1szXS5wZXJjZW50KVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlIChwYXJ0aXRpb25zKSB7XG4gIHJldHVybiAhIShcbiAgICAocGFydGl0aW9uc1swXSAmJiBwYXJ0aXRpb25zWzBdLmRhdGUpIHx8XG4gICAgKHBhcnRpdGlvbnNbMV0gJiYgcGFydGl0aW9uc1sxXS5kYXRlKSB8fFxuICAgIChwYXJ0aXRpb25zWzJdICYmIHBhcnRpdGlvbnNbMl0uZGF0ZSkgfHxcbiAgICAocGFydGl0aW9uc1szXSAmJiBwYXJ0aXRpb25zWzNdLmRhdGUpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RleHQgKHBhcnRpdGlvbnMpIHtcbiAgY29uc3QgWyBwYXJ0MSwgcGFydDIsIHBhcnQzLCBwYXJ0NCBdID0gcGFydGl0aW9ucztcbiAgcmV0dXJuICEhKFxuICAgICghcGFydDEgfHwgcGFydDEuZ2VuZXJhdGVkKSAmJlxuICAgICghcGFydDIgfHwgcGFydDIuZ2VuZXJhdGVkKSAmJlxuICAgICghcGFydDMgfHwgcGFydDMuZ2VuZXJhdGVkKSAmJlxuICAgIChwYXJ0NCAmJiBwYXJ0NC50ZXh0ICYmICFwYXJ0NC5nZW5lcmF0ZWQpXG4gICk7XG59XG5cbmNvbnN0IGxldmVsID0ge1xuICB0ZXh0OiAxNSxcbiAgZGF0ZXRpbWU6IDEwLjgsXG4gIGRhdGU6IDEwLjgsXG4gIHRpbWU6IDEwLjgsXG4gIHBlcmNlbnQ6IDEwLjYsXG4gIGN1cnJlbmN5OiAxMC40LFxuICBncm91cGVkOiAxMC4yLFxuICBzY2llbnRpZmljOiA2LFxuICBudW1iZXI6IDQsXG4gIGZyYWN0aW9uOiAyLFxuICBnZW5lcmFsOiAwLFxuICBlcnJvcjogMFxufTtcblxuY29uc3QgZGF0ZUNvZGVzID0gW1xuICBbICdETVknLCAxIF0sXG4gIFsgJ0RNJywgMiBdLFxuICBbICdNWScsIDMgXSxcbiAgWyAnTURZJywgNCBdLFxuICBbICdNRCcsIDUgXSxcbiAgWyAnaG1zYScsIDYgXSxcbiAgWyAnaG1hJywgNyBdLFxuICBbICdobXMnLCA4IF0sXG4gIFsgJ2htJywgOSBdXG5dO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEZvcm1hdEluZm9cbiAqICAgQW4gb2JqZWN0IG9mIGluZm9ybWF0aW9uIHByb3BlcnRpZXMgYmFzZWQgb24gYSBmb3JtYXQgcGF0dGVybi5cbiAqIEBwcm9wZXJ0eSB7KFxuICogICBcImN1cnJlbmN5XCIgfCBcImRhdGVcIiB8IFwiZGF0ZXRpbWVcIiB8XG4gKiAgIFwiZXJyb3JcIiB8IFwiZnJhY3Rpb25cIiB8IFwiZ2VuZXJhbFwiIHxcbiAqICAgXCJncm91cGVkXCIgfCBcIm51bWJlclwiIHwgXCJwZXJjZW50XCIgfFxuICogICBcInNjaWVudGlmaWNcIiB8IFwidGV4dFwiIHwgXCJ0aW1lXCJcbiAqICl9IHR5cGVcbiAqICAgICBBIHN0cmluZyBpZGVudGlmaWVyIGZvciB0aGUgdHlwZSBvZiB0aGUgbnVtYmVyIGZvcm1hdHRlci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNEYXRlXG4gKiAgICAgQ29ycmVzcG9uZHMgdG8gdGhlIG91dHB1dCBmcm9tIGlzRGF0ZUZvcm1hdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNUZXh0XG4gKiAgICAgQ29ycmVzcG9uZHMgdG8gdGhlIG91dHB1dCBmcm9tIGlzVGV4dEZvcm1hdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNQZXJjZW50XG4gKiAgICAgQ29ycmVzcG9uZHMgdG8gdGhlIG91dHB1dCBmcm9tIGlzUGVyY2VudEZvcm1hdC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhEZWNpbWFsc1xuICogICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFscyB0aGlzIGZvcm1hdCB3aWxsIGVtaXQuXG4gKiBAcHJvcGVydHkgezB8MX0gY29sb3JcbiAqICAgICAxIGlmIHRoZSBmb3JtYXQgdXNlcyBjb2xvciBvbiB0aGUgbmVnYXRpdmUgcG9ydGlvbiBvZiB0aGUgc3RyaW5nLCBlbHNlXG4gKiAgICAgYSAwLiBUaGlzIHJlcGxpY2F0ZXMgRXhjZWwncyBgQ0VMTChcImNvbG9yXCIpYCBmdW5jdGlvbmFsaXR5LlxuICogQHByb3BlcnR5IHswfDF9IHBhcmVudGhlc2VzXG4gKiAgICAgMSBpZiB0aGUgcG9zaXRpdmUgcG9ydGlvbiBvZiB0aGUgbnVtYmVyIGZvcm1hdCBjb250YWlucyBhbiBvcGVuXG4gKiAgICAgcGFyZW50aGVzaXMsIGVsc2UgYSAwLiBUaGlzIGlzIHJlcGxpY2F0ZXMgRXhjZWwncyBgQ0VMTChcInBhcmVudGhlc2VzXCIpYFxuICogICAgIGZ1bmN0aW9uYWxpdHkuXG4gKiBAcHJvcGVydHkgezB8MX0gZ3JvdXBlZFxuICogICAgIDEgaWYgdGhlIHBvc2l0aXZlIHBvcnRpb24gb2YgdGhlIGZvcm1hdCB1c2VzIGEgdGhvdXNhbmRzIHNlcGFyYXRvcixcbiAqICAgICBlbHNlIGEgMC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2RlXG4gKiAgICAgQ29ycmVzcG9uZHMgdG8gRXhjZWwncyBgQ0VMTChcImZvcm1hdFwiKWAgZnVuY3Rpb25hbGl0eS4gSXQgc2hvdWxkIG1hdGNoXG4gKiAgICAgRXhjZWwncyBlc290ZXJpYyBiZWhhdmlvdXIgZmFpcmx5IHdlbGwuXG4gKiAgICAgW1NlZSBNaWNyb3NvZnQncyBkb2N1bWVudGF0aW9uLl0oaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMvb2ZmaWNlL2NlbGwtZnVuY3Rpb24tNTFiZDM5YTUtZjMzOC00ZGJlLWEzM2YtOTU1ZDY3YzJiMmNmKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNjYWxlXG4gKiAgICAgVGhlIG11bHRpcGxpZXIgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIG51bWJlciAoMTAwIGZvciBwZXJjZW50YWdlcykuXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGV2ZWxcbiAqICAgICBBbiBhcmJpcmFydHkgbnVtYmVyIHRoYXQgcmVwcmVzZW50cyB0aGUgZm9ybWF0J3Mgc3BlY2lmaWNpdHkgaWYgeW91IHdhbnRcbiAqICAgICB0byBjb21wYXJlIG9uZSB0byBhbm90aGVyLiBJbnRlZ2VyIGNvbXBhcmlzb25zIHJvdWdobHkgbWF0Y2ggRXhjZWwnc1xuICogICAgIHJlc29sdXRpb25zIHdoZW4gaXQgZGV0ZXJtaW5lcyB3aGljaCBmb3JtYXQgd2lucyBvdXQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGluZm8gKHBhcnRpdGlvbnMsIGN1cnJlbmN5SWQgPSBudWxsKSB7XG4gIGNvbnN0IFsgcGFydFBvcywgcGFydE5lZyBdID0gcGFydGl0aW9ucztcbiAgY29uc3QgZnJhY19tYXggPSBwYXJ0UG9zLmZyYWNfbWF4O1xuICBjb25zdCBpbmZvID0ge1xuICAgIHR5cGU6ICdnZW5lcmFsJyxcbiAgICBpc0RhdGU6IGlzRGF0ZShwYXJ0aXRpb25zKSxcbiAgICBpc1RleHQ6IGlzVGV4dChwYXJ0aXRpb25zKSxcbiAgICBpc1BlcmNlbnQ6IGlzUGVyY2VudChwYXJ0aXRpb25zKSxcbiAgICBtYXhEZWNpbWFsczogcGFydFBvcy5nZW5lcmFsID8gOSA6IGZyYWNfbWF4LFxuICAgIHNjYWxlOiBwYXJ0UG9zLnNjYWxlID8/IDEsXG4gICAgY29sb3I6IDAsXG4gICAgcGFyZW50aGVzZXM6IDAsXG4gICAgZ3JvdXBlZDogcGFydFBvcy5ncm91cGluZyA/IDEgOiAwXG4gIH07XG5cbiAgLy8gY3VycmVuY3kgaWRlbnRpZmllciBtYXkgYmUgcGFzc2VkIGluLCBidXQgb3RoZXJ3aXNlIHdlIHJlcG9ydFxuICAvLyBpZiB3ZSBmaW5kIGFueSBrbm93biBnbHlwaCBpbiB0aGUgdG9rZW5zXG4gIGNvbnN0IGlzQ3VycmVuY3kgPSAoIWluZm8uaXNEYXRlICYmICFpbmZvLmlzVGV4dCAmJiAhcGFydFBvcy5lcnJvcikgJiYgcGFydFBvcy50b2tlbnMuc29tZSh0b2sgPT4gKFxuICAgIHRvay50eXBlID09PSAnc3RyaW5nJyAmJlxuICAgIChjdXJyZW5jeUlkXG4gICAgICA/IHRvay52YWx1ZSA9PT0gY3VycmVuY3lJZFxuICAgICAgOiByZUN1cnJlbmN5U3ltYm9scy50ZXN0KHRvay52YWx1ZSkpXG4gICkpO1xuXG4gIGxldCBjb2RlVHlwZSA9ICdHJztcbiAgbGV0IGNvZGVOdW0gPSAoZnJhY19tYXggPj0gMCkgPyBNYXRoLm1pbigxNSwgZnJhY19tYXgpIDogJyc7XG4gIGxldCBjb2RlUGFyZW5zID0gJyc7XG4gIGxldCBjb2RlRGFzaCA9ICcnO1xuXG4gIGlmIChwYXJ0TmVnICYmIHBhcnROZWcuY29sb3IpIHtcbiAgICBjb2RlRGFzaCA9ICctJztcbiAgICBpbmZvLmNvbG9yID0gMTtcbiAgfVxuICBpZiAocGFydFBvcy5wYXJlbnMpIHtcbiAgICBjb2RlUGFyZW5zID0gJygpJztcbiAgICBpbmZvLnBhcmVudGhlc2VzID0gMTtcbiAgfVxuXG4gIGlmIChpc0N1cnJlbmN5KSB7XG4gICAgY29kZVR5cGUgPSAnQyc7XG4gICAgaW5mby50eXBlID0gJ2N1cnJlbmN5JztcbiAgfVxuICBlbHNlIGlmIChwYXJ0UG9zLmVycm9yKSB7XG4gICAgaW5mby50eXBlID0gJ2Vycm9yJztcbiAgICBpbmZvLm1heERlY2ltYWxzID0gMDtcbiAgfVxuICBlbHNlIGlmIChpbmZvLmlzRGF0ZSkge1xuICAgIGxldCBoYXZlVGltZSA9IDA7XG4gICAgbGV0IGhhdmVEYXRlID0gMDtcbiAgICBsZXQgb3JkZXIgPSAnJztcbiAgICAvLyBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gaG93IEV4Y2VsIGRvZXMgdGhpcy5cbiAgICAvLyBJdCBoYXMgdG8gZ2V0IHRoZSBvcmRlciByaWdodCBidXQgdGhlbiBpZ25vcmVzIGFueSB0cmFpbGluZyB0b2tlbnMuXG4gICAgLy8gU286ICBcIm1tbSBkZCB5eXl5XCIgbWF0Y2hlcyBcIm1keVwiID0gRDRcbiAgICAvLyBCdXQ6IFwibW1tIGRkIGRkIHl5eXlcIiBtYXRjaGVzIFwibWRcIiA9IEQ1XG4gICAgcGFydFBvcy50b2tlbnMuZm9yRWFjaCh0b2sgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IHRvay50eXBlO1xuICAgICAgLy8gJ3llYXInIHx8ICd5ZWFyLXNob3J0JyB8fCAnYi15ZWFyJyB8fCAnYi15ZWFyLXNob3J0J1xuICAgICAgaWYgKC9eKGItKT95ZWFyLy50ZXN0KHR5cGUpKSB7XG4gICAgICAgIG9yZGVyICs9ICdZJztcbiAgICAgICAgaGF2ZURhdGUrKztcbiAgICAgIH1cbiAgICAgIC8vICdtb250aCcgfHwgJ21vbnRobmFtZS1zaW5nbGUnIHx8ICdtb250aG5hbWUtc2hvcnQnIHx8ICdtb250aG5hbWUnXG4gICAgICBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ21vbnRoJykpIHtcbiAgICAgICAgb3JkZXIgKz0gJ00nO1xuICAgICAgICBoYXZlRGF0ZSsrO1xuICAgICAgfVxuICAgICAgLy8gJ3dlZWtkYXktc2hvcnQnIHx8ICd3ZWVrZGF5JyB8fCAnZGF5J1xuICAgICAgZWxzZSBpZiAoL14od2Vlayk/ZGF5Ly50ZXN0KHR5cGUpKSB7XG4gICAgICAgIG9yZGVyICs9ICdEJztcbiAgICAgICAgaGF2ZURhdGUrKztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdob3VyJyB8fCB0eXBlID09PSAnbWluJyB8fCB0eXBlID09PSAnc2VjJyB8fCB0eXBlID09PSAnYW1wbScpIHtcbiAgICAgICAgb3JkZXIgKz0gdHlwZVswXTtcbiAgICAgICAgaGF2ZVRpbWUrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpbmZvLnR5cGUgPSAnZGF0ZSc7XG4gICAgaWYgKGhhdmVEYXRlICYmIGhhdmVUaW1lKSB7XG4gICAgICBpbmZvLnR5cGUgPSAnZGF0ZXRpbWUnO1xuICAgIH1cbiAgICBlbHNlIGlmICghaGF2ZURhdGUgJiYgaGF2ZVRpbWUpIHtcbiAgICAgIGluZm8udHlwZSA9ICd0aW1lJztcbiAgICB9XG4gICAgY29uc3QgY29kZSA9IGRhdGVDb2Rlcy5maW5kKGQgPT4gb3JkZXIuc3RhcnRzV2l0aChkWzBdKSk7XG4gICAgY29kZVR5cGUgPSBjb2RlID8gJ0QnIDogJ0cnO1xuICAgIGNvZGVOdW0gPSBjb2RlID8gY29kZVsxXSA6ICcnO1xuICB9XG4gIGVsc2UgaWYgKGluZm8uaXNUZXh0KSB7XG4gICAgY29kZVR5cGUgPSAnRyc7XG4gICAgaW5mby50eXBlID0gJ3RleHQnO1xuICAgIGNvZGVOdW0gPSAnJztcbiAgICBpbmZvLm1heERlY2ltYWxzID0gMDtcbiAgfVxuICBlbHNlIGlmIChwYXJ0UG9zLmdlbmVyYWwpIHtcbiAgICBjb2RlVHlwZSA9ICdHJztcbiAgICBpbmZvLnR5cGUgPSAnZ2VuZXJhbCc7XG4gICAgY29kZU51bSA9ICcnO1xuICB9XG4gIGVsc2UgaWYgKHBhcnRQb3MuZnJhY3Rpb25zKSB7XG4gICAgY29kZVR5cGUgPSAnRyc7XG4gICAgaW5mby50eXBlID0gJ2ZyYWN0aW9uJztcbiAgICBjb2RlTnVtID0gJyc7XG4gIH1cbiAgZWxzZSBpZiAocGFydFBvcy5leHBvbmVudGlhbCkge1xuICAgIGNvZGVUeXBlID0gJ1MnO1xuICAgIGluZm8udHlwZSA9ICdzY2llbnRpZmljJztcbiAgfVxuICBlbHNlIGlmIChpbmZvLmlzUGVyY2VudCkge1xuICAgIGNvZGVUeXBlID0gJ1AnO1xuICAgIGluZm8udHlwZSA9ICdwZXJjZW50JztcbiAgfVxuICBlbHNlIGlmIChwYXJ0UG9zLmdyb3VwaW5nKSB7XG4gICAgY29kZVR5cGUgPSAnLCc7XG4gICAgaW5mby50eXBlID0gJ2dyb3VwZWQnO1xuICB9XG4gIGVsc2UgaWYgKHBhcnRQb3MuaW50X21heCB8fCBmcmFjX21heCkge1xuICAgIGNvZGVUeXBlID0gJ0YnO1xuICAgIGluZm8udHlwZSA9ICdudW1iZXInO1xuICB9XG5cbiAgaW5mby5jb2RlID0gY29kZVR5cGUgKyBjb2RlTnVtICsgY29kZURhc2ggKyBjb2RlUGFyZW5zO1xuXG4gIC8vIEV4Y2VsIGNhbiBjb21iaW5lIHNvbWUgY29kZXMsIGJ1dCBub3QgYWxsLlxuICAvLyBXaGVuIGludGVnZXIgdmFsdWUgb2YgdHdvIGlzIGVxdWFsIGFuZCBpdCBjYW4ndCBjb21iaW5lLFxuICAvLyB0aGUgXCJmaXJzdFwiIG9uZSB3aW5zIG91dC5cbiAgaW5mby5sZXZlbCA9IGxldmVsW2luZm8udHlwZV07XG5cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoaW5mbyk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gRm9ybWF0RGF0ZUluZm9cbiAqICAgQW4gb2JqZWN0IGRldGFpbGluZyB3aGljaCBkYXRlIHNwZWNpZmllcnMgYXJlIHVzZWQgaW4gYSBmb3JtYXQgcGF0dGVybi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0geWVhclxuICogICB0cnVlIGlmIHRoZSBwYXR0ZXJuIHVzZXMgeWVhcnMgZWxzZSBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbW9udGhcbiAqICAgdHJ1ZSBpZiB0aGUgcGF0dGVybiB1c2VzIG1vbnRocyBlbHNlIGZhbHNlLlxuICogQHByb3BlcnR5IHtib29sZWFufSBkYXlcbiAqICAgdHJ1ZSBpZiB0aGUgcGF0dGVybiB1c2VzIGRheSBvZiB0aGUgbW9udGggZWxzZSBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaG91cnNcbiAqICAgdHJ1ZSBpZiB0aGUgcGF0dGVybiB1c2VzIGhvdXJzIGVsc2UgZmFsc2UuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG1pbnV0ZXNcbiAqICAgdHJ1ZSBpZiB0aGUgcGF0dGVybiB1c2VzIG1pbnV0ZXMgZWxzZSBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2Vjb25kc1xuICogICB0cnVlIGlmIHRoZSBwYXR0ZXJuIHVzZXMgc2Vjb25kcyBlbHNlIGZhbHNlLlxuICogQHByb3BlcnR5IHsxMnwyNH0gY2xvY2tUeXBlXG4gKiAgIDEyIGlmIHRoZSBwYXR0ZXJuIHVzZXMgQU0vUE0gY2xvY2sgZWxzZSAyNC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZUluZm8gKHBhcnRpdGlvbnMpIHtcbiAgY29uc3QgWyBwYXJ0UG9zIF0gPSBwYXJ0aXRpb25zO1xuICBjb25zdCByID0ge1xuICAgIHllYXI6ICEhKHBhcnRQb3MuZGF0ZSAmIHVfWUVBUiksXG4gICAgbW9udGg6ICEhKHBhcnRQb3MuZGF0ZSAmIHVfTU9OVEgpLFxuICAgIGRheTogISEocGFydFBvcy5kYXRlICYgdV9EQVkpLFxuICAgIGhvdXJzOiAhIShwYXJ0UG9zLmRhdGUgJiB1X0hPVVIpLFxuICAgIG1pbnV0ZXM6ICEhKHBhcnRQb3MuZGF0ZSAmIHVfTUlOKSxcbiAgICBzZWNvbmRzOiAhIShwYXJ0UG9zLmRhdGUgJiB1X1NFQyksXG4gICAgY2xvY2tUeXBlOiBwYXJ0UG9zLmNsb2NrID09PSAxMiA/IDEyIDogMjRcbiAgfTtcbiAgcmV0dXJuIHI7XG59XG4iLCJpbXBvcnQge1xuICBUT0tFTl9HRU5FUkFMLCBUT0tFTl9IQVNILCBUT0tFTl9aRVJPLCBUT0tFTl9RTUFSSywgVE9LRU5fU0xBU0gsIFRPS0VOX0dST1VQLCBUT0tFTl9TQ0FMRSxcbiAgVE9LRU5fQ09NTUEsIFRPS0VOX0JSRUFLLCBUT0tFTl9URVhULCBUT0tFTl9QTFVTLCBUT0tFTl9NSU5VUywgVE9LRU5fUE9JTlQsIFRPS0VOX1NQQUNFLFxuICBUT0tFTl9QRVJDRU5ULCBUT0tFTl9ESUdJVCwgVE9LRU5fQ0FMRU5EQVIsIFRPS0VOX0VSUk9SLCBUT0tFTl9EQVRFVElNRSwgVE9LRU5fRFVSQVRJT04sXG4gIFRPS0VOX0NPTkRJVElPTiwgVE9LRU5fREJOVU0sIFRPS0VOX05BVE5VTSwgVE9LRU5fTE9DQUxFLCBUT0tFTl9DT0xPUiwgVE9LRU5fTU9ESUZJRVIsXG4gIFRPS0VOX0FNUE0sIFRPS0VOX0VTQ0FQRUQsIFRPS0VOX1NUUklORywgVE9LRU5fU0tJUCwgVE9LRU5fRVhQLCBUT0tFTl9GSUxMLCBUT0tFTl9QQVJFTixcbiAgVE9LRU5fQ0hBUlxufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IHRva2VuSGFuZGxlcnMgPSBbXG4gIFsgVE9LRU5fR0VORVJBTCwgL15HZW5lcmFsL2ksIDAgXSxcbiAgWyBUT0tFTl9IQVNILCAvXiMvLCAwIF0sXG4gIFsgVE9LRU5fWkVSTywgL14wLywgMCBdLFxuICBbIFRPS0VOX1FNQVJLLCAvXlxcPy8sIDAgXSxcbiAgWyBUT0tFTl9TTEFTSCwgL15cXC8vLCAwIF0sXG4gIC8vIENvbW1hcyBhcmUgZGVhbHQgd2l0aCBhcyBhIHNwZWNpYWwgY2FzZSBpbiB0aGUgdG9rZW5pemVyIGJ1dCB3aWxsIGVuZCB1cFxuICAvLyBhcyBvbmUgb2YgdGhlc2U6XG4gIC8vIFsgVE9LRU5fR1JPVVAsIC9eKCwpLCovLCAxIF0sXG4gIC8vIFsgVE9LRU5fU0NBTEUsIC9eKCwpLCovLCAxIF0sXG4gIC8vIFsgVE9LRU5fQ09NTUEsIC9eKCwpLCovLCAxIF0sXG4gIFsgVE9LRU5fQlJFQUssIC9eOy8sIDAgXSxcbiAgWyBUT0tFTl9URVhULCAvXkAvLCAwIF0sXG4gIFsgVE9LRU5fUExVUywgL15cXCsvLCAwIF0sXG4gIFsgVE9LRU5fTUlOVVMsIC9eLS8sIDAgXSxcbiAgWyBUT0tFTl9QT0lOVCwgL15cXC4vLCAwIF0sXG4gIFsgVE9LRU5fU1BBQ0UsIC9eIC8sIDAgXSxcbiAgWyBUT0tFTl9QRVJDRU5ULCAvXiUvLCAwIF0sXG4gIFsgVE9LRU5fRElHSVQsIC9eWzEtOV0vLCAwIF0sXG4gIFsgVE9LRU5fQ0FMRU5EQVIsIC9eKD86QlsxMl0pL2ksIDAgXSxcbiAgWyBUT0tFTl9FUlJPUiwgL15CJC8sIDAgXSwgLy8gcGF0dGVybiBtdXN0IG5vdCBlbmQgaW4gYSBcIkJcIlxuICBbIFRPS0VOX0RBVEVUSU1FLCAvXig/OltoSF0rfFttTV0rfFtzU10rfFt5WV0rfFtiQl0rfFtkRF0rfFtnR10rfFthQV17Myx9fGUrKS8sIDAgXSxcbiAgWyBUT0tFTl9EVVJBVElPTiwgL14oPzpcXFsoaCt8bSt8cyspXFxdKS9pLCAxIF0sXG4gIFsgVE9LRU5fQ09ORElUSU9OLCAvXlxcWyg8Wz0+XT98Pj0/fD0pXFxzKigtP1suXFxkXSspXFxdLywgWyAxLCAyIF0gXSxcbiAgWyBUT0tFTl9EQk5VTSwgL15cXFsoREJOdW1bMC00XT9cXGQpXFxdL2ksIDEgXSxcbiAgWyBUT0tFTl9OQVROVU0sIC9eXFxbKE5hdE51bVswLTRdP1xcZClcXF0vaSwgMSBdLFxuICBbIFRPS0VOX0xPQ0FMRSwgL15cXFtcXCQoW15cXF1dKylcXF0vLCAxIF0sXG4gIFsgVE9LRU5fQ09MT1IsIC9eXFxbKGJsYWNrfGJsdWV8Y3lhbnxncmVlbnxtYWdlbnRhfHJlZHx3aGl0ZXx5ZWxsb3d8Y29sb3JcXHMqXFxkKylcXF0vaSwgMSBdLFxuICAvLyBjb25kaXRpb25hbGx5IGFsbG93IHRoZXNlIG9wZW4gZW5kZWQgZGlyZWN0aW9ucz9cbiAgWyBUT0tFTl9NT0RJRklFUiwgL15cXFsoW15cXF1dKylcXF0vLCAxIF0sXG4gIFsgVE9LRU5fQU1QTSwgL14oPzpBTVxcL1BNfGFtXFwvcG18QVxcL1ApLywgMCBdLFxuICBbIFRPS0VOX0VTQ0FQRUQsIC9eXFxcXCguKS8sIDEgXSxcbiAgWyBUT0tFTl9TVFJJTkcsIC9eXCIoW15cIl0qPylcIi8sIDEgXSxcbiAgWyBUT0tFTl9TS0lQLCAvXl8oXFxcXC58LikvLCAxIF0sXG4gIC8vIEdvb2dsZSBTaGVldHMgYW5kIEV4Y2VsIGRpdmVyZ2Ugb24gXCJlXCI6IEV4Y2VsIG9ubHkgYWNjZXB0cyBFLlxuICBbIFRPS0VOX0VYUCwgL15bRWVdKFsrLV0pLywgMSBdLFxuICBbIFRPS0VOX0ZJTEwsIC9eXFwqKFxcXFwufC4pLywgMSBdLFxuICBbIFRPS0VOX1BBUkVOLCAvXlsoKV0vLCAwIF0sXG4gIFsgVE9LRU5fRVJST1IsIC9eW0XDiMOJw4rDi8Oow6nDqsOrxJLEk8SUxJXElsSXxJjEmcSaxJvIhMiFyIbIh8ioyKlObsORw7HFg8WExYXFhsWHxYjHuMe5W1wiKi9cXFxcX10vLCAwIF0sXG4gIFsgVE9LRU5fQ0hBUiwgL14uLywgMCBdXG5dO1xuXG5jb25zdCBDT0RFX1FNUksgPSA2MztcbmNvbnN0IENPREVfSEFTSCA9IDM1O1xuY29uc3QgQ09ERV9aRVJPID0gNDg7XG5jb25zdCBDT0RFX05JTkUgPSA1NztcbmNvbnN0IGlzTnVtT3AgPSBjaGFyID0+IHtcbiAgY29uc3QgYyA9IChjaGFyIHx8ICdcXDAnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gKGMgPT09IENPREVfUU1SSyB8fCBjID09PSBDT0RFX0hBU0ggfHwgKGMgPj0gQ09ERV9aRVJPICYmIGMgPD0gQ09ERV9OSU5FKSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEZvcm1hdFRva2VuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUb2tlbiB0eXBlLlxuICogQHByb3BlcnR5IHthbnl9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgdG9rZW4sIGNsZWFuZWQgb2YgZXh0cmEgY2hhcmFjdGVycy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByYXcgUmF3IHRva2VuIHNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIEJyZWFrcyBhIGZvcm1hdCBwYXR0ZXJuIHN0cmluZyBpbnRvIGEgbGlzdCBvZiB0b2tlbnMuXG4gKlxuICogVGhlIHJldHVybmVkIG91dHB1dCB3aWxsIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSB0b2tlbnM6XG4gKlxuICogYGBganNcbiAqIFtcbiAqICAgeyB0eXBlOiAnemVybycsIHZhbHVlOiAnMCcsIHJhdzogJzAnIH0sXG4gKiAgIHsgdHlwZTogJ3BvaW50JywgdmFsdWU6ICcuJywgcmF3OiAnLicgfSxcbiAqICAgeyB0eXBlOiAnemVybycsIHZhbHVlOiAnMCcsIHJhdzogJzAnIH0sXG4gKiAgIHsgdHlwZTogJ3BlcmNlbnQnLCB2YWx1ZTogJyUnLCByYXc6ICclJyB9XG4gKiBdXG4gKiBgYGBcbiAqXG4gKiBUb2tlbiB0eXBlcyBtYXkgYmUgZm91bmQgYXMgYW4gT2JqZWN0IGFzIHRoZVxuICogW2B0b2tlblR5cGVzYCBleHBvcnRde0BsaW5rIHRva2VuVHlwZXN9IG9mIHRoZSBwYWNrYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIFRoZSBmb3JtYXQgcGF0dGVyblxuICogQHJldHVybnMge0Zvcm1hdFRva2VuW119IGEgbGlzdCBvZiB0b2tlbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplIChwYXR0ZXJuKSB7XG4gIGxldCBpID0gMDtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGNvbnN0IHVucmVzb2x2ZWRDb21tYXMgPSBbXTtcbiAgd2hpbGUgKGkgPCBwYXR0ZXJuLmxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnIgPSBwYXR0ZXJuLnNsaWNlKGkpO1xuICAgIGxldCBzdGVwID0gMDtcbiAgICAvLyBBIGNvbW1hIGlzIGNvbnRleHQgc2Vuc2l0aXZlIGFuZCBuZWVkcyB0byBiZSBoYW5kbGVkIGFzIGEgc3BlY2lhbCBjYXNlLlxuICAgIC8vIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGluIHRoZSB0b2tlbml6ZXIgYmVjYXVzZSB0byBiZSBhYmxlIHRvIHJlLWxvY2FsaXplXG4gICAgLy8gdGhlIHBhdHRlcm4gd2UnbGwgbmVlZCB0byBrbm93IHdoYXQgZWFjaCBjb21tYSBtZWFucy5cbiAgICBjb25zdCBtQ29tbWEgPSAvXigsKykoLik/Ly5leGVjKGN1cnIpO1xuICAgIGlmIChtQ29tbWEpIHtcbiAgICAgIC8vIGNvbW1hIGRlcGVuZHMgb24gd2hhdCBpdCBmb2xsb3dzXG4gICAgICBjb25zdCByYXcgPSBtQ29tbWFbMV07XG4gICAgICBzdGVwID0gcmF3Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGxvb2tCZWhpbmQgPSBwYXR0ZXJuW2kgLSAxXSB8fCAnJztcbiAgICAgIGxldCBtYXliZUdST1VQID0gZmFsc2U7XG4gICAgICBsZXQgbWF5YmVTQ0FMRSA9IGZhbHNlO1xuICAgICAgaWYgKGlzTnVtT3AobG9va0JlaGluZCkpIHsgLy8gMC05LCAnIycsIG9yICc/JzogbWF5IGJlIEdST1VQIG9yIFNDQUxFXG4gICAgICAgIG1heWJlR1JPVVAgPSB0cnVlO1xuICAgICAgICBtYXliZVNDQUxFID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxvb2tCZWhpbmQgPT09ICcuJykgeyAvLyAnLic6IG1heSBiZSBTQ0FMRSBvbmx5XG4gICAgICAgIG1heWJlU0NBTEUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gaWYgYXQgdGhlIGVuZCBvZiB0aGUgcGF0dGVybiBvciBzZWN0aW9uLCB0aGVuIHRoaXMgY2FuJ3QgYmUgYSBHUk9VUCBvcFxuICAgICAgY29uc3QgbG9va0FoZWFkID0gbUNvbW1hWzJdIHx8ICcnO1xuICAgICAgaWYgKG1heWJlR1JPVVAgJiYgKCFsb29rQWhlYWQgfHwgbG9va0FoZWFkID09PSAnOycpKSB7XG4gICAgICAgIG1heWJlR1JPVVAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIG5leHQgY2hhciBpcyBhIG51bSB0b2tlbiwgdGhlbiB0aGlzIGNhbm5vdCBiZSBhIFNDQUxFIG9wXG4gICAgICBpZiAobWF5YmVTQ0FMRSAmJiBpc051bU9wKGxvb2tBaGVhZCkpIHtcbiAgICAgICAgbWF5YmVTQ0FMRSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG1heWJlR1JPVVAgJiYgIW1heWJlU0NBTEUpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBUT0tFTl9HUk9VUCwgdmFsdWU6ICcsJywgcmF3IH0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIW1heWJlR1JPVVAgJiYgbWF5YmVTQ0FMRSkge1xuICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFRPS0VOX1NDQUxFLCB2YWx1ZTogJywnLCByYXcgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChtYXliZUdST1VQICYmIG1heWJlU0NBTEUpIHtcbiAgICAgICAgLy8gdGhpcyB0b2tlbiB3aWxsIGJlIHNldCB0byBzY2FsZSwgYnV0IHN3aXRjaGVkIHRvIGdyb3VwIGlmIHdlIGhpdCBhXG4gICAgICAgIC8vIG51bSB0b2tlbiBsYXRlciBvbiBpbiB0aGUgcGF0dGVybi4uLlxuICAgICAgICBjb25zdCB0ID0geyB0eXBlOiBUT0tFTl9TQ0FMRSwgdmFsdWU6ICcsJywgcmF3IH07XG4gICAgICAgIHRva2Vucy5wdXNoKHQpO1xuICAgICAgICB1bnJlc29sdmVkQ29tbWFzLnB1c2godCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBUT0tFTl9DT01NQSwgdmFsdWU6ICcsJywgcmF3IH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBhbGwgb3RoZXIgc3ltYm9scyBhcmUgbWF0Y2hlZCB1c2luZyBcbiAgICBlbHNlIHtcbiAgICAgIGxldCB0b2tlbjtcbiAgICAgIGZvciAoY29uc3QgWyB0eXBlLCBleHByLCBncm91cCBdIG9mIHRva2VuSGFuZGxlcnMpIHtcbiAgICAgICAgY29uc3QgbSA9IGV4cHIuZXhlYyhjdXJyKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IEFycmF5LmlzQXJyYXkoZ3JvdXApXG4gICAgICAgICAgICA/IGdyb3VwLm1hcChkID0+IG1bZF0pXG4gICAgICAgICAgICA6IG1bZ3JvdXAgfHwgMF07XG4gICAgICAgICAgdG9rZW4gPSB7IHR5cGUsIHZhbHVlLCByYXc6IG1bMF0gfTtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgc3RlcCA9IG1bMF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiB3ZSBqdXN0IG1hdGNoZWQgYSBicmVhaywgdGhlbiBkZWFsIHdpdGggYW55IHVucmVzb2x2ZWQgY29tbWFzXG4gICAgICBpZiAodW5yZXNvbHZlZENvbW1hcy5sZW5ndGggJiYgdG9rZW4ucmF3ID09PSAnOycpIHtcbiAgICAgICAgdW5yZXNvbHZlZENvbW1hcy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgICAgLy8gaWYgd2UganVzdCBtYXRjaGVkIGEgbnVtIG9wZXJhdG9yLCB0aGVuIGRlYWwgd2l0aCBhbnkgdW5yZXNvbHZlZCBjb21tYXNcbiAgICAgIGlmICh1bnJlc29sdmVkQ29tbWFzLmxlbmd0aCAmJiBpc051bU9wKHRva2VuLnJhdykpIHtcbiAgICAgICAgdW5yZXNvbHZlZENvbW1hcy5mb3JFYWNoKGQgPT4gKGQudHlwZSA9IFRPS0VOX0dST1VQKSk7XG4gICAgICAgIHVucmVzb2x2ZWRDb21tYXMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFzdGVwKSB7XG4gICAgICBjb25zdCByYXcgPSBjdXJyWzBdO1xuICAgICAgc3RlcCA9IDE7XG4gICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFRPS0VOX0NIQVIsIHZhbHVlOiByYXcsIHJhdyB9KTtcbiAgICB9XG4gICAgaSArPSBzdGVwO1xuICB9XG4gIHJldHVybiB0b2tlbnM7XG59XG4iLCJpbXBvcnQgeyByZXNvbHZlTG9jYWxlIH0gZnJvbSAnLi9sb2NhbGUuanMnO1xuaW1wb3J0IHsgcGFyc2VGb3JtYXRTZWN0aW9uIH0gZnJvbSAnLi9wYXJzZUZvcm1hdFNlY3Rpb24uanMnO1xuaW1wb3J0IHsgdG9rZW5pemUgfSBmcm9tICcuL3Rva2VuaXplLmpzJztcblxuY29uc3QgbWF5YmVBZGRNaW51cyA9IHBhcnQgPT4ge1xuICBjb25zdCBjb25kID0gcGFydC5jb25kaXRpb247XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IChcbiAgICBjb25kICYmXG4gICAgY29uZFsxXSA8IDAgJiZcbiAgICAoY29uZFswXSA9PT0gJzwnIHx8IGNvbmRbMF0gPT09ICc8PScgfHwgY29uZFswXSA9PT0gJz0nKVxuICApO1xuICBpZiAoIWV4Y2VwdGlvbikge1xuICAgIHBhcnQudG9rZW5zLnVuc2hpZnQoe1xuICAgICAgdHlwZTogJ21pbnVzJyxcbiAgICAgIHZvbGF0aWxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGNsb25lUGFydCA9IChwYXJ0LCBwcmVmaXhUb2tlbiA9IG51bGwpID0+IHtcbiAgY29uc3QgciA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBwYXJ0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFydFtrZXldKSkge1xuICAgICAgcltrZXldID0gWyAuLi5wYXJ0W2tleV0gXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByW2tleV0gPSBwYXJ0W2tleV07XG4gICAgfVxuICB9XG4gIGlmIChwcmVmaXhUb2tlbikge1xuICAgIHIudG9rZW5zLnVuc2hpZnQocHJlZml4VG9rZW4pO1xuICB9XG4gIHIuZ2VuZXJhdGVkID0gdHJ1ZTtcbiAgcmV0dXJuIHI7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXR0ZXJuIChwYXR0ZXJuKSB7XG4gIGNvbnN0IHBhcnRpdGlvbnMgPSBbXTtcbiAgbGV0IGNvbmRpdGlvbmFsID0gZmFsc2U7XG4gIGxldCBsMTBuX292ZXJyaWRlO1xuICBsZXQgdGV4dF9wYXJ0aXRpb24gPSBudWxsO1xuICBsZXQgbW9yZSA9IDA7XG4gIGxldCBwYXJ0ID0gZmFsc2U7XG4gIGxldCBpID0gMDtcbiAgbGV0IGNvbmRpdGlvbnMgPSAwO1xuICBsZXQgdG9rZW5zID0gdG9rZW5pemUocGF0dGVybik7XG4gIGRvIHtcbiAgICBwYXJ0ID0gcGFyc2VGb3JtYXRTZWN0aW9uKHRva2Vucyk7XG4gICAgLy8gRGF0ZXMgY2Fubm90IGJsZW5kIHdpdGggbm9uLWRhdGUgdG9rZW5zXG4gICAgLy8gR2VuZXJhbCBjYW5ub3QgYmxlbmQgd2l0aCBub24tZGF0ZSB0b2tlbnNcbiAgICAvLyAtLSBUaGlzIGlzIGRvZXMgbm90IG1hdGNoIEV4Y2VsIDEwMCUgd2hpY2hcbiAgICAvLyAgICBzZWVtcyB0byBhbGxvdyBcIixcIiBhcyBhIHRleHQgdG9rZW4gd2l0aCBHZW5lcmFsXG4gICAgLy8gLS0gRXhjZWwgYWxzbyBkb2VzIHNvbWV0aGluZyBzdHJhbmdlIHdoZW4gbWl4aW5nXG4gICAgLy8gICAgR2VuZXJhbCB3aXRoIGRhdGVzIChidXQgdGhhdCBjYW4gaGFyZGx5IGJlIGV4cGVjdGVkIHRvIHdvcmspXG4gICAgaWYgKFxuICAgICAgKHBhcnQuZGF0ZSB8fCBwYXJ0LmdlbmVyYWwpICYmXG4gICAgICAocGFydC5pbnRfcGF0dGVybi5sZW5ndGggfHwgcGFydC5mcmFjX3BhdHRlcm4ubGVuZ3RoIHx8IHBhcnQuc2NhbGUgIT09IDEgfHwgcGFydC50ZXh0KVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGZvcm1hdCcpO1xuICAgIH1cbiAgICBpZiAocGFydC5jb25kaXRpb24pIHtcbiAgICAgIGNvbmRpdGlvbnMrKztcbiAgICAgIGNvbmRpdGlvbmFsID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHBhcnQudGV4dCkge1xuICAgICAgLy8gb25seSBvbmUgdGV4dCBwYXJ0aXRpb24gaXMgYWxsb3dlZCBwZXIgcGF0dGVyblxuICAgICAgaWYgKHRleHRfcGFydGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBwYXJ0aXRpb24nKTtcbiAgICAgIH1cbiAgICAgIHRleHRfcGFydGl0aW9uID0gcGFydDtcbiAgICB9XG4gICAgaWYgKHBhcnQubG9jYWxlKSB7XG4gICAgICBsMTBuX292ZXJyaWRlID0gcmVzb2x2ZUxvY2FsZShwYXJ0LmxvY2FsZSk7XG4gICAgfVxuICAgIHBhcnRpdGlvbnMucHVzaChwYXJ0KTtcblxuICAgIG1vcmUgPSB0b2tlbnNbcGFydC50b2tlbnNVc2VkXT8udHlwZSA9PT0gJ2JyZWFrJyA/IDEgOiAwO1xuICAgIHRva2VucyA9IHRva2Vucy5zbGljZShwYXJ0LnRva2Vuc1VzZWQgKyBtb3JlKTtcbiAgICBpKys7XG4gIH1cbiAgd2hpbGUgKG1vcmUgJiYgaSA8IDQgJiYgY29uZGl0aW9ucyA8IDMpO1xuXG4gIC8vIE5vIG1vcmUgdGhhbiA0IHNlY3Rpb25zIGFyZSBhbGxvd2VkXG4gIGlmIChtb3JlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHBhcnRpdGlvbicpO1xuICB9XG4gIC8vIE9ubHkgMiBjb25kaXRpb25hbCBzdGF0ZW1lbnRzIGFyZSBhbGxvd2VkOiBcIjE7MjtlbHNlO3R4dFwiXG4gIGlmIChjb25kaXRpb25zID4gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjb25kaXRpb24nKTtcbiAgfVxuICAvLyAzcmQgcGFydCBtdXN0IGJlIHRleHQgb2YgbmV1dHJhbCBpZiBpdCBpcyBwcmVzZW50XG4gIGNvbnN0IHBhcnQzID0gcGFydGl0aW9uc1szXTtcbiAgaWYgKHBhcnQzICYmIChwYXJ0My5pbnRfcGF0dGVybi5sZW5ndGggfHwgcGFydDMuZnJhY19wYXR0ZXJuLmxlbmd0aCB8fCBwYXJ0My5kYXRlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBwYXJ0aXRpb24nKTtcbiAgfVxuXG4gIC8vIGNvbmRpdGlvbmFsIHBhdHRlcm5zIGdldCBhIHZvbGF0aWxlIG1pbnVzIG9uIHRoZSBcImVsc2VcIiBwYXJ0aXRpb25zXG4gIGlmIChjb25kaXRpb25hbCkge1xuICAgIGNvbnN0IG51bVBhcnRzID0gcGFydGl0aW9ucy5sZW5ndGg7XG4gICAgaWYgKG51bVBhcnRzID09PSAxKSB7XG4gICAgICAvLyBwcm92aWRlIGEgZmFsbGJhY2sgcGF0dGVybiBpZiB0aGVyZSBpc24ndCBvbmVcbiAgICAgIHBhcnRpdGlvbnNbMV0gPSBwYXJzZUZvcm1hdFNlY3Rpb24odG9rZW5pemUoJ0dlbmVyYWwnKSk7XG4gICAgICBwYXJ0aXRpb25zWzFdLmdlbmVyYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChudW1QYXJ0cyA8PSAyKSB7XG4gICAgICAvLyB3aGF0IGhhcHBlbnMgd2hlbiBbPDEwXTA7Wz4xMF0wIDw9PiAzIG9yIC0zP1xuICAgICAgLy8gPT4gcGF0dGVybiBpcyBcInZhbGlkXCIgYnV0IHdvbid0IG1hdGNoIGFueXRoaW5nIHJ1bnRpbWUsIHNvIGVycm9yc1xuICAgIH1cbiAgICAvLyAxIGFuZCAyIHBhcnQgY29uZGl0aW9uYWxzXG4gICAgaWYgKG51bVBhcnRzIDwgMykge1xuICAgICAgY29uc3QgcGFydDEgPSBwYXJ0aXRpb25zWzBdO1xuICAgICAgY29uc3QgcGFydDIgPSBwYXJ0aXRpb25zWzFdO1xuICAgICAgLy8gZmlyc3QgcGFydCBmb2xsb3dzIHN0YW5kYXJkIDwgPD0gPSBydWxlc1xuICAgICAgbWF5YmVBZGRNaW51cyhwYXJ0MSk7XG4gICAgICAvLyBzZWNvbmQgcGFydCB1c2VzIHN0YW5kYXJzIGFzIHdlbGwgKmlmIGl0IGhhcyBjb25kaXRpb25zKlxuICAgICAgaWYgKHBhcnQyLmNvbmRpdGlvbikge1xuICAgICAgICBtYXliZUFkZE1pbnVzKHBhcnQyKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyAuLi5lbHNlIGl0ICpzZWVtcyogdG8gZm9sbG93IGxvZ2ljIGJhc2VkIG9uIGZpcnN0IGNvbmRpdGlvblxuICAgICAgICBjb25zdCBjb25kID0gcGFydDEuY29uZGl0aW9uO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY29uZFswXSA9PT0gJz0nIHx8XG4gICAgICAgICAgKGNvbmRbMV0gPj0gMCAmJiAoY29uZFswXSA9PT0gJz4nIHx8IGNvbmRbMF0gPT09ICc+PScpKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJ0Mi50b2tlbnMudW5zaGlmdCh7XG4gICAgICAgICAgICB0eXBlOiAnbWludXMnLFxuICAgICAgICAgICAgdm9sYXRpbGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIDMgYW5kIDQgcGFydCBwYXR0ZXJuc1xuICAgICAgcGFydGl0aW9ucy5mb3JFYWNoKG1heWJlQWRkTWludXMpO1xuICAgIH1cbiAgfVxuICAvLyBpZiB0aGlzIGlzIG5vdCBhIGNvbmRpdGlvbmFsLCB0aGVuIHdlIGVuc3VyZSB3ZSBoYXZlIGFsbCA0IHBhcnRpdGlvbnNcbiAgZWxzZSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBsZXNzIHRoYW4gNCBwYXJ0aXRpb25zIGFuZCBvbmUgb2YgdGhlbSBpcyAudGV4dCxcbiAgICAvLyB3ZSBuZWVkIHRvIHVzZSBpdCBhcyB0aGUgdGV4dCBvbmVcbiAgICBpZiAocGFydGl0aW9ucy5sZW5ndGggPCA0ICYmIHRleHRfcGFydGl0aW9uKSB7XG4gICAgICBmb3IgKGxldCBwaSA9IDAsIHBsID0gcGFydGl0aW9ucy5sZW5ndGg7IHBpIDwgcGw7IHBpKyspIHtcbiAgICAgICAgaWYgKHBhcnRpdGlvbnNbcGldID09PSB0ZXh0X3BhcnRpdGlvbikge1xuICAgICAgICAgIHBhcnRpdGlvbnMuc3BsaWNlKHBpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBtaXNzaW5nIHBvc2l0aXZlXG4gICAgaWYgKHBhcnRpdGlvbnMubGVuZ3RoIDwgMSAmJiB0ZXh0X3BhcnRpdGlvbikge1xuICAgICAgcGFydGl0aW9uc1swXSA9IHBhcnNlRm9ybWF0U2VjdGlvbih0b2tlbml6ZSgnR2VuZXJhbCcpKTtcbiAgICAgIHBhcnRpdGlvbnNbMF0uZ2VuZXJhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gbWlzc2luZyBuZWdhdGl2ZVxuICAgIGlmIChwYXJ0aXRpb25zLmxlbmd0aCA8IDIpIHtcbiAgICAgIC8vIHRoZSB2b2xhdGlsZSBtaW51cyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgYSBzaW5nbGUgcGF0dGVyblxuICAgICAgY29uc3Qgdm9sTWludXMgPSB7IHR5cGU6ICdtaW51cycsIHZvbGF0aWxlOiB0cnVlIH07XG4gICAgICBwYXJ0aXRpb25zLnB1c2goY2xvbmVQYXJ0KHBhcnRpdGlvbnNbMF0sIHZvbE1pbnVzKSk7XG4gICAgfVxuICAgIC8vIG1pc3NpbmcgemVyb1xuICAgIGlmIChwYXJ0aXRpb25zLmxlbmd0aCA8IDMpIHtcbiAgICAgIHBhcnRpdGlvbnMucHVzaChjbG9uZVBhcnQocGFydGl0aW9uc1swXSkpO1xuICAgIH1cbiAgICAvLyBtaXNzaW5nIHRleHRcbiAgICBpZiAocGFydGl0aW9ucy5sZW5ndGggPCA0KSB7XG4gICAgICBpZiAodGV4dF9wYXJ0aXRpb24pIHtcbiAgICAgICAgcGFydGl0aW9ucy5wdXNoKHRleHRfcGFydGl0aW9uKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwYXJ0ID0gcGFyc2VGb3JtYXRTZWN0aW9uKHRva2VuaXplKCdAJykpO1xuICAgICAgICBwYXJ0LmdlbmVyYXRlZCA9IHRydWU7XG4gICAgICAgIHBhcnRpdGlvbnMucHVzaChwYXJ0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJ0aXRpb25zWzBdLmNvbmRpdGlvbiA9IFsgJz4nLCAwIF07XG4gICAgcGFydGl0aW9uc1sxXS5jb25kaXRpb24gPSBbICc8JywgMCBdO1xuICAgIHBhcnRpdGlvbnNbMl0uY29uZGl0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0dGVybjogcGF0dGVybixcbiAgICBwYXJ0aXRpb25zOiBwYXJ0aXRpb25zLFxuICAgIGxvY2FsZTogbDEwbl9vdmVycmlkZVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDYXRjaCAocGF0dGVybikge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZVBhdHRlcm4ocGF0dGVybik7XG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IGVyclBhcnQgPSB7XG4gICAgICB0b2tlbnM6IFsgeyB0eXBlOiAnZXJyb3InIH0gXSxcbiAgICAgIGVycm9yOiBlcnIubWVzc2FnZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4sXG4gICAgICBwYXJ0aXRpb25zOiBbIGVyclBhcnQsIGVyclBhcnQsIGVyclBhcnQsIGVyclBhcnQgXSxcbiAgICAgIGVycm9yOiBlcnIubWVzc2FnZSxcbiAgICAgIGxvY2FsZTogbnVsbFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIFRPS0VOX0dFTkVSQUwsIFRPS0VOX0hBU0gsIFRPS0VOX1pFUk8sIFRPS0VOX1FNQVJLLCBUT0tFTl9TTEFTSCwgVE9LRU5fR1JPVVAsIFRPS0VOX1NDQUxFLFxuICBUT0tFTl9DT01NQSwgVE9LRU5fQlJFQUssIFRPS0VOX1RFWFQsIFRPS0VOX1BMVVMsIFRPS0VOX01JTlVTLCBUT0tFTl9QT0lOVCwgVE9LRU5fU1BBQ0UsXG4gIFRPS0VOX1BFUkNFTlQsIFRPS0VOX0RJR0lULCBUT0tFTl9DQUxFTkRBUiwgVE9LRU5fRVJST1IsIFRPS0VOX0RBVEVUSU1FLCBUT0tFTl9EVVJBVElPTixcbiAgVE9LRU5fQ09ORElUSU9OLCBUT0tFTl9EQk5VTSwgVE9LRU5fTkFUTlVNLCBUT0tFTl9MT0NBTEUsIFRPS0VOX0NPTE9SLCBUT0tFTl9NT0RJRklFUixcbiAgVE9LRU5fQU1QTSwgVE9LRU5fRVNDQVBFRCwgVE9LRU5fU1RSSU5HLCBUT0tFTl9TS0lQLCBUT0tFTl9FWFAsIFRPS0VOX0ZJTEwsIFRPS0VOX1BBUkVOLFxuICBUT0tFTl9DSEFSXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IHtcbiAgZ2V0TG9jYWxlLFxuICBwYXJzZUxvY2FsZSxcbiAgYWRkTG9jYWxlXG59IGZyb20gJy4vbG9jYWxlLmpzJztcblxuaW1wb3J0IHsgZGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMuanMnO1xuXG5leHBvcnQgeyByb3VuZCB9IGZyb20gJy4vcm91bmQuanMnO1xuZXhwb3J0IHsgZGVjMmZyYWMgfSBmcm9tICcuL2RlYzJmcmFjLmpzJztcblxuaW1wb3J0IHsgZGF0ZVRvU2VyaWFsIGFzIGhhbmRsZURhdGVzIH0gZnJvbSAnLi9zZXJpYWxEYXRlLmpzJztcbmV4cG9ydCB7IGRhdGVUb1NlcmlhbCwgZGF0ZUZyb21TZXJpYWwgfSBmcm9tICcuL3NlcmlhbERhdGUuanMnO1xuXG5leHBvcnQge1xuICBwYXJzZU51bWJlcixcbiAgcGFyc2VEYXRlLFxuICBwYXJzZVRpbWUsXG4gIHBhcnNlQm9vbCxcbiAgcGFyc2VWYWx1ZVxufSBmcm9tICcuL3BhcnNlVmFsdWUuanMnO1xuXG5pbXBvcnQgeyBmb3JtYXRDb2xvciBhcyBmbXRDb2xvciwgZm9ybWF0VmFsdWUgYXMgZm10VmFsdWUgfSBmcm9tICcuL2Zvcm1hdE51bWJlci5qcyc7XG5pbXBvcnQgeyBpbmZvLCBkYXRlSW5mbywgaXNEYXRlLCBpc1BlcmNlbnQsIGlzVGV4dCB9IGZyb20gJy4vZm9ybWF0SW5mby5qcyc7XG5pbXBvcnQgeyBwYXJzZVBhdHRlcm4gfSBmcm9tICcuL3BhcnNlUGF0dGVybi5qcyc7XG5cbmV4cG9ydCB7IHRva2VuaXplIH0gZnJvbSAnLi90b2tlbml6ZS5qcyc7XG5cbmNvbnN0IF9wYXJzZURhdGFDYWNoZSA9IE9iamVjdC5jcmVhdGUoe30pO1xuZnVuY3Rpb24gcHJlcGFyZUZvcm1hdHRlckRhdGEgKHBhdHRlcm4sIHNob3VsZFRocm93ID0gZmFsc2UpIHtcbiAgaWYgKCFwYXR0ZXJuKSB7IHBhdHRlcm4gPSAnR2VuZXJhbCc7IH1cblxuICBsZXQgcGFyc2VEYXRhID0gX3BhcnNlRGF0YUNhY2hlW3BhdHRlcm5dO1xuICBpZiAoIXBhcnNlRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBwYXJzZURhdGEgPSBwYXJzZVBhdHRlcm4ocGF0dGVybik7XG4gICAgICBfcGFyc2VEYXRhQ2FjaGVbcGF0dGVybl0gPSBwYXJzZURhdGE7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGlmIHRoZSBvcHRpb25zIHNheSB0byB0aHJvdyBlcnJvcnMsIHRoZW4gZG8gc29cbiAgICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICAvLyBlbHNlIHdlIHNldCB0aGUgcGFyc2VkYXRhIHRvIGVycm9yXG4gICAgICBjb25zdCBlcnJQYXJ0ID0ge1xuICAgICAgICB0b2tlbnM6IFsgeyB0eXBlOiAnZXJyb3InIH0gXSxcbiAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlXG4gICAgICB9O1xuICAgICAgcGFyc2VEYXRhID0ge1xuICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuLFxuICAgICAgICBwYXJ0aXRpb25zOiBbIGVyclBhcnQsIGVyclBhcnQsIGVyclBhcnQsIGVyclBhcnQgXSxcbiAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxuICAgICAgICBsb2NhbGU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZURhdGE7XG59XG5cbi8qKlxuICogRm9ybWF0cyBhIHZhbHVlIGFzIGEgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuXG4gKlxuICogLSBEYXRlcyBhcmUgbm9ybWFsaXplZCB0byBzcHJlYWRzaGVldCBzdHlsZSBzZXJpYWwgZGF0ZXMgYW5kIHRoZW4gZm9ybWF0dGVkLlxuICogLSBCb29sZWFucyBhcmUgZW1pdHRlZCBhcyB1cHBlcmNhc2UgXCJUUlVFXCIgb3IgXCJGQUxTRVwiLlxuICogLSBOdWxsIGFuZCBVbmRlZmluZWQgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIFwiXCIuXG4gKiAtIEFueSBub24gbnVtYmVyIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkIGFuZCBwYXNzZWQgdGhyb3VnaCB0aGUgdGV4dCBzZWN0aW9uIG9mIHRoZSBmb3JtYXQgcGF0dGVybi5cbiAqIC0gTmFOcyBhbmQgaW5maW5pdGVzIHdpbGwgdXNlIHRoZSBjb3JyZXNwb25kaW5nIHN0cmluZ3MgZnJvbSB0aGUgYWN0aXZlIGxvY2FsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIEEgZm9ybWF0IHBhdHRlcm4gaW4gdGhlIEVDTUEtMzc2IG51bWJlciBmb3JtYXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZvcm1hdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9XCJcIl1cbiAqICAgIEEgQkNQIDQ3IHN0cmluZyB0YWcuIExvY2FsZSBkZWZhdWx0IGlzIGVuZ2xpc2ggd2l0aCBhIGBcXHUwMGEwYFxuICogICAgZ3JvdXBpbmcgc3ltYm9sIChzZWUgW2FkZExvY2FsZV0oI2FkZExvY2FsZSkpXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub3ZlcmZsb3c9XCIjIyMjIyNcIl1cbiAqICAgIFRoZSBzdHJpbmcgZW1pdHRlZCB3aGVuIGEgZm9ybWF0dGVyIGZhaWxzIHRvIGZvcm1hdCBhIGRhdGUgdGhhdCBpcyBvdXRcbiAqICAgIG9mIGJvdW5kcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pbnZhbGlkPVwiIyMjIyMjXCJdXG4gKiAgICBUaGUgc3RyaW5nIGVtaXR0ZWQgd2hlbiBuby10aHJvdyBtb2RlIGZhaWxzIHRvIHBhcnNlIGEgcGF0dGVybi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGhyb3dzPXRydWVdXG4gKiAgICBTaG91bGQgdGhlIGZvcm1hdHRlciB0aHJvdyBhbiBlcnJvciBpZiBhIHByb3ZpZGVkIHBhdHRlcm4gaXMgaW52YWxpZC5cbiAqICAgIElmIGZhbHNlLCBhIGZvcm1hdHRlciB3aWxsIGJlIGNvbnN0cnVjdGVkIHdoaWNoIGluc3RlYWQgb3V0cHV0cyBhbiBlcnJvclxuICogICAgc3RyaW5nIChzZWUgX2ludmFsaWRfIGluIHRoaXMgdGFibGUpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uYnNwPWZhbHNlXVxuICogICAgQnkgZGVmYXVsdCB0aGUgb3V0cHV0IHdpbGwgdXNlIGEgcmVndWxhciBzcGFjZSwgYnV0IGluIG1hbnkgY2FzZXMgeW91XG4gKiAgICBtYXkgZGVzaXJlIGEgbm9uLWJyZWFraW5nLXNwYWNlIGluc3RlYWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYXAxOTAwPXRydWVdXG4gKiAgICBTaW11bGF0ZSB0aGUgTG90dXMgMS0yLTMgWzE5MDAgbGVhcCB5ZWFyIGJ1Z10oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb2ZmaWNlL3Ryb3VibGVzaG9vdC9leGNlbC93cm9uZ2x5LWFzc3VtZXMtMTkwMC1pcy1sZWFwLXllYXIpLlxuICogICAgSXQgaXMgYSByZXF1aXJlbWVudCBpbiB0aGUgRWNtYSBPT1hNTCBzcGVjaWZpY2F0aW9uIHNvIGl0IGlzIG9uIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRhdGVFcnJvclRocm93cz1mYWxzZV1cbiAqICAgIFNob3VsZCB0aGUgZm9ybWF0dGVyIHRocm93IGFuIGVycm9yIHdoZW4gdHJ5aW5nIHRvIGZvcm1hdCBhIGRhdGUgdGhhdCBpc1xuICogICAgb3V0IG9mIGJvdW5kcz9cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGF0ZUVycm9yTnVtYmVyPXRydWVdXG4gKiAgICBTaG91bGQgdGhlIGZvcm1hdHRlciBzd2l0Y2ggdG8gYSBHZW5lcmFsIG51bWJlciBmb3JtYXQgd2hlbiB0cnlpbmcgdG9cbiAqICAgIGZvcm1hdCBhIGRhdGUgdGhhdCBpcyBvdXQgb2YgYm91bmRzP1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5iaWdpbnRFcnJvck51bWJlcj1mYWxzZV1cbiAqICAgIFNob3VsZCB0aGUgZm9ybWF0dGVyIHN3aXRjaCB0byBhIHBsYWluIHN0cmluZyBudW1iZXIgZm9ybWF0IHdoZW4gdHJ5aW5nIHRvXG4gKiAgICBmb3JtYXQgYSBiaWdpbnQgdGhhdCBpcyBvdXQgb2YgYm91bmRzP1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kYXRlU3BhbkxhcmdlPXRydWVdXG4gKiAgICBFeHRlbmRzIHRoZSBhbGxvd2VkIHJhbmdlIG9mIGRhdGVzIGZyb20gRXhjZWwgYm91bmRzICgxOTAw4oCTOTk5OSkgdG9cbiAqICAgIEdvb2dsZSBTaGVldCBib3VuZHMgKDDigJM5OTk5OSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVRpbWV6b25lPWZhbHNlXVxuICogICAgTm9ybWFsbHkgd2hlbiBkYXRlIG9iamVjdHMgYXJlIHVzZWQgd2l0aCB0aGUgZm9ybWF0dGVyLCB0aW1lIHpvbmUgaXMgdGFrZW5cbiAqICAgIGludG8gYWNjb3VudC4gVGhpcyBtYWtlcyB0aGUgZm9ybWF0dGVyIGlnbm9yZSB0aGUgdGltZXpvbmUgb2Zmc2V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5za2lwQ2hhcj0nJ11cbiAqICAgIFdoZW4gdGhlIGZvcm1hdHRlciBlbmNvdW50ZXJzIGBfYCBpdCBub3JtYWxseSBlbWl0cyBhIHNpbmdsZSBzcGFjZSBpbnN0ZWFkXG4gKiAgICBvZiB0aGUgYF9gIGFuZCB0aGUgbmV4dCBjaGFyYWN0ZXIgKGxpa2UgRXhjZWwgVEVYVCBmdW5jdGlvbiBkb2VzKS4gU2V0dGluZ1xuICogICAgdGhpcyB0byBhIGNoYXJhY3RlciB3aWxsIG1ha2UgdGhlIGZvcm1hdHRlciBlbWl0IHRoYXQgZm9sbG93ZWQgYnkgdGhlIG5leHRcbiAqICAgIG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZmlsbENoYXI9JyddXG4gKiAgICBXaGVuIHRoZSBmb3JtYXR0ZXIgZW5jb3VudGVycyBgKmAgaXQgbm9ybWFsbHkgZW1pdHMgbm90aGluZyBpbnN0ZWFkIG9mIHRoZVxuICogICAgYCpgIGFuZCB0aGUgbmV4dCBjaGFyYWN0ZXIgKGxpa2UgRXhjZWwgVEVYVCBmdW5jdGlvbiBkb2VzKS4gU2V0dGluZyB0aGlzXG4gKiAgICB0byBhIGNoYXJhY3RlciB3aWxsIG1ha2UgdGhlIGZvcm1hdHRlciBlbWl0IHRoYXQgZm9sbG93ZWQgYnkgdGhlIG5leHQgb25lLlxuICogQHJldHVybnMge3N0cmluZ30gQSBmb3JtYXR0ZWQgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCAocGF0dGVybiwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICBjb25zdCBkYXRhID0gcHJlcGFyZUZvcm1hdHRlckRhdGEocGF0dGVybiwgb3B0cy50aHJvd3MpO1xuICBjb25zdCB2YWwgPSBoYW5kbGVEYXRlcyh2YWx1ZSwgb3B0cykgPz8gdmFsdWU7XG4gIHJldHVybiBmbXRWYWx1ZSh2YWwsIGRhdGEsIG9wdHMpO1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIGNvbG9yIGFwcHJvcHJpYXRlIHRvIGEgdmFsdWUgYXMgZGljdGF0ZWQgYnkgYSBmb3JtYXQgcGF0dGVybi5cbiAqIFxuICogSWYgdGhlIHBhdHRlcm4gZGVmaW5lcyBjb2xvcnMsIHRoaXMgZnVuY3Rpb24gd2lsbCBlbWl0IHRoZSBjb2xvciBhcHByb3ByaWF0ZVxuICogdG8gdGhlIHZhbHVlLiBJZiBubyBjb2xvcnMgd2VyZSBzcGVjaWZpZWQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGB1bmRlZmluZWRgLlxuICogXG4gKiBgYGBqc1xuICogY29uc3QgY29sb3IgPSBmb3JtYXRDb2xvcihcIltncmVlbl0jLCMjMDtbcmVkXS0jLCMjMFwiLCAtMTApO1xuICogY29uc29sZS5sb2coY29sb3IpOyAvLyBcInJlZFwiXG4gKiBjb25zdCBjb2xvciA9IGZvcm1hdENvbG9yKFwiW2dyZWVuXSMsIyMwOy0jLCMjMFwiLCAtMTApO1xuICogY29uc29sZS5sb2coY29sb3IpOyAvLyBudWxsXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIEEgZm9ybWF0IHBhdHRlcm4gaW4gdGhlIEVDTUEtMzc2IG51bWJlciBmb3JtYXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZvcm1hdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGhyb3dzPXRydWVdXG4gKiAgICBTaG91bGQgdGhlIGZvcm1hdHRlciB0aHJvdyBhbiBlcnJvciBpZiBhIHByb3ZpZGVkIHBhdHRlcm4gaXMgaW52YWxpZC5cbiAqICAgIElmIGZhbHNlLCBhIGZvcm1hdHRlciB3aWxsIGJlIGNvbnN0cnVjdGVkIHdoaWNoIGluc3RlYWQgb3V0cHV0cyBhbiBlcnJvclxuICogICAgc3RyaW5nIChzZWUgX2ludmFsaWRfIGluIHRoaXMgdGFibGUpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pZ25vcmVUaW1lem9uZT1mYWxzZV1cbiAqICAgIE5vcm1hbGx5IHdoZW4gZGF0ZSBvYmplY3RzIGFyZSB1c2VkIHdpdGggdGhlIGZvcm1hdHRlciwgdGltZSB6b25lIGlzIHRha2VuXG4gKiAgICBpbnRvIGFjY291bnQuIFRoaXMgbWFrZXMgdGhlIGZvcm1hdHRlciBpZ25vcmUgdGhlIHRpbWV6b25lIG9mZnNldC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaW5kZXhDb2xvcnM9dHJ1ZV1cbiAqICAgIFdoZW4gaW5kZXhlZCBjb2xvciBtb2RpZmllcnMgYXJlIHVzZWQgKGBbQ29sb3IgMV1gKSB0aGUgZm9ybWF0dGVyIHdpbGxcbiAqICAgIGNvbnZlcnQgdGhlIGluZGV4IGludG8gdGhlIGNvcnJlc3BvbmRpbmcgaGV4IGNvbG9yIG9mIHRoZSBkZWZhdWx0IHBhbGV0dGUuXG4gKiAgICBXaGVuIHRoaXMgb3B0aW9uIGlzIHNldCB0byBmYWxzZSwgdGhlIG51bWJlciB3aWxsIGluc3RlYWQgYnkgZW1pdHRlZFxuICogICAgYWxsb3dpbmcgeW91IHRvIGluZGV4IGFnYWluc3QgYSBjdXN0b20gcGFsZXR0ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVtYmVyfG51bGx9XG4gKiAgICBBIHN0cmluZyBjb2xvciB2YWx1ZSBhcyBkZXNjcmliZWQgYnkgdGhlIHBhdHRlcm4gb3IgYSBudW1iZXIgaWYgdGhlXG4gKiAgICBpbmRleENvbG9ycyBvcHRpb24gaGFzIGJlZW4gc2V0IHRvIGZhbHNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Q29sb3IgKHBhdHRlcm4sIHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIGNvbnN0IGRhdGEgPSBwcmVwYXJlRm9ybWF0dGVyRGF0YShwYXR0ZXJuLCBvcHRzLnRocm93cyk7XG4gIGNvbnN0IHZhbCA9IGhhbmRsZURhdGVzKHZhbHVlLCBvcHRzKSA/PyB2YWx1ZTtcbiAgcmV0dXJuIGZtdENvbG9yKHZhbCwgZGF0YSwgb3B0cyk7XG59XG5cbi8vIEZJWE1FOiB3aGF0IGlzIGEgYSBzZWN0aW9uPy4uLlxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSBnaXZlbiBmb3JtYXQgcGF0dGVybiBpcyBhIGRhdGUgcGF0dGVybi5cbiAqXG4gKiBUaGUgcGF0dGVybiBpcyBjb25zaWRlcmVkIGEgZGF0ZSBwYXR0ZXJuIGlmIGFueSBvZiBpdHMgc2VjdGlvbnMgY29udGFpbiBhXG4gKiBkYXRlIHN5bWJvbCAoc3VjaCBhcyBgWWAgb3IgYEhgKS4gRWFjaCBzZWN0aW9uIGlzIHJlc3RyaWN0ZWQgdG8gYmVcbiAqIF9laXRoZXJfIGEgbnVtYmVyIG9yIGRhdGUgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gQSBmb3JtYXQgcGF0dGVybiBpbiB0aGUgRUNNQS0zNzYgbnVtYmVyIGZvcm1hdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgcGF0dGVybiBpcyBkYXRlIHBhdHRlcm4sIEZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZUZvcm1hdCAocGF0dGVybikge1xuICBjb25zdCBkYXRhID0gcHJlcGFyZUZvcm1hdHRlckRhdGEocGF0dGVybiwgZmFsc2UpO1xuICByZXR1cm4gaXNEYXRlKGRhdGEucGFydGl0aW9ucyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gZm9ybWF0IHBhdHRlcm4gaXMgYSBwZXJjZW50YWdlIHBhdHRlcm4uXG4gKiBcbiAqIFRoZSBwYXR0ZXJuIGlzIGNvbnNpZGVyZWQgYSBwZXJjZW50YWdlIHBhdHRlcm4gaWYgYW55IG9mIGl0cyBzZWN0aW9uc1xuICogY29udGFpbnMgYW4gdW5lc2NhcGVkIHBlcmNlbnRhZ2Ugc3ltYm9sLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gQSBmb3JtYXQgcGF0dGVybiBpbiB0aGUgRUNNQS0zNzYgbnVtYmVyIGZvcm1hdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgcGF0dGVybiBpcyBkYXRlIHBhdHRlcm4sIEZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGVyY2VudEZvcm1hdCAocGF0dGVybikge1xuICBjb25zdCBkYXRhID0gcHJlcGFyZUZvcm1hdHRlckRhdGEocGF0dGVybiwgZmFsc2UpO1xuICByZXR1cm4gaXNQZXJjZW50KGRhdGEucGFydGl0aW9ucyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gZm9ybWF0IHBhdHRlcm4gaXMgYSB0ZXh0IG9ubHkgcGF0dGVybi5cbiAqIFxuICogVGhlIHBhdHRlcm4gaXMgY29uc2lkZXJlZCB0ZXh0IG9ubHkgaWYgaXRzIGRlZmluaXRpb24gaXMgY29tcG9zZWQgb2YgYSBzaW5nbGVcbiAqIHNlY3Rpb24gdGhhdCBpbmNsdWRlcyB0aGF0IHRleHQgc3ltYm9sIChgQGApLlxuICogXG4gKiBGb3IgZXhhbXBsZSBgQGAgb3IgYEBcIiBVU0RcImAgYXJlIHRleHQgcGF0dGVybnMgYnV0IGAjO0BgIGlzIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIEEgZm9ybWF0IHBhdHRlcm4gaW4gdGhlIEVDTUEtMzc2IG51bWJlciBmb3JtYXQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHBhdHRlcm4gaXMgZGF0ZSBwYXR0ZXJuLCBGYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RleHRGb3JtYXQgKHBhdHRlcm4pIHtcbiAgY29uc3QgZGF0YSA9IHByZXBhcmVGb3JtYXR0ZXJEYXRhKHBhdHRlcm4sIGZhbHNlKTtcbiAgcmV0dXJuIGlzVGV4dChkYXRhLnBhcnRpdGlvbnMpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIGdpdmVuIGZvcm1hdCBwYXR0ZXJuIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gQSBmb3JtYXQgcGF0dGVybiBpbiB0aGUgRUNNQS0zNzYgbnVtYmVyIGZvcm1hdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgcGF0dGVybiBpcyB2YWxpZCwgRmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEZvcm1hdCAocGF0dGVybikge1xuICB0cnkge1xuICAgIHByZXBhcmVGb3JtYXR0ZXJEYXRhKHBhdHRlcm4sIHRydWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBkZXRhaWxpbmcgdGhlIHByb3BlcnRpZXMgYW5kIGludGVybmFscyBvZiBhIGZvcm1hdCBwYXJzZWRcbiAqIGZvcm1hdCBwYXR0ZXJuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gQSBmb3JtYXQgcGF0dGVybiBpbiB0aGUgRUNNQS0zNzYgbnVtYmVyIGZvcm1hdC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gIE9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jdXJyZW5jeV1cbiAqICAgTGltaXQgdGhlIHBhdHRlcm5zIGlkZW50aWZpZWQgYXMgY3VycmVuY3kgdG8gdGhvc2UgdGhhdCB1c2UgdGhlIGdpdmUgc3RyaW5nLlxuICogICBJZiBub3RoaW5nIGlzIHByb3ZpZGVkLCBwYXR0ZXJucyB3aWxsIGJlIHRhZ2dlZCBhcyBjdXJyZW5jeSBpZiBvbmUgb2YgdGhlXG4gKiAgIGZvbGxvd2luZyBjdXJyZW5jeSBzeW1ib2xzIGlzIHVzZWQ6IMKkJMKjwqXWj9iL4Kez4Li/4Z+b4oKh4oKm4oKp4oKq4oKr4oKs4oKt4oKu4oKx4oKy4oK04oK44oK54oK64oK84oK94oK+4oK/XG4gKiBAcmV0dXJucyB7Rm9ybWF0SW5mb30gQW4gb2JqZWN0IG9mIGZvcm1hdCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybWF0SW5mbyAocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGRhdGEgPSBwcmVwYXJlRm9ybWF0dGVyRGF0YShwYXR0ZXJuLCBmYWxzZSk7XG4gIGlmICghZGF0YS5pbmZvKSB7XG4gICAgZGF0YS5pbmZvID0gaW5mbyhkYXRhLnBhcnRpdGlvbnMsIG9wdGlvbnM/LmN1cnJlbmN5KTtcbiAgfVxuICByZXR1cm4gZGF0YS5pbmZvO1xufVxuXG4vKipcbiAqIEdldHMgaW5mb3JtYXRpb24gYWJvdXQgZGF0ZSBjb2RlcyB1c2UgaW4gYSBmb3JtYXQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gQSBmb3JtYXQgcGF0dGVybiBpbiB0aGUgRUNNQS0zNzYgbnVtYmVyIGZvcm1hdC5cbiAqIEByZXR1cm5zIHtGb3JtYXREYXRlSW5mb30gQW4gb2JqZWN0IG9mIGZvcm1hdCBkYXRlIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtYXREYXRlSW5mbyAocGF0dGVybikge1xuICBjb25zdCBkYXRhID0gcHJlcGFyZUZvcm1hdHRlckRhdGEocGF0dGVybiwgZmFsc2UpO1xuICBpZiAoIWRhdGEuZGF0ZUluZm8pIHtcbiAgICBkYXRhLmRhdGVJbmZvID0gZGF0ZUluZm8oZGF0YS5wYXJ0aXRpb25zKTtcbiAgfVxuICByZXR1cm4gZGF0YS5kYXRlSW5mbztcbn1cblxuLyoqXG4gKiBBIGRpY3Rpb25hcnkgb2YgdGhlIHR5cGVzIHVzZWQgdG8gaWRlbnRpZnkgdG9rZW4gdmFyaWFudHMuXG4gKlxuICogQHJlYWRvbmx5XG4gKiBAY29uc3RhbnQge09iamVjdDxzdHJpbmc+fSB0b2tlblR5cGVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQU1QTSAtIEFNL1BNIG9wZXJhdG9yIChgQU0vUE1gLCBgQS9QYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBCUkVBSyAtIFNlbWljb2xvbiBvcGVyYXRvciBpbmRpY2F0aW5nIGEgYnJlYWsgYmV0d2VlbiBmb3JtYXQgc2VjdGlvbnMgKGA7YClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDQUxFTkRBUiAtIENhbGVuZGFyIG1vZGlmaWVyIChgQjJgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IENIQVIgLSBTaW5nbGUgbm9uLW9wZXJhdG9yIGNoYXJhY3RlciAoYG1gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IENPTE9SIC0gQ29sb3IgbW9kaWZpZXIgKGBbQmxhY2tdYCwgYFtjb2xvciA1XWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ09NTUEgLSBQbGFpbiBub24tb3BlcmF0b3IgY29tbWEgKGAsYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDT05ESVRJT04gLSBDb25kaXRpb24gbW9kaWZpZXIgZm9yIGEgc2VjdGlvbiAoYFs+PTEwXWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gREFURVRJTUUgLSBEYXRlLXRpbWUgb3BlcmF0b3IgKGBtbW1tYCwgYFlZYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBEQk5VTSAtIE51bWJlciBkaXNwbGF5IG1vZGlmaWVyIChgW0RCTnVtMjNdYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBESUdJVCAtIEEgZGlnaXQgYmV0d2VlbiAxIGFuZCA5IChgM2ApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gRFVSQVRJT04gLSBUaW1lIGR1cmF0aW9uIChgW3NzXWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gRVJST1IgLSBVbmlkZW50aWZpYWJsZSBvciBpbGxlZ2FsIGNoYXJhY3RlciAoYMWHYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBFU0NBUEVEIC0gRXNjYXBlZCBjaGFyYWN0ZXIgKGBcXEVgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEVYUCAtIEV4cG9uZW50IG9wZXJhdG9yIChgRStgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEZJTEwgLSBGaWxsIHdpdGggY2hhciBvcGVyYXRvciBhbmQgb3BlcmFuZCAoYCpfYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBHRU5FUkFMIC0gR2VuZXJhbCBmb3JtYXQgb3BlcmF0b3IgKGBHZW5lcmFsYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBHUk9VUCAtIE51bWJlciBncm91cGluZyBvcGVyYXRvciAoYCxgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEhBU0ggLSBIYXNoIG9wZXJhdG9yIChkaWdpdCBpZiBhdmFpbGFibGUpIChgI2ApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTE9DQUxFIC0gTG9jYWxlIG1vZGlmaWVyIChgWyQtMUUwMjA0MDRdYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNSU5VUyAtIE1pbnVzIHNpZ24gKGAtYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNT0RJRklFUiAtIEFuIHVuaWRlbnRpZmllZCBtb2RpZmllciAoYFtTY2h3YXJ6XWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTkFUTlVNIC0gTnVtYmVyIGRpc3BsYXkgbW9kaWZpZXIgKGBbTmF0TnVtM11gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFBBUkVOIC0gUGFyZW50aGVzaXMgY2hhcmFjdGVyIChgKWApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUEVSQ0VOVCAtIFBlcmNlbnQgb3BlcmF0b3IgKGAlYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQTFVTIC0gUGx1cyBzaWduIChgK2ApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUE9JTlQgLSBEZWNpbWFsIHBvaW50IG9wZXJhdG9yIChgLmApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gUU1BUksgLSBRdWVzdGlvbiBtYXJrIG9wZXJhdG9yIChkaWdpdCBvciBzcGFjZSBpZiBub3QgYXZhaWxhYmxlKSAoYD9gKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFNDQUxFIC0gU2NhbGluZyBvcGVyYXRvciAoYCxgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFNLSVAgLSBTa2lwIHdpdGggY2hhciBvcGVyYXRvciBhbmQgb3BlcmFuZCAoYCpfYClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBTTEFTSCAtIFNsYXNoIG9wZXJhdG9yIChgL2ApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gU1BBQ0UgLSBTcGFjZSAoYCBgKVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFNUUklORyAtIFF1b3RlZCBzdHJpbmcgKGBcImRheXNcImApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gVEVYVCAtIFRleHQgb3V0cHV0IG9wZXJhdG9yIChgQGApXG4gKiBAcHJvcGVydHkge3N0cmluZ30gWkVSTyAtIFplcm8gb3BlcmF0b3IgKGRpZ2l0IG9yIHplcm8gaWYgbm90IGF2YWlsYWJsZSkgKGAwYClcbiAqIEBzZWUgdG9rZW5pemVcbiAqL1xuZXhwb3J0IGNvbnN0IHRva2VuVHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgQU1QTTogVE9LRU5fQU1QTSxcbiAgQlJFQUs6IFRPS0VOX0JSRUFLLFxuICBDQUxFTkRBUjogVE9LRU5fQ0FMRU5EQVIsXG4gIENIQVI6IFRPS0VOX0NIQVIsXG4gIENPTE9SOiBUT0tFTl9DT0xPUixcbiAgQ09NTUE6IFRPS0VOX0NPTU1BLFxuICBDT05ESVRJT046IFRPS0VOX0NPTkRJVElPTixcbiAgREFURVRJTUU6IFRPS0VOX0RBVEVUSU1FLFxuICBEQk5VTTogVE9LRU5fREJOVU0sXG4gIERJR0lUOiBUT0tFTl9ESUdJVCxcbiAgRFVSQVRJT046IFRPS0VOX0RVUkFUSU9OLFxuICBFUlJPUjogVE9LRU5fRVJST1IsXG4gIEVTQ0FQRUQ6IFRPS0VOX0VTQ0FQRUQsXG4gIEVYUDogVE9LRU5fRVhQLFxuICBGSUxMOiBUT0tFTl9GSUxMLFxuICBHRU5FUkFMOiBUT0tFTl9HRU5FUkFMLFxuICBHUk9VUDogVE9LRU5fR1JPVVAsXG4gIEhBU0g6IFRPS0VOX0hBU0gsXG4gIExPQ0FMRTogVE9LRU5fTE9DQUxFLFxuICBNSU5VUzogVE9LRU5fTUlOVVMsXG4gIE1PRElGSUVSOiBUT0tFTl9NT0RJRklFUixcbiAgTkFUTlVNOiBUT0tFTl9OQVROVU0sXG4gIFBBUkVOOiBUT0tFTl9QQVJFTixcbiAgUEVSQ0VOVDogVE9LRU5fUEVSQ0VOVCxcbiAgUExVUzogVE9LRU5fUExVUyxcbiAgUE9JTlQ6IFRPS0VOX1BPSU5ULFxuICBRTUFSSzogVE9LRU5fUU1BUkssXG4gIFNDQUxFOiBUT0tFTl9TQ0FMRSxcbiAgU0tJUDogVE9LRU5fU0tJUCxcbiAgU0xBU0g6IFRPS0VOX1NMQVNILFxuICBTUEFDRTogVE9LRU5fU1BBQ0UsXG4gIFNUUklORzogVE9LRU5fU1RSSU5HLFxuICBURVhUOiBUT0tFTl9URVhULFxuICBaRVJPOiBUT0tFTl9aRVJPXG59KTtcbiJdLCJuYW1lcyI6WyJ1X1lFQVIiLCJ1X01PTlRIIiwidV9EQVkiLCJ1X0hPVVIiLCJ1X01JTiIsInVfU0VDIiwidV9EU0VDIiwidV9DU0VDIiwidV9NU0VDIiwiRVBPQ0hfMTkwNCIsIkVQT0NIXzE5MDAiLCJFUE9DSF8xMzE3IiwiVE9LRU5fR0VORVJBTCIsIlRPS0VOX0hBU0giLCJUT0tFTl9aRVJPIiwiVE9LRU5fUU1BUksiLCJUT0tFTl9TTEFTSCIsIlRPS0VOX0dST1VQIiwiVE9LRU5fU0NBTEUiLCJUT0tFTl9DT01NQSIsIlRPS0VOX0JSRUFLIiwiVE9LRU5fVEVYVCIsIlRPS0VOX1BMVVMiLCJUT0tFTl9NSU5VUyIsIlRPS0VOX1BPSU5UIiwiVE9LRU5fU1BBQ0UiLCJUT0tFTl9QRVJDRU5UIiwiVE9LRU5fRElHSVQiLCJUT0tFTl9DQUxFTkRBUiIsIlRPS0VOX0VSUk9SIiwiVE9LRU5fREFURVRJTUUiLCJUT0tFTl9EVVJBVElPTiIsIlRPS0VOX0NPTkRJVElPTiIsIlRPS0VOX0RCTlVNIiwiVE9LRU5fTkFUTlVNIiwiVE9LRU5fTE9DQUxFIiwiVE9LRU5fQ09MT1IiLCJUT0tFTl9NT0RJRklFUiIsIlRPS0VOX0FNUE0iLCJUT0tFTl9FU0NBUEVEIiwiVE9LRU5fU1RSSU5HIiwiVE9LRU5fU0tJUCIsIlRPS0VOX0VYUCIsIlRPS0VOX0ZJTEwiLCJUT0tFTl9QQVJFTiIsIlRPS0VOX0NIQVIiLCJpbmRleENvbG9ycyIsImN1cnJlbmN5U3ltYm9scyIsInJlQ3VycmVuY3lTeW1ib2xzIiwiUmVnRXhwIiwiam9pbiIsIk9iamVjdCIsImZyZWV6ZSIsInJlX2xvY2FsZSIsImxvY2FsZXMiLCJfIiwic3RyIiwidGlsZGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZXBsYWNlIiwic3BsaXQiLCJ4bSIsIm8iLCJtbCIsImRsIiwibW1tIiwibW1tbSIsImNvbmNhdCIsIm1hcCIsImQiLCJzIiwic2xpY2UiLCJkZGQiLCJkZGRkIiwibW1tNiIsIm1tbW02IiwiYmFzZUxvY2FsZURhdGEiLCJncm91cCIsImRlY2ltYWwiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwicGVyY2VudCIsImV4cG9uZW50IiwibmFuIiwiaW5maW5pdHkiLCJhbXBtIiwiYm9vbCIsInByZWZlck1EWSIsInBhcnNlTG9jYWxlIiwibG9jYWxlIiwibG0iLCJleGVjIiwiU3ludGF4RXJyb3IiLCJsYW5nIiwibGFuZ3VhZ2UiLCJ0ZXJyaXRvcnkiLCJyZXNvbHZlTG9jYWxlIiwibDRlIiwiY29kZVRvTG9jYWxlIiwid2luY29kZSIsInBhcnNlSW50IiwiaXNGaW5pdGUiLCJ0ZXN0IiwiZ2V0TG9jYWxlIiwidGFnIiwib2JqIiwiYyIsImNyZWF0ZUxvY2FsZSIsImRhdGEiLCJhc3NpZ24iLCJhZGRMb2NhbGUiLCJsb2NhbGVTZXR0aW5ncyIsImRlZmF1bHRMb2NhbGUiLCJpc0RlZmF1bHQiLCJfemgiLCJfb2JqZWN0U3ByZWFkIiwiX2ZyIiwiX2RlIiwiX2l0IiwiX25vIiwiX3B0IiwiX2VzIiwiX2VzTTMiLCJfZXNNMTMiLCJkZWZhdWx0T3B0aW9ucyIsIm92ZXJmbG93IiwiZGF0ZUVycm9yVGhyb3dzIiwiZGF0ZUVycm9yTnVtYmVyIiwiYmlnaW50RXJyb3JOdW1iZXIiLCJkYXRlU3BhbkxhcmdlIiwibGVhcDE5MDAiLCJuYnNwIiwidGhyb3dzIiwiaW52YWxpZCIsImlnbm9yZVRpbWV6b25lIiwiZ3JvdXBpbmciLCJza2lwQ2hhciIsInJlcGVhdENoYXIiLCJyb3VuZCIsIm51bWJlciIsInBsYWNlcyIsInAiLCJNYXRoIiwiUFJFQ0lTSU9OIiwiZGVjMmZyYWMiLCJzaWduIiwibWF4ZGlnaXRzX24iLCJtYXhkaWdpdHNfZCIsInRtcCIsInIiLCJ6IiwiYWJzIiwibGFzdF9kIiwibGFzdF9uIiwiY3Vycl9uIiwiY3Vycl9kIiwiZmxvb3IiLCJ0b1lNRF8xOTAwIiwib3JkIiwibCIsIm4iLCJpIiwiaiIsIm5EYXkiLCJ0b1lNRCIsInN5c3RlbSIsImludCIsIkVycm9yIiwieSIsInNoaWZ0MSIsImN5YyIsIm0iLCJ0b1lNRF8xMzE3IiwidG9ZTURfMTkwNCIsIkRBWVNJWkUiLCJkYXRlVG9TZXJpYWwiLCJkYXRlIiwib3B0aW9ucyIsInRzIiwiQXJyYXkiLCJpc0FycmF5IiwiaGgiLCJtbSIsInNzIiwiRGF0ZSIsIlVUQyIsImR0Iiwic2V0VVRDRnVsbFllYXIiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInR4MCIsIkQiLCJNIiwiRiIsIlkiLCJ0eDAwIiwiZGF0ZVRyaWVETSIsImRhdGVUcmllTUQiLCJwYWNrRGF0ZSIsImYiLCJub2RlIiwiYWxsb3dUeXBlIiwiY2hhciIsIm5leHQiLCIkIiwiYWRkRm9ybWF0VG9UcmllIiwiZm10IiwidHJpZSIsImZvckVhY2giLCJjdXJyZW50WWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiU1AiLCJOUyIsIk5OIiwiQVAiLCJBRyIsImRlYzJncm91cCIsImlzRGlnaXQiLCJwYXJzZU51bWJlciIsInZhbHVlIiwibDEwbiIsImRlYyIsImdycCIsImluY2x1ZGVzIiwicHVzaCIsIm51bSIsImV4cCIsImZvcm1hdCIsIm1pbnVzIiwib3BlblBhcmVuIiwiY2xvc2VQYXJlbiIsImN1cnJlbmN5IiwiY3VycmVuY3lTeW1ib2wiLCJjdXJyZW5jeVRyYWlsaW5nIiwicHJlZml4Q2hhcnMiLCJnIiwiaGF2ZURlY2ltYWwiLCJjaCIsInN1ZmZpeENoYXJzIiwibnVtYmVyVmFsdWUiLCJwYXJzZUZsb2F0IiwiY3VycmVuY3lGb3JtYXQiLCJyZXQiLCJ2IiwiaXNWYWxpZERhdGUiLCJtYXRjaFJlYyIsInNraXBQZXJpb2QiLCJpdGVtIiwic3RhcnRzV2l0aCIsIm5leHRUb2tlbiIsImxEYXRhIiwicGF0aCIsIm1hdGNoT3JkZXIiLCJrZXlzIiwidCIsInNlcCIsImRheSIsIm1vbnRoIiwiX21vbiIsIm1hdGNoIiwibW9uIiwibXAiLCJkcCIsInllYXIiLCJ0aW1lIiwicGFyc2VUaW1lIiwidGYiLCJub3JtRGF0ZVN0ciIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsImdldExvb2t1cHMiLCJhcnIiLCJzeW0iLCJzb3J0IiwiYSIsImIiLCJwYXJzZURhdGUiLCJhdCIsIl9kYXRlJHllYXIiLCJlcG9jaCIsIkluZmluaXR5IiwiZGF0ZVZhbHVlIiwibGVhZDAiLCJub3JtQU1QTVN0ciIsInBhcnRzIiwidGFpbCIsImgiLCJocnMiLCJwYXJzZUJvb2wiLCJiVCIsImJGIiwibWluTWF4UGFkIiwicGFydCIsInByZWZpeCIsImFkZCIsInRva2VucyIsInR5cGUiLCJpc051bU9wIiwidG9rZW4iLCJhY3RpdmVQYXR0ZXJuIiwicGFyc2VGb3JtYXRTZWN0aW9uIiwiaW5wdXRUb2tlbnMiLCJvdXRwdXRUb2tlbnMiLCJzY2FsZSIsInRleHQiLCJkYXRlX2V2YWwiLCJkYXRlX3N5c3RlbSIsInNlY19kZWNpbWFscyIsImdlbmVyYWwiLCJjbG9jayIsImludF9wYXR0ZXJuIiwiZnJhY19wYXR0ZXJuIiwibWFuX3BhdHRlcm4iLCJkZW5fcGF0dGVybiIsIm51bV9wYXR0ZXJuIiwiY3VycmVudFBhdHRlcm4iLCJsYXN0TnVtYmVyQ2h1bmsiLCJkYXRlQ2h1bmtzIiwibGFzdCIsImhhdmVMb2NhbGUiLCJpbmRleCIsInBhcnRPdmVyIiwicGF0dGVyblNvdXJjZSIsImhhdmVTbGFzaCIsIl9pbnB1dFRva2VucyIsInJhdyIsIl9sYXN0IiwicHQiLCJwb3AiLCJwYXJlbnMiLCJmcmFjdGlvbnMiLCJ0b2tlblZhbHVlIiwiYml0Iiwic2l6ZSIsInBhZCIsIl9pbnB1dFRva2VuczIiLCJfaW5wdXRUb2tlbnMzIiwibWF4IiwiZGVjaW1hbHMiLCJsYXN0X2RhdGVfY2h1bmsiLCJ1c2VkIiwiaW5kZXRlcm1pbmF0ZSIsInNob3J0IiwiY29uZGl0aW9uIiwiYml0cyIsImNvZGUiLCJjbSIsImNvbG9yIiwiZGVjX2ZyYWN0aW9ucyIsImV4cG9uZW50aWFsIiwiZXhwX3BsdXMiLCJwbHVzIiwidG9rZW5zVXNlZCIsInBhdHRlcm4iLCJpbnRQYXR0ZXJuIiwibWFuUGF0dGVybiIsImZyYWNQYXR0ZXJuIiwibWluIiwiaW50X21pbiIsIm51bV9wYXQiLCJkZW5fcGF0IiwiaW50X3AiLCJtYW5fcCIsIm51bV9wIiwiZGVuX3AiLCJkZW5vbWluYXRvciIsImludGVnZXIiLCJwb2ludElkeCIsImZpbmRJbmRleCIsInNwbGljZSIsInRvayIsIm5leHRUeXBlIiwicnVsZSIsInplcm8iLCJ0b3RhbCIsInBlcmlvZCIsImZyYWMiLCJmaXhMb2NhbGUiLCJnZXRFeHAiLCJ4IiwibG9nMTAiLCJudW1fZGlnIiwiaW5jbF9zaWduIiwic2lnblNpemUiLCJpbnRQYXJ0IiwiaW50U2l6ZSIsInBlcmlvZFNpemUiLCJmcmFjU2l6ZSIsIlN0cmluZyIsImRpZ2l0cyIsIm51bWRlYyIsInRvUHJlY2lzaW9uIiwidG9GaXhlZCIsImdldEV4cG9uZW50IiwiaW50X21heCIsImRhdGVPdmVyZmxvd3MiLCJpbnB1dFZhbHVlIiwicm91bmRlZFZhbHVlIiwiYmlnUmFuZ2UiLCJydW5QYXJ0Iiwib3B0cyIsImwxMG5fIiwiX29wdHMkZ3JvdXBpbmckIiwiX29wdHMkZ3JvdXBpbmckMiIsIm1hbnRpc3NhIiwibWFudGlzc2Ffc2lnbiIsIm51bWVyYXRvciIsImZyYWN0aW9uIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJ0cnVuYyIsIndlZWtkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwic3Vic2VjIiwiY2VpbCIsIm1hZyIsImNsYW1wIiwidGVtcFZhbHVlIiwiZnJhY19tYXgiLCJncm91cF9wcmkiLCJncm91cF9zZWMiLCJmaXhlZF9zbGFzaCIsImVycm9yIiwiaGF2ZV9mcmFjdGlvbiIsIl9kZWMiLCJmcnQiLCJkZW5fbWF4IiwibWluVSIsImRvdXQiLCJwYWRRIiwiZGlnaXRzU3RhcnQiLCJudW1zdHIiLCJvZmZzZXQiLCJkZW5vbWluYXRvcl9maXhlZCIsImNvdW50ZXIiLCJtYW4iLCJkZW4iLCJ0aSIsInRsIiwidG9rZW5UeXBlIiwibGVuIiwibnVtX21pbiIsImRlbl9taW4iLCJ2b2xhdGlsZSIsImZpbGxDaGFyIiwiY2hhckF0IiwiZGlnaXQiLCJwYWRTdGFydCIsImlkeCIsImRlZmF1bHRfdGV4dCIsImdldFBhcnQiLCJwaSIsImNvbmQiLCJvcGVyYXRvciIsIm9wZXJhbmQiLCJpc1BlcmNlbnQiLCJwYXJ0aXRpb25zIiwiaXNEYXRlIiwiaXNUZXh0IiwicGFydDEiLCJwYXJ0MiIsInBhcnQzIiwicGFydDQiLCJnZW5lcmF0ZWQiLCJsZXZlbCIsImRhdGV0aW1lIiwiZ3JvdXBlZCIsInNjaWVudGlmaWMiLCJkYXRlQ29kZXMiLCJ0b2tlbkhhbmRsZXJzIiwiY2hhckNvZGVBdCIsInRva2VuaXplIiwidW5yZXNvbHZlZENvbW1hcyIsImN1cnIiLCJzdGVwIiwibUNvbW1hIiwibG9va0JlaGluZCIsIm1heWJlR1JPVVAiLCJtYXliZVNDQUxFIiwibG9va0FoZWFkIiwiZXhwciIsIm1heWJlQWRkTWludXMiLCJ1bnNoaWZ0IiwiY2xvbmVQYXJ0IiwicHJlZml4VG9rZW4iLCJrZXkiLCJfcGFyc2VEYXRhQ2FjaGUiLCJjcmVhdGUiLCJwcmVwYXJlRm9ybWF0dGVyRGF0YSIsInNob3VsZFRocm93IiwicGFyc2VEYXRhIiwibDEwbl9vdmVycmlkZSIsImNvbmRpdGlvbmFsIiwidGV4dF9wYXJ0aXRpb24iLCJtb3JlIiwiY29uZGl0aW9ucyIsIl90b2tlbnMkcGFydCR0b2tlbnNVcyIsIm51bVBhcnRzIiwicGwiLCJ2b2xNaW51cyIsInBhcnNlUGF0dGVybiIsImVyciIsImVyclBhcnQiLCJtZXNzYWdlIiwidG9rZW5UeXBlcyIsIkFNUE0iLCJCUkVBSyIsIkNBTEVOREFSIiwiQ0hBUiIsIkNPTE9SIiwiQ09NTUEiLCJDT05ESVRJT04iLCJEQVRFVElNRSIsIkRCTlVNIiwiRElHSVQiLCJEVVJBVElPTiIsIkVSUk9SIiwiRVNDQVBFRCIsIkVYUCIsIkZJTEwiLCJHRU5FUkFMIiwiR1JPVVAiLCJIQVNIIiwiTE9DQUxFIiwiTUlOVVMiLCJNT0RJRklFUiIsIk5BVE5VTSIsIlBBUkVOIiwiUEVSQ0VOVCIsIlBMVVMiLCJQT0lOVCIsIlFNQVJLIiwiU0NBTEUiLCJTS0lQIiwiU0xBU0giLCJTUEFDRSIsIlNUUklORyIsIlRFWFQiLCJaRVJPIiwic2VyaWFsRGF0ZSIsIl9oYW5kbGVEYXRlcyIsInRleHRfcGFydCIsImxvYyIsImlzTmFOIiwiZm10VmFsdWUiLCJoYW5kbGVEYXRlcyIsIl9oYW5kbGVEYXRlczIiLCJmbXRDb2xvciIsImRhdGVJbmZvIiwicGFydFBvcyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJjbG9ja1R5cGUiLCJpbmZvIiwiX3BhcnRQb3Mkc2NhbGUiLCJjdXJyZW5jeUlkIiwicGFydE5lZyIsIm1heERlY2ltYWxzIiwicGFyZW50aGVzZXMiLCJpc0N1cnJlbmN5Iiwic29tZSIsImNvZGVUeXBlIiwiY29kZU51bSIsImNvZGVQYXJlbnMiLCJjb2RlRGFzaCIsImhhdmVUaW1lIiwiaGF2ZURhdGUiLCJvcmRlciIsImZpbmQiLCJfcmVmIiwiX3JlZjIiLCJfcGFyc2VOdW1iZXIiXSwibWFwcGluZ3MiOiJhQUNPLE1BQU1BLEVBQVMsRUFDVEMsRUFBVSxFQUNWQyxFQUFRLEVBQ1JDLEVBQVMsR0FDVEMsRUFBUSxHQUNSQyxFQUFRLEdBQ1JDLEVBQVMsSUFDVEMsRUFBUyxJQUNUQyxFQUFTLElBV1RDLEdBQWMsRUFDZEMsRUFBYSxFQUNiQyxFQUFhLEVBRWJDLEVBQWdCLFVBQ2hCQyxFQUFhLE9BQ2JDLEVBQWEsT0FDYkMsRUFBYyxRQUNkQyxFQUFjLFFBQ2RDLEVBQWMsUUFDZEMsRUFBYyxRQUNkQyxFQUFjLFFBQ2RDLEVBQWMsUUFDZEMsRUFBYSxPQUNiQyxFQUFhLE9BQ2JDLEVBQWMsUUFDZEMsRUFBYyxRQUNkQyxFQUFjLFFBQ2RDLEVBQWdCLFVBQ2hCQyxFQUFjLFFBQ2RDLEVBQWlCLFdBQ2pCQyxFQUFjLFFBQ2RDLEVBQWlCLFdBQ2pCQyxFQUFpQixXQUNqQkMsRUFBa0IsWUFDbEJDLEVBQWMsUUFDZEMsRUFBZSxTQUNmQyxFQUFlLFNBQ2ZDLEVBQWMsUUFDZEMsRUFBaUIsV0FDakJDLEVBQWEsT0FDYkMsRUFBZ0IsVUFDaEJDLEVBQWUsU0FDZkMsRUFBYSxPQUNiQyxFQUFZLE1BQ1pDLEVBQWEsT0FDYkMsRUFBYyxRQUNkQyxFQUFhLE9BRWJDLEVBQWMsQ0FDekIsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FDeEUsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FDeEUsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FDeEUsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FDeEUsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FDeEUsT0FBUSxRQUdHQyxFQUFrQixDQUM3QixJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDeEMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ3hDLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUc3QkMsRUFBb0IsSUFBSUMsT0FBTyxJQUFNRixFQUFnQkcsS0FBSyxJQUFNLGlnQ0N4RTdFLElBQWVDLEVBQUFBLE9BQU9DLE9BQU8sQ0FDMUIsS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNQLE1BQU8sUUFDUCxNQUFPLFFBQ1AsTUFBTyxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNOLEtBQU0sUUFDUCxNQUFPLFFBQ04sS0FBTSxRQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxNQUNOLEtBQU0sUUFDUCxNQUFPLFFBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNOLEtBQU0sUUFDUCxNQUFPLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sTUFDTixLQUFNLEtBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sUUFDTixLQUFNLEtBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sTUFDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLFFBQ04sS0FBTSxRQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxNQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sUUFDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLFFBQ04sS0FBTSxRQUNOLEtBQU0sS0FDTixLQUFNLFFBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLFFBQ04sS0FBTSxRQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ1AsTUFBTyxRQUNQLE1BQU8sUUFDUCxNQUFPLFFBQ04sS0FBTSxRQUNOLEtBQU0sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNQLE1BQU8sUUFDTixLQUFNLFFBQ1AsTUFBTyxRQUNOLEtBQU0sUUFDUCxNQUFPLFFBQ04sS0FB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
