"use strict";const e=2,t=4,n=8,a=16,r=32,s=64,i=128,o=256,l=512,u=-1,d=1,m=6,c="general",p="hash",f="zero",h="qmark",g="slash",y="group",b="scale",_="comma",v="break",M="text",j="plus",k="minus",x="point",F="space",z="percent",w="digit",S="calendar",A="error",E="datetime",C="duration",D="condition",I="dbnum",N="natnum",Y="locale",T="color",O="modifier",P="ampm",R="escaped",L="string",U="skip",J="exp",G="fill",B="paren",H="char",$=["#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#800","#080","#008","#880","#808","#088","#CCC","#888","#99F","#936","#FFC","#CFF","#606","#F88","#06C","#CCF","#008","#F0F","#FF0","#0FF","#808","#800","#088","#00F","#0CF","#CFF","#CFC","#FF9","#9CF","#F9C","#C9F","#FC9","#36F","#3CC","#9C0","#FC0"],K=["¤","$","£","¥","֏","؋","৳","฿","៛","₡","₦","₩","₪","₫","€","₭","₮","₱","₲","₴","₸","₹","₺","₼","₽","₾","₿"],Z=new RegExp("["+K.join("")+"]");var W=Object.freeze({1078:"af",1052:"sq",1118:"am",5121:"ar_DZ",15361:"ar_BH",3073:"ar_EG",2049:"ar_IQ",11265:"ar_JO",13313:"ar_KW",12289:"ar_LB",4097:"ar_LY",6145:"ar_MA",8193:"ar_OM",16385:"ar_QA",1025:"ar_SA",10241:"ar_SY",7169:"ar_TN",14337:"ar_AE",9217:"ar_YE",1067:"hy",1101:"as",2092:"az_AZ",1068:"az_AZ",1069:"eu",1059:"be",2117:"bn",1093:"bn_IN",5146:"bs",1026:"bg",1109:"my",1027:"ca",2052:"zh_CN",3076:"zh_HK",5124:"zh_MO",4100:"zh_SG",1028:"zh_TW",1050:"hr",1029:"cs",1030:"da",1125:"dv",2067:"nl_BE",1043:"nl_NL",1126:"bin",3081:"en_AU",10249:"en_BZ",4105:"en_CA",9225:"en_CB",2057:"en_GB",16393:"en_IN",6153:"en_IE",8201:"en_JM",5129:"en_NZ",13321:"en_PH",7177:"en_ZA",11273:"en_TT",1033:"en_US",12297:"en_ZW",1061:"et",1071:"mk",1080:"fo",1065:"fa",1124:"fil",1035:"fi",2060:"fr_BE",11276:"fr_CM",3084:"fr_CA",9228:"fr_CG",12300:"fr_CI",1036:"fr_FR",5132:"fr_LU",13324:"fr_ML",6156:"fr_MC",14348:"fr_MA",10252:"fr_SN",4108:"fr_CH",7180:"fr",1122:"fy_NL",2108:"gd_IE",1084:"gd",1110:"gl",1079:"ka",3079:"de_AT",1031:"de_DE",5127:"de_LI",4103:"de_LU",2055:"de_CH",1032:"el",1140:"gn",1095:"gu",1279:"en",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig_NG",1057:"id",1040:"it_IT",2064:"it_CH",1041:"ja",1099:"kn",1120:"ks",1087:"kk",1107:"km",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1142:"la",1062:"lv",1063:"lt",2110:"ms_BN",1086:"ms_MY",1100:"ml",1082:"mt",1112:"mni",1153:"mi",1102:"mr",1104:"mn",2128:"mn",1121:"ne",1044:"no_NO",2068:"no_NO",1096:"or",1045:"pl",1046:"pt_BR",2070:"pt_PT",1094:"pa",1047:"rm",2072:"ro_MO",1048:"ro_RO",1049:"ru",2073:"ru_MO",1083:"se",1103:"sa",3098:"sr_SP",2074:"sr_SP",1072:"st",1074:"tn",1113:"sd",1115:"si",1051:"sk",1060:"sl",1143:"so",1070:"sb",11274:"es_AR",16394:"es_BO",13322:"es_CL",9226:"es_CO",5130:"es_CR",7178:"es_DO",12298:"es_EC",17418:"es_SV",4106:"es_GT",18442:"es_HN",2058:"es_MX",19466:"es_NI",6154:"es_PA",15370:"es_PY",10250:"es_PE",20490:"es_PR",1034:"es_ES",14346:"es_UY",8202:"es_VE",1089:"sw",2077:"sv_FI",1053:"sv_SE",1114:"syc",1064:"tg",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1073:"ts",1055:"tr",1090:"tk",1058:"uk",1056:"ur",2115:"uz_UZ",1091:"uz_UZ",1075:"ve",1066:"vi",1106:"cy",1076:"xh",1085:"yi",1077:"zu"});const q=/^([a-z\d]+)(?:[_-]([a-z\d]+))?(?:\.([a-z\d]+))?(?:@([a-z\d]+))?$/i,V={},Q={group:" ",decimal:".",positive:"+",negative:"-",percent:"%",exponent:"E",nan:"NaN",infinity:"∞",ampm:["AM","PM"],mmmm6:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"],mmm6:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],mmmm:["January","February","March","April","May","June","July","August","September","October","November","December"],mmm:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dddd:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ddd:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]};function X(e){const t=q.exec(e);if(!t)throw new SyntaxError("Malformed locale: ".concat(e));return{lang:t[1]+(t[2]?"_"+t[2]:""),language:t[1],territory:t[2]||""}}function ee(e){if("number"==typeof e)return W[65535&e]||null;const t=parseInt(e,16);return isFinite(t)&&W[65535&t]?W[65535&t]||null:q.test(e)?e:null}function te(e){const t=ee(e);let n=null;if(t){const e=X(t);n=V[e.lang]||V[e.language]||null}return n}function ne(e){return Object.assign({},Q,e)}function ae(e,t){const n="object"==typeof t?t:X(t);return V[n.lang]=ne(e),n.language===n.lang||V[n.language]||(V[n.language]=ne(e)),V[n.lang]}const re=ne({group:","});re.isDefault=!0,ae({group:",",ampm:["上午","下午"],mmmm:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],mmm:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dddd:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],ddd:["周日","周一","周二","周三","周四","周五","周六"]},"zh_CN"),ae({group:",",nan:"非數值",ampm:["上午","下午"],mmmm:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],mmm:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dddd:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],ddd:["週日","週一","週二","週三","週四","週五","週六"]},"zh_TW"),ae({group:",",ampm:["午前","午後"],mmmm:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],mmm:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dddd:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],ddd:["日","月","火","水","木","金","土"]},"ja"),ae({group:",",ampm:["오전","오후"],mmmm:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],mmm:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dddd:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],ddd:["일","월","화","수","목","금","토"]},"ko"),ae({group:",",ampm:["ก่อนเที่ยง","หลังเที่ยง"],mmmm:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],mmm:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dddd:["วันอาทิตย์","วันจันทร์","วันอังคาร","วันพุธ","วันพฤหัสบดี","วันศุกร์","วันเสาร์"],ddd:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."]},"th"),ae({decimal:",",ampm:["dop.","odp."],mmmm:["ledna","února","března","dubna","května","června","července","srpna","září","října","listopadu","prosince"],mmm:["led","úno","bře","dub","kvě","čvn","čvc","srp","zář","říj","lis","pro"],dddd:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],ddd:["ne","po","út","st","čt","pá","so"]},"cs"),ae({group:".",decimal:",",mmmm:["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"],mmm:["jan.","feb.","mar.","apr.","maj","jun.","jul.","aug.","sep.","okt.","nov.","dec."],dddd:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],ddd:["søn.","man.","tir.","ons.","tor.","fre.","lør."]},"da"),ae({group:".",decimal:",",ampm:["a.m.","p.m."],mmmm:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],mmm:["jan.","feb.","mrt.","apr.","mei","jun.","jul.","aug.","sep.","okt.","nov.","dec."],dddd:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],ddd:["zo","ma","di","wo","do","vr","za"]},"nl"),ae({group:","},"en"),ae({decimal:",",nan:"epäluku",ampm:["ap.","ip."],mmmm:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesäkuuta","heinäkuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"],mmm:["tammik.","helmik.","maalisk.","huhtik.","toukok.","kesäk.","heinäk.","elok.","syysk.","lokak.","marrask.","jouluk."],dddd:["sunnuntaina","maanantaina","tiistaina","keskiviikkona","torstaina","perjantaina","lauantaina"],ddd:["su","ma","ti","ke","to","pe","la"]},"fi"),ae({group:" ",decimal:",",mmmm:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],mmm:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dddd:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],ddd:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."]},"fr"),ae({group:".",decimal:",",mmmm:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],mmm:["Jan.","Feb.","März","Apr.","Mai","Juni","Juli","Aug.","Sept.","Okt.","Nov.","Dez."],dddd:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],ddd:["So.","Mo.","Di.","Mi.","Do.","Fr.","Sa."]},"de"),ae({group:".",decimal:",",ampm:["π.μ.","μ.μ."],mmmm:["Ιανουαρίου","Φεβρουαρίου","Μαρτίου","Απριλίου","Μαΐου","Ιουνίου","Ιουλίου","Αυγούστου","Σεπτεμβρίου","Οκτωβρίου","Νοεμβρίου","Δεκεμβρίου"],mmm:["Ιαν","Φεβ","Μαρ","Απρ","Μαΐ","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dddd:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],ddd:["Κυρ","Δευ","Τρί","Τετ","Πέμ","Παρ","Σάβ"]},"el"),ae({decimal:",",ampm:["de.","du."],mmmm:["január","február","március","április","május","június","július","augusztus","szeptember","október","november","december"],mmm:["jan.","febr.","márc.","ápr.","máj.","jún.","júl.","aug.","szept.","okt.","nov.","dec."],dddd:["vasárnap","hétfő","kedd","szerda","csütörtök","péntek","szombat"],ddd:["V","H","K","Sze","Cs","P","Szo"]},"hu"),ae({group:".",decimal:",",ampm:["f.h.","e.h."],mmmm:["janúar","febrúar","mars","apríl","maí","júní","júlí","ágúst","september","október","nóvember","desember"],mmm:["jan.","feb.","mar.","apr.","maí","jún.","júl.","ágú.","sep.","okt.","nóv.","des."],dddd:["sunnudagur","mánudagur","þriðjudagur","miðvikudagur","fimmtudagur","föstudagur","laugardagur"],ddd:["sun.","mán.","þri.","mið.","fim.","fös.","lau."]},"is"),ae({group:".",decimal:",",mmmm:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"],mmm:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agu","Sep","Okt","Nov","Des"],dddd:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],ddd:["Min","Sen","Sel","Rab","Kam","Jum","Sab"]},"id"),ae({group:".",decimal:",",mmmm:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"],mmm:["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"],dddd:["domenica","lunedì","martedì","mercoledì","giovedì","venerdì","sabato"],ddd:["dom","lun","mar","mer","gio","ven","sab"]},"it"),ae({decimal:",",ampm:["a.m.","p.m."],mmmm:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],mmm:["jan.","feb.","mar.","apr.","mai","jun.","jul.","aug.","sep.","okt.","nov.","des."],dddd:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],ddd:["søn.","man.","tir.","ons.","tor.","fre.","lør."]},"nb"),ae({decimal:",",mmmm:["stycznia","lutego","marca","kwietnia","maja","czerwca","lipca","sierpnia","września","października","listopada","grudnia"],mmm:["sty","lut","mar","kwi","maj","cze","lip","sie","wrz","paź","lis","gru"],dddd:["niedziela","poniedziałek","wtorek","środa","czwartek","piątek","sobota"],ddd:["niedz.","pon.","wt.","śr.","czw.","pt.","sob."]},"pl"),ae({group:".",decimal:",",mmmm:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],mmm:["jan.","fev.","mar.","abr.","mai.","jun.","jul.","ago.","set.","out.","nov.","dez."],dddd:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"],ddd:["dom.","seg.","ter.","qua.","qui.","sex.","sáb."]},"pt"),ae({decimal:",",nan:"не число",mmmm:["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"],mmm:["янв.","февр.","мар.","апр.","мая","июн.","июл.","авг.","сент.","окт.","нояб.","дек."],dddd:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],ddd:["вс","пн","вт","ср","чт","пт","сб"]},"ru"),ae({decimal:",",mmmm:["januára","februára","marca","apríla","mája","júna","júla","augusta","septembra","októbra","novembra","decembra"],mmm:["jan","feb","mar","apr","máj","jún","júl","aug","sep","okt","nov","dec"],dddd:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],ddd:["ne","po","ut","st","št","pi","so"]},"sk"),ae({group:".",decimal:",",ampm:["a. m.","p. m."],mmmm:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],mmm:["ene.","feb.","mar.","abr.","may.","jun.","jul.","ago.","sept.","oct.","nov.","dic."],dddd:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],ddd:["dom.","lun.","mar.","mié.","jue.","vie.","sáb."]},"es"),ae({decimal:",",ampm:["fm","em"],mmmm:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"],mmm:["jan.","feb.","mars","apr.","maj","juni","juli","aug.","sep.","okt.","nov.","dec."],dddd:["söndag","måndag","tisdag","onsdag","torsdag","fredag","lördag"],ddd:["sön","mån","tis","ons","tors","fre","lör"]},"sv"),ae({group:".",decimal:",",ampm:["ÖÖ","ÖS"],mmmm:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],mmm:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dddd:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],ddd:["Paz","Pzt","Sal","Çar","Per","Cum","Cmt"]},"tr");const se={overflow:"######",dateErrorThrows:!1,dateErrorNumber:!0,dateSpanLarge:!0,leap1900:!0,nbsp:!1,throws:!0,invalid:"######",locale:"",ignoreTimezone:!1,grouping:[3,3],indexColors:!0};function ie(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if("number"!=typeof e)return e;if(e<0)return-ie(-e,t);if(t){const n=10**t||1;return ie(e*n,0)/n}return Math.round(e)}const oe=1e-13;function le(e){const t=e<0?-1:1,n=10**((arguments.length>1&&void 0!==arguments[1]?arguments[1]:2)||2),a=10**((arguments.length>2&&void 0!==arguments[2]?arguments[2]:2)||2);let r,s,i=Math.abs(e),o=0,l=0,u=0,d=1;if((e=i)%1==0)s=[e*t,1];else if(e<1e-19)s=[t,1e19];else if(e>1e19)s=[1e19*t,1];else{do{if(i=1/(i-Math.floor(i)),r=d,d=d*Math.floor(i)+o,o=r,l=u,u=Math.floor(e*d+.5),u>=n||d>=a)return[t*l,o]}while(Math.abs(e-u/d)>=oe&&i!==Math.floor(i));s=[t*u,d]}return s}const ue=Math.floor;function de(e){if((!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&e>=0){if(0===e)return[1900,1,0];if(60===e)return[1900,2,29];if(e<60)return[1900,e<32?1:2,(e-1)%31+1]}let t=e+68569+2415019;const n=ue(4*t/146097);t-=ue((146097*n+3)/4);const a=ue(4e3*(t+1)/1461001);t=t-ue(1461*a/4)+31;const r=ue(80*t/2447),s=t-ue(2447*r/80);t=ue(r/11);return[0|100*(n-49)+a+t,0|r+2-12*t,0|s]}function me(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const a=ue(e);return t===m?function(e){if(60===e)throw new Error("#VALUE!");if(e<=1)return[1317,8,29];if(e<60)return[1317,e<32?9:10,1+(e-2)%30];const t=10631/30,n=.1335;let a=e+466935;const r=ue(a/10631);a-=10631*r;const s=ue((a-n)/t);a-=ue(s*t+n);const i=ue((a+28.5001)/29.5);return 13===i?[30*r+s,12,30]:[30*r+s,i,a-ue(29.5001*i-29)]}(a):t===u?function(e){return de(e+1462)}(a):de(a,n)}const ce=Math.floor,pe=86400;function fe(e,t){let n=null;if(Array.isArray(e)){const[t,a,r,s,i,o]=e;n=Date.UTC(t,null==a?0:a-1,null!=r?r:1,s||0,i||0,o||0)}else if(e instanceof Date&&(n=1*e,!t||!t.ignoreTimezone)){const t=new Date;t.setUTCFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t.setUTCHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n=1*t}if(null!=n&&isFinite(n)){const e=n/864e5;return e-(e<=-25509?-25568:-25569)}return null}const he={};function ge(e,t){if(e){const n=e[0];t[n]=t[n]||{},ge(e.slice(1),t[n])}else t.$=!0}["d-F-y","d-F-Y","d-M-y","d-M-Y","F-d-y","F-d-Y","F-j-y","F-j-Y","j-F-y","j-F-Y","j-M-y","j-M-Y","M-d-y","M-d-Y","M-j-y","M-j-Y","m-d-y","m-d-Y","m-j-y","m-j-Y","n-d-y","n-d-Y","n-j-y","n-j-Y","y-F-d","y-F-j","y-M-d","y-M-j","Y-F-d","Y-F-j","Y-M-d","Y-m-d","Y-M-j","Y-m-j","Y-n-d","Y-n-j","j-F","j-M","d-F","d-M","n-d","n-j","n-Y","m-d","m-j","m-Y","M-Y","M-y","F-y","F-Y","Y-M","Y-n","Y-m","Y-F","Y-M"].forEach((e=>{ge(e,he),ge(e+" x",he),ge(e+" l",he),ge(e+" l x",he),ge("l "+e,he),ge("l "+e+" x",he),ge(e+" D",he),ge(e+" D x",he),ge("D "+e,he),ge("D "+e+" x",he)}));const ye={jan:1,feb:2,mar:3,apr:4,may:5,jun:6,jul:7,aug:8,sep:9,oct:10,nov:11,dec:12},be={january:1,february:2,march:3,april:4,june:6,july:7,august:8,september:9,october:10,november:11,december:12},_e={sunday:"l",monday:"l",tuesday:"l",wednesday:"l",thursday:"l",friday:"l",saturday:"l",sun:"D",mon:"D",tue:"D",wed:"D",thu:"D",fri:"D",sat:"D"},ve=(new Date).getUTCFullYear();function Me(e){const t=new RegExp("^([\\s+%"+K.join("")+"(-]*)(((?:(?:\\d[\\d,]*)(?:\\.\\d*)?|(?:\\.\\d+)))([eE][+-]?\\d+)?)([\\s%"+K.join("")+")]*)$").exec(e);if(t){const[,e,n,a,r,s]=t;let i=1,o="",l=!1,u=!1,d=!1,m=!1,c=!1,p=null,f=!1,h=parseFloat(n.replace(/,/g,""));if(!isFinite(h))return null;for(let t=0;t<e.length;t++){const n=e[t];if("-"===n){if(l||u)return null;l=!0,i=-1}else if(Z.test(n)){if(c)return null;c=!0,p=n}else if("("===n){if(u||l)return null;u=!0,i=-1}else if("%"===n){if(m)return null;m=!0}}for(let e=0;e<s.length;e++){const t=s[e];if(Z.test(t)){if(c)return null;c=!0,p=t,f=!0}else if(")"===t){if(d||!u)return null;d=!0}else if("%"===t){if(m)return null;m=!0}}if(r){if(m||c)return null;o="0.00E+00"}else if(m){if(c)return null;o=a.includes(".")?"0.00%":"0%",h*=.01}else if(c){const e=a.includes(".")?"#,##0.00":"#,##0";o=f?e+p:p+e}else a.includes(",")&&(o=a.includes(".")?"#,##0.00":"#,##0");const g={v:h*i};return o&&(g.z=o),g}return null}const je=(e,t,n)=>{const a=n.path||"",r=Object.keys(t);for(let s=0;s<r.length;s++){let i;const o=r[s];if(t[o]){if("$"===o||"€"===o)e||(i=n);else if("-"===o){const r=/^(\s*([./-]|,\s)\s*|\s+)/.exec(e);if(r){const s="-"===r[1]||"/"===r[1]||"."===r[1]?r[1]:" ";if(!n.sep||n.sep===s){const l=r[0].replace(/\s+/g," ");i=je(e.slice(r[0].length),t[o],{...n,sep:s,path:a+l})}}}else if(" "===o){const r=/^[,.]?\s+/.exec(e);if(r){const s=r[0].replace(/\s+/g," ");i=je(e.slice(r[0].length),t[o],{...n,path:a+s})}}else if("j"===o||"d"===o){const r=/^(0?[1-9]|1\d|2\d|3[01])\b/.exec(e);r&&(i=je(e.slice(r[0].length),t[o],{...n,day:r[0],path:a+o}))}else if("n"===o||"m"===o){const r=/^(0?[1-9]|1[012])\b/.exec(e);r&&(i=je(e.slice(r[0].length),t[o],{...n,month:+r[0],_mon:r[0],path:a+o}))}else if("F"===o||"M"===o){const r=/^([a-z]{3,9})\b/i.exec(e),s=r&&("F"===o?be:ye)[r[0].toLowerCase()];s&&(i=je(e.slice(r[0].length),t[o],{...n,month:s,_mon:r[0],path:a+o}))}else if("l"===o||"D"===o){const r=/^([a-z]{3,9})\b/i.exec(e);(r&&_e[r[0].toLowerCase()])===o&&(i=je(e.slice(r[0].length),t[o],{...n,path:a+o}))}else if("y"===o){const r=/^\d\d\b/.exec(e);if(r){const s=+r[0]>=30?+r[0]+1900:+r[0]+2e3;i=je(e.slice(r[0].length),t[o],{...n,year:s,path:a+o})}}else if("Y"===o){const r=/^\d\d\d\d\b/.exec(e);r&&(i=je(e.slice(r[0].length),t[o],{...n,year:+r[0],path:a+o}))}else{if("x"!==o)throw new Error('Unknown date token "'.concat(o,'"'));{const r=xe(e);r&&(i=je("",t[o],{...n,time:r.v,tf:r.z,path:a+o}))}}if(i)return i}}};function ke(e){const t=je(e.trim(),he,{path:""});if(t){var n;if("."===t.sep&&3===t.path.length)return null;const e=+(null!==(n=t.year)&&void 0!==n?n:ve);if(t.day||(t.day=1),!function(e,t,n){if(n<1)return!1;if(t<1||t>12)return!1;if(2===t){if(n>(e%4==0&&e%100!=0||e%400==0||1900===e?29:28))return!1}else if((4===t||6===t||9===t||11===t)&&n>30||(1===t||3===t||5===t||7===t||8===t||10===t||12===t)&&n>31)return!1;return!0}(e,t.month,t.day))return null;let a=-1/0;if(e<1900)return null;e<=1900&&t.month<=2?a=25568:e<1e4&&(a=25569);const r=Date.UTC(e,t.month-1,t.day)/864e5+a+(t.time||0);if(r>=0&&r<=2958465){const e="0"===t._mon[0]||"0"===t.day[0]||2===t._mon.length&&2===t.day.length;return{v:r,z:t.path.replace(/[jdlDnmMFyYx-]/g,(n=>"j"===n||"d"===n?e?"dd":"d":"D"===n?"ddd":"l"===n?"dddd":"n"===n||"m"===n?e?"mm":"m":"M"===n?"mmm":"F"===n?"mmmm":"y"===n?"yy":"x"===n?t.tf||"":"Y"===n?"yyyy":n))}}}return null}function xe(e){const t=/^\s*([10]?\d|2[0-4])(?::([0-5]\d|\d))?(?::([0-5]\d|\d))?(\.\d{1,10})?(?:\s*([AP])M?)?\s*$/i.exec(e);if(t){const[,e,n,a,r,s]=t;if(r&&!a)return null;if(!s&&!n&&!a)return null;let i=1*(e||0);if(s){if(i>=13)return null;"p"!==s[0]&&"P"!==s[0]||(i+=12)}return{v:(60*i*60+60*(1*(n||0))+1*(a||0)+1*(r||0))/86400,z:(2===e.length?"hh":"h")+":mm"+(a?":ss":"")+(s?" AM/PM":"")}}return null}function Fe(e){return/^\s*true\s*$/i.test(e)?{v:!0}:/^\s*false\s*$/i.test(e)?{v:!1}:null}function ze(e,t,n){return t[n+"_max"]=e.length,t[n+"_min"]=e.replace(/#/g,"").length,t}function we(e,t){"string"==typeof e?t.push({type:"string",value:e}):t.push(e)}function Se(e,t){const n=e&&e.type;return n===p||n===f||n===h||n===w&&"den"===t}function Ae(u){const p=[],h={scale:1,percent:!1,text:!1,date:0,date_eval:!1,date_system:d,sec_decimals:0,general:!1,clock:24,int_pattern:[],frac_pattern:[],man_pattern:[],den_pattern:[],num_pattern:[],tokens:p};let O="int",$=null;const K=[];let Z,W=!1,q=-1,V=!1,Q="",X=!1;for(;++q<u.length&&!V;){var te;const se=u[q],ie=se.type||A;if(Q+=se.raw,ie===c)h.general=!0,we(se,p);else if(Se(se,O)){var ne;const e=h[O+"_pattern"];Se(Z,O)||(null===(ne=Z)||void 0===ne?void 0:ne.type)===y?(e.push((e.pop()||"")+se.value),$.num+=se.value):(e.push(se.value),$={type:O,num:se.value},we($,p))}else if(ie===B)"("===se.value&&(h.parens=!0),we(se.value,p);else if(ie===w)we(se.value,p);else if(ie===g)if(X=!0,h[O+"_pattern"].length){if(!$)throw new SyntaxError("Format pattern is missing a numerator");h.fractions=!0,h.num_pattern.push(h[O+"_pattern"].pop()),$.type="num",O="den",we({type:"div"},p)}else we(se.value,p);else if(ie===_)we(",",p);else if(ie===b)h.scale=.001**se.raw.length;else if(ie===y){if("int"===O&&(h.grouping=!0),"den"===O)throw new SyntaxError("Cannot group denominator digits")}else if(ie===F)we(se,p);else{if(ie===v){V=!0;break}if(ie===M)h.text=!0,we(se,p);else if(ie===j||ie===k)we(se,p);else if(ie===C){const e=se.value.toLowerCase(),t=e[0],n={type:"",size:0,date:1,pad:e.length};"h"===t?(n.size=a,n.type="hour-elap"):"m"===t?(n.size=r,n.type="min-elap"):(n.size=s,n.type="sec-elap"),h.date=h.date|n.size,K.push(n),we(n,p)}else if(h.date&&ie===x&&(null===(te=u[q+1])||void 0===te?void 0:te.type)===f){var ae,re;let e=1;q++;let t="0";(null===(ae=u[q+1])||void 0===ae?void 0:ae.type)===f&&(t+="0",e=2,q++),(null===(re=u[q+1])||void 0===re?void 0:re.type)===f&&(t+="0",e=3,q++),Q+=t;const n=[s,i,o,l][e];h.date=h.date|n,h.date_eval=!0,h.sec_decimals=Math.max(h.sec_decimals,e),we({type:"subsec",size:n,decimals:e,date:1},p)}else if(ie===S)W||("B2"===se.value||"b2"===se.value?h.date_system=m:h.date_system=d);else if(ie===E){const i={type:"",size:0,date:1},o=se.value.toLowerCase(),l=o[0];if("y"===o||"yy"===o)i.size=e,i.type="year-short";else if("y"===l||"e"===l)i.size=e,i.type="year";else if("b"===o||"bb"===o)i.size=e,i.type="b-year-short";else if("b"===l)i.size=e,i.type="b-year";else if("d"===o||"dd"===o)i.size=n,i.type="day",i.pad=/dd/.test(o);else if("ddd"===o)i.size=n,i.type="weekday-short";else if("d"===l)i.size=n,i.type="weekday";else if("h"===l)i.size=a,i.type="hour",i.pad=/hh/i.test(o);else if("m"===l){3===o.length?(i.size=t,i.type="monthname-short"):5===o.length?(i.size=t,i.type="monthname-single"):o.length>=4&&(i.size=t,i.type="monthname");const e=K[K.length-1];!i.type&&e&&!e.used&&e.size&(a|s)&&(e.used=!0,i.size=r,i.type="min",i.pad=/mm/.test(o)),i.type||(i.size=t,i.type="month",i.pad=/mm/.test(o),i.indeterminate=!0)}else if("s"===l){i.size=s,i.type="sec",i.pad=/ss/.test(o);const e=K[K.length-1];e&&e.size&r?i.used=!0:e&&e.indeterminate&&(delete e.indeterminate,e.size=r,e.type="min",i.used=!0)}h.date=h.date|i.size,h.date_eval=!0,K.push(i),we(i,p)}else if(ie===P)h.clock=12,h.date=h.date|a,h.date_eval=!0,se.short="A/P"===se.value,we(se,p);else if(ie===L||ie===R||ie===H)we(se.value,p);else if(ie===D)h.condition=[se.value[0],parseFloat(se.value[1])];else if(ie===Y){const e=se.value.split("-"),t=e.length<2?"":e.slice(1).join("-"),n=e[0];n&&we(n,p);const a=ee(t);a&&(h.locale=a);const r=parseInt(t,16);if(isFinite(r)&&16711680&r){6===(r>>16&255)&&(h.date_system=m)}W=!0}else if(ie===T){let e,t=se.value.toLowerCase();(e=/^color\s*(\d+)$/i.exec(t))&&(t=parseInt(e[1],10)),h.color=t}else if(ie===z)h.scale=100,h.percent=!0,we("%",p);else if(ie===x)we(se,p),h.date||(h.dec_fractions=!0,O="frac");else if(ie===J)h.exponential=!0,h.exp_plus=se.value.includes("+"),O="man",we({type:"exp",plus:h.exp_plus},p);else if(ie===U)we(" ",p);else if(ie===G);else if(ie!==I&&ie!==N)throw ie===A?new SyntaxError("Illegal character: ".concat(Q)):new SyntaxError("Unknown token ".concat(ie," in ").concat(Q))}Z=se}if(h.tokensUsed=q,h.pattern=Q,/^((?:\[[^\]]+\])+)(;|$)/.test(h.pattern)&&!/^\[(?:h+|m+|s+)\]/.test(h.pattern)&&we({type:"text"},p),h.fractions&&h.dec_fractions||h.grouping&&!h.int_pattern.length||h.fractions&&h.exponential||h.fractions&&h.den_pattern.length*h.num_pattern.length==0||X&&!h.fractions&&!h.date||h.exponential&&(h.int_pattern.length||h.frac_pattern.length)*h.man_pattern.length==0)throw new SyntaxError("Invalid pattern: ".concat(Q));const se=h.int_pattern.join(""),ie=h.man_pattern.join(""),oe=h.frac_pattern.join("");ze(se,h,"int");let le=0;for(let e=0;e<se.length;e++){const t=se[se.length-1-e];/^[0-9?]/.test(t)&&(le=e+1)}h.int_min=le,ze(oe,h,"frac"),ze(ie,h,"man");let ue=h.num_pattern.join(""),de=h.den_pattern[0]||"";if(de.includes("?")||ue.includes("?")?(de=de.replace(/\d/g,"?"),de=de.replace(/#$/g,"?"),ze(ue,h,"num"),ze(de,h,"den"),ue=ue.replace(/#$/g,"?")):(ze(ue,h,"num"),ze(de,h,"den")),h.int_p=se,h.man_p=ie,h.num_p=ue,h.den_p=de,h.den_pattern.length&&(h.denominator=parseInt(h.den_pattern.join("").replace(/\D/g,""),10)),h.integer=!!se.length,!h.integer&&!h.exponential&&oe.length){const e=h.tokens.findIndex((e=>"point"===e.type));h.tokens.splice(e,0,{type:"int",value:"#"}),h.integer=!0,h.int_pattern=["#"],h.int_p="#"}if(h.fractions)for(let e=0;e<p.length-1;e++){const t=p[e];if("string"!==t.type&&"space"!==t.type)continue;const n=p[e+1].type;"num"===n?t.rule="num+int":"div"===n?t.rule="num":"den"===n&&(t.rule="den")}return h.grouping&&h.int_pattern.length>1&&(h.grouping=!1),h}const Ee={total:1,sign:0,period:0,int:1,frac:0};const Ce=(e,t)=>e.replace(/\./,t.decimal);function De(e,t,n,a){const r=0|n;if("string"==typeof n)e.push(n);else if(n===r)e.push(Math.abs(r));else{const t=Math.abs(n);let r=t?Math.floor(Math.log10(t)):0,s=t*10**-r;10===s&&(s=1,r++);const i=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Math.abs(e);if(!n)return Ee;const a=t&&e<0?1:0,r=Math.floor(n),s=Math.floor(Math.log10(n)+1);let i=0,o=0;if(r!==n){i=1;const e=String(ie(n*10**-s,15));let t=e.length,a=!0,r=0;for(;r<=e.length;){if("."===e[r]){t--;break}"0"===e[r]&&a?t--:a=!1,r++}o=t-s,o<0&&(o=0,i=0)}return{total:a+Math.max(s,1)+i+o,digits:Math.max(s,0)+o,sign:a,period:i,int:Math.max(s,1),frac:o}}(t),o=()=>{const t=Math.abs(r);let n;n=1===s?s:ie(s,5),e.push(Ce(n+"",a),a.exponent,r<0?a.negative:a.positive,t<10?"0":"",t)};if(r>=-4&&r<=-1){const n=t.toPrecision(10+r).replace(/\.?0+$/,"");e.push(Ce(n,a))}else if(10===r){const n=t.toFixed(10).slice(0,12).replace(/\.$/,"");e.push(Ce(n,a))}else if(Math.abs(r)<=9)if(i.total<=11){const n=ie(t,9).toFixed(i.frac);e.push(Ce(n,a))}else 9===r?e.push(Math.floor(t)):r>=0&&r<9?e.push(ie(t,9-r)):o();else i.total>=12?o():Math.floor(t)===t?e.push(Math.floor(t)):e.push(Ce(ie(t,9).toFixed(i.frac),a))}return e}function Ie(e){return"0"===e?"0":"?"===e?arguments.length>1&&void 0!==arguments[1]&&arguments[1]?" ":" ":""}const Ne=86400,Ye=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Math.floor(Math.log10(e));return t>1?Math.floor(n/t)*t:n},Te=(e,t,n)=>n?e<-694324||t>=35830291:e<0||t>=2958466;function Oe(e,t,n,a){var r,s;let u="",d="",c="",p="",f="",h="",g=0,y=0|e,b=0,_=0,v=1,M=0,j=0,k=0,x=0,F=0,z=0;const w=a||re;if(!t.text&&isFinite(t.scale)&&1!==t.scale&&(e=function(e){if(0===e)return e;const t=Math.ceil(Math.log10(e<0?-e:e)),n=10**(16-Math.floor(t));return isFinite(n)?Math.round(e*n)/n:0}(e*t.scale)),t.exponential){let n=Math.abs(e);if(n){const e=10**-Ye(n,t.int_max),a=ie(n*e,t.frac_max)/e;g=Ye(a,t.int_max)}e&&!t.integer&&g++,n*=10**-g,e=e<0?-n:n,u+=Math.abs(g)}if(t.integer){const n=Math.abs(ie(e,t.fractions?1:t.frac_max));h+=n<1?"":Math.floor(n)}const S=null!==(r=n.grouping[0])&&void 0!==r?r:3,A=null!==(s=n.grouping[1])&&void 0!==s?s:S;t.dec_fractions&&(f=String(ie(e,t.frac_max)).split(".")[1]||"");const E=!t.error&&(t.num_p.includes("0")||t.den_p.includes("0"));let C=E;if(t.fractions){C=E||!!(e%1);const n=Math.abs(t.integer?e%1:e);if(n)if(C=!0,t.denominator&&isFinite(t.denominator))p+=t.denominator,c+=ie(n*t.denominator),"0"===c&&(c="",p="",C=E);else{const e=le(n,1/0,t.den_max);c+=e[0],p+=e[1],t.integer&&"0"===c&&(c="",p="",C=E)}else e||t.integer||(C=!0,c="0",p="1");!t.integer||C||Math.trunc(e)||(h="0")}if(t.date){y=Math.trunc(e);const a=Ne*(e-y);if(b=Math.floor(a),z=a-b,Math.abs(z)<1e-6?z=0:z>.9999&&(z=0,b+=1,b===Ne&&(b=0,y+=1)),z){const e=t.date&l||t.date&o||t.date&i;(e===l&&z>.9995||e===o&&z>.995||e===i&&z>.95||!e&&z>=.5)&&(b++,z=0)}if(y||t.date_system){const a=me(e,t.date_system,n.leap1900);_=a[0],v=a[1],M=a[2]}if(b){const e=b<0?Ne+b:b;F=Math.floor(e)%60,x=Math.floor(e/60)%60,k=Math.floor(e/60/60)%60}if(j=(6+y)%7,t.date_eval&&Te(e,y+b/Ne,n.dateSpanLarge)){if(n.dateErrorThrows)throw new Error("Date out of bounds");if(n.dateErrorNumber){return De(e<0?[w.negative]:[],0,e,w).join("")}return n.overflow}}const D=Ie("?",n.nbsp);g<0?d="-":t.exp_plus&&(d="+");const I=[],N=(e,t,a,r)=>{const s=!r&&e.length>t.length?a.length+e.length-t.length:a.length;e.length<t.length&&(r+=e.length-t.length);for(let t=0;t<s;t++)I.push(e[t+r]||Ie(a[t],n.nbsp));return s};let Y=!1;const T={int:0,frac:0,man:0,num:0,den:0};for(let r=0,s=t.tokens.length;r<s;r++){const s=t.tokens[r],i=s.type,o=s.num?s.num.length:0;if("string"===i)s.rule?"num"===s.rule?C?I.push(s.value.replace(/ /g,D)):(t.num_min>0||t.den_min>0)&&I.push(s.value.replace(/./g,D)):"num+int"===s.rule?C&&h?I.push(s.value.replace(/ /g,D)):t.den_min>0&&(h||t.num_min)&&I.push(s.value.replace(/./g,D)):"den"===s.rule&&(C?I.push(s.value.replace(/ /g,D)):(t.den_min>0||t.den_min>0)&&I.push(s.value.replace(/./g,D))):I.push(s.value.replace(/ /g,D));else if("space"===i)"num+int"===s.rule?(C||t.num_min||t.den_min)&&(h||t.num_min)&&I.push(D):I.push(D);else if("error"===i)I.push(n.invalid);else if("point"===i)I.push(t.date?s.value:w.decimal);else if("general"===i)De(I,0,e,w);else if("exp"===i)I.push(w.exponent);else if("minus"===i)s.volatile&&t.date||s.volatile&&(e>=0||"number"!=typeof e)||(s.volatile&&!t.fractions&&(t.integer||t.dec_fractions)?(e<0&&h&&"0"!==h||f)&&I.push(w.negative):I.push(w.negative));else if("plus"===i)I.push(w.positive);else if("text"===i)I.push(e);else if("div"===i)C?I.push("/"):t.num_min>0||t.den_min>0?I.push(D):I.push(Ie("#",n.nbsp));else if("int"===i)if(1===t.int_pattern.length){const e=t.int_p;let a="";for(let r=Math.max(t.int_min,h.length);r>0;r--){const s=h.charAt(h.length-r),i=s?"":e.charAt(e.length-r)||e[0];let o="";if(t.grouping){const e=r-1-S;e>=0&&!(e%A)&&(o=s||"0"===i?w.group:Ie("?",n.nbsp))}a+=(s||Ie(i,n.nbsp))+o}I.push(a)}else T.int+=N(h,t.int_p,s.num,T.int);else if("frac"===i){const e=T.frac;for(let t=0;t<o;t++)I.push(f[t+e]||Ie(s.num[t],n.nbsp));T.frac+=o}else if("man"===i)T[i]||T.man||I.push(d),T.man+=N(u,t.man_p,s.num,T.man);else if("num"===i)T.num+=N(c,t.num_p,s.num,T.num);else if("den"===i){const e=T.den;for(let t=0;t<o;t++){let a=p[t+e];if(!a){const e=s.num[t];"123456789".includes(e)||Y&&"0"===e?(Y=!0,a=n.nbsp?" ":" "):a=Y||t!==o-1||"0"!==e||p?Ie(e,n.nbsp):"1"}I.push(a)}T.den+=o}else if("year"===i)_<0&&I.push(w.negative),I.push(String(Math.abs(_)).padStart(4,"0"));else if("year-short"===i){const e=_%100;I.push(e<10?"0":"",e)}else if("month"===i)I.push(s.pad&&v<10?"0":"",v);else if("monthname-single"===i)t.date_system===m?I.push(w.mmmm6[v-1].charAt(0)):I.push(w.mmmm[v-1].charAt(0));else if("monthname-short"===i)t.date_system===m?I.push(w.mmm6[v-1]):I.push(w.mmm[v-1]);else if("monthname"===i)t.date_system===m?I.push(w.mmmm6[v-1]):I.push(w.mmmm[v-1]);else if("weekday-short"===s.type)I.push(w.ddd[j]);else if("weekday"===i)I.push(w.dddd[j]);else if("day"===i)I.push(s.pad&&M<10?"0":"",M);else if("hour"===i){const e=k%t.clock||(t.clock<24?t.clock:0);I.push(s.pad&&e<10?"0":"",e)}else if("min"===i)I.push(s.pad&&x<10?"0":"",x);else if("sec"===i)I.push(s.pad&&F<10?"0":"",F);else if("subsec"===i){I.push(w.decimal);const e=z.toFixed(t.sec_decimals);I.push(e.slice(2,2+s.decimals))}else if("ampm"===i){const e=k<12?0:1;s.short&&!a?I.push("AP"[e]):I.push(w.ampm[e])}else if("hour-elap"===i){e<0&&I.push(w.negative);const t=24*y+Math.floor(Math.abs(b)/3600);I.push(String(Math.abs(t)).padStart(s.pad,"0"))}else if("min-elap"===i){e<0&&I.push(w.negative);const t=1440*y+Math.floor(Math.abs(b)/60);I.push(String(Math.abs(t)).padStart(s.pad,"0"))}else if("sec-elap"===i){e<0&&I.push(w.negative);const t=y*Ne+Math.abs(b);I.push(String(Math.abs(t)).padStart(s.pad,"0"))}else if("b-year"===i)I.push(_+543);else if("b-year-short"===i){const e=(_+543)%100;I.push(e<10?"0":"",e)}}return I.join("")}const Pe=Ae([{type:M,value:"@",raw:"@"}]);function Re(e,t){for(let n=0;n<3;n++){const a=t[n];if(a){let t;if(a.condition){const n=a.condition[0],r=a.condition[1];"="===n?t=e===r:">"===n?t=e>r:"<"===n?t=e<r:">="===n?t=e>=r:"<="===n?t=e<=r:"<>"===n&&(t=e!==r)}else t=!0;if(t)return a}}}function Le(e){return!!(e[0]&&e[0].percent||e[1]&&e[1].percent||e[2]&&e[2].percent||e[3]&&e[3].percent)}function Ue(e){return!!(e[0]&&e[0].date||e[1]&&e[1].date||e[2]&&e[2].date||e[3]&&e[3].date)}function Je(e){const[t,n,a,r]=e;return!(t&&!t.generated||n&&!n.generated||a&&!a.generated||!r||!r.text||r.generated)}const Ge={text:15,datetime:10.8,date:10.8,time:10.8,percent:10.6,currency:10.4,grouped:10.2,scientific:6,number:4,fraction:2,general:0,error:0},Be=[["DMY",1],["DM",2],["MY",3],["MDY",4],["MD",5],["hmsa",6],["hma",7],["hms",8],["hm",9]];const He=[[c,/^General/i,0],[p,/^#/,0],[f,/^0/,0],[h,/^\?/,0],[g,/^\//,0],[v,/^;/,0],[M,/^@/,0],[j,/^\+/,0],[k,/^-/,0],[x,/^\./,0],[F,/^ /,0],[z,/^%/,0],[w,/^[1-9]/,0],[S,/^(?:B1|B2)/i,0],[A,/^B$/,0],[E,/^(?:([hHmMsSyYbBdDegG])\1*)/,0],[C,/^(?:\[(h+|m+|s+)\])/i,1],[D,/^\[(<[=>]?|>=?|=)\s*(-?[.\d]+)\]/,[1,2]],[I,/^\[(DBNum[0-4]?\d)\]/i,1],[N,/^\[(NatNum[0-4]?\d)\]/i,1],[Y,/^\[\$([^\]]+)\]/,1],[T,/^\[(black|blue|cyan|green|magenta|red|white|yellow|color\s*\d+)\]/i,1],[O,/^\[([^\]]+)\]/,1],[P,/^(?:AM\/PM|am\/pm|A\/P)/,0],[R,/^\\(.)/,1],[L,/^"([^"]*?)"/,1],[U,/^_(\\.|.)/,1],[J,/^[Ee]([+-])/,1],[G,/^\*(\\.|.)/,1],[B,/^[()]/,0],[A,/^[EÈÉÊËèéêëĒēĔĕĖėĘęĚěȄȅȆȇȨȩNnÑñŃńŅņŇňǸǹ["*/\\_]/,0],[H,/^./,0]],$e=e=>{const t=(e||"\0").charCodeAt(0);return 63===t||35===t||t>=48&&t<=57};function Ke(e){let t=0;const n=[],a=[];for(;t<e.length;){const r=e.slice(t);let s=0;const i=/^(,+)(.)?/.exec(r);if(i){const r=i[1];s=r.length;const o=e[t-1]||"";let l=!1,u=!1;$e(o)?(l=!0,u=!0):"."===o&&(u=!0);const d=i[2]||"";if(!l||d&&";"!==d||(l=!1),u&&$e(d)&&(u=!1),l&&!u)n.push({type:y,value:",",raw:r});else if(!l&&u)n.push({type:b,value:",",raw:r});else if(l&&u){const e={type:b,value:",",raw:r};n.push(e),a.push(e)}else n.push({type:_,value:",",raw:r})}else{let e;for(const[t,a,i]of He){const o=a.exec(r);if(o){e={type:t,value:Array.isArray(i)?i.map((e=>o[e])):o[i||0],raw:o[0]},n.push(e),s=o[0].length;break}}a.length&&$e(e.raw)&&(a.forEach((e=>e.type=y)),a.length=0)}if(!s){const e=r[0];s=1,n.push({type:H,value:e,raw:e})}t+=s}return n}const Ze=e=>{const t=e.condition;t&&t[1]<0&&("<"===t[0]||"<="===t[0]||"="===t[0])||e.tokens.unshift({type:"minus",volatile:!0})},We=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n={};for(const t in e)Array.isArray(e[t])?n[t]=[...e[t]]:n[t]=e[t];return t&&n.tokens.unshift(t),n.generated=!0,n};const qe=Object.create({});function Ve(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e||(e="General");let n=qe[e];if(!n)try{n=function(e){const t=[];let n,a=!1,r=null,s=0,i=!1,o=0,l=0,u=Ke(e);do{var d;if(i=Ae(u),(i.date||i.general)&&(i.int_pattern.length||i.frac_pattern.length||1!==i.scale||i.text))throw new Error("Illegal format");if(i.condition&&(l++,a=!0),i.text){if(r)throw new Error("Unexpected partition");r=i}i.locale&&(n=ee(i.locale)),t.push(i),s="break"===(null===(d=u[i.tokensUsed])||void 0===d?void 0:d.type)?1:0,u=u.slice(i.tokensUsed+s),o++}while(s&&o<4&&l<3);if(s)throw new Error("Unexpected partition");if(l>2)throw new Error("Unexpected condition");const m=t[3];if(m&&(m.int_pattern.length||m.frac_pattern.length||m.date))throw new Error("Unexpected partition");if(a){const e=t.length;if(1===e&&(t[1]=Ae(Ke("General")),t[1].generated=!0),e<3){const e=t[0],n=t[1];if(Ze(e),n.condition)Ze(n);else{const t=e.condition;("="===t[0]||t[1]>=0&&(">"===t[0]||">="===t[0]))&&n.tokens.unshift({type:"minus",volatile:!0})}}else t.forEach(Ze)}else{if(t.length<4&&r)for(let e=0,n=t.length;e<n;e++)t[e]===r&&t.splice(e,1);if(t.length<1&&r&&(t[0]=Ae(Ke("General")),t[0].generated=!0),t.length<2){const e={type:"minus",volatile:!0};t.push(We(t[0],e))}if(t.length<3&&t.push(We(t[0])),t.length<4)if(r)t.push(r);else{const e=Ae(Ke("@"));e.generated=!0,t.push(e)}t[0].condition=[">",0],t[1].condition=["<",0],t[2].condition=null}return{pattern:e,partitions:t,locale:n}}(e),qe[e]=n}catch(a){if(t)throw a;const r={tokens:[{type:"error"}],error:a.message};n={pattern:e,partitions:[r,r,r,r],error:a.message,locale:null}}return n}const Qe=Object.freeze({AMPM:P,BREAK:v,CALENDAR:S,CHAR:H,COLOR:T,COMMA:_,CONDITION:D,DATETIME:E,DBNUM:I,DIGIT:w,DURATION:C,ERROR:A,ESCAPED:R,EXP:J,FILL:G,GENERAL:c,GROUP:y,HASH:p,LOCALE:Y,MINUS:k,MODIFIER:O,NATNUM:N,PAREN:B,PERCENT:z,PLUS:j,POINT:x,QMARK:h,SCALE:b,SKIP:U,SLASH:g,SPACE:F,STRING:L,TEXT:M,ZERO:f});exports.addLocale=ae,exports.dateFromSerial=function(e,t){let n=0|e;const a=pe*(e-n);let r=ce(a);a-r>.9999&&(r+=1,r===pe&&(r=0,n+=1));const s=r<0?pe+r:r,[i,o,l]=me(e,0,t&&t.leap1900);return[i,o,l,ce(s/60/60)%60,ce(s/60)%60,ce(s)%60]},exports.dateToSerial=fe,exports.dec2frac=le,exports.format=function(e,t){var n;let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=Object.assign({},se,a),s=Ve(e,r.throws);return function(e,t,n){const a=t.partitions,r=te(t.locale||n.locale),s=a[3]?a[3]:Pe;if("boolean"==typeof e&&(e=e?"TRUE":"FALSE"),null==e)return"";if("number"!=typeof e)return Oe(e,s,n,r);if(!isFinite(e)){const t=r||re;return isNaN(e)?t.nan:(e<0?t.negative:"")+t.infinity}const i=Re(e,a);return i?Oe(e,i,n,r):n.overflow}(null!==(n=fe(t,r))&&void 0!==n?n:t,s,r)},exports.formatColor=function(e,t,n){var a;const r=Object.assign({},se,n),s=Ve(e,r.throws);return function(e,t,n){const a=t.partitions;let r=a[3],s=null;return"number"==typeof e&&isFinite(e)&&(r=Re(e,a)),r&&r.color&&(s=r.color),s&&"number"==typeof s&&n.indexColors&&(s=$[s-1]||"#000"),s}(null!==(a=fe(t,r))&&void 0!==a?a:t,s,r)},exports.getFormatDateInfo=function(i){const o=Ve(i,!1);return o.dateInfo||(o.dateInfo=function(i){const[o]=i;return{year:!!(o.date&e),month:!!(o.date&t),day:!!(o.date&n),hours:!!(o.date&a),minutes:!!(o.date&r),seconds:!!(o.date&s),clockType:12===o.clock?12:24}}(o.partitions)),o.dateInfo},exports.getFormatInfo=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=Ve(e,!1);return n.info||(n.info=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const[a,r]=e,s=a.frac_max,i={type:"general",isDate:Ue(e),isText:Je(e),isPercent:Le(e),maxDecimals:a.general?9:s,scale:null!==(t=a.scale)&&void 0!==t?t:1,color:0,parentheses:0,grouped:a.grouping?1:0},o=!i.isDate&&!i.isText&&!a.error&&a.tokens.some((e=>"string"===e.type&&(n?e.value===n:Z.test(e.value))));let l="G",u=s>=0?Math.min(15,s):"",d="",m="";if(r&&r.color&&(m="-",i.color=1),a.parens&&(d="()",i.parentheses=1),o)l="C",i.type="currency";else if(a.error)i.type="error",i.maxDecimals=0;else if(i.isDate){let e=0,t=0,n="";a.tokens.forEach((a=>{const r=a.type;/^(b-)?year/.test(r)?(n+="Y",t++):r.startsWith("month")?(n+="M",t++):/^(week)?day/.test(r)?(n+="D",t++):"hour"!==r&&"min"!==r&&"sec"!==r&&"ampm"!==r||(n+=r[0],e++)})),i.type="date",t&&e?i.type="datetime":!t&&e&&(i.type="time");const r=Be.find((e=>n.startsWith(e[0])));l=r?"D":"G",u=r?r[1]:""}else i.isText?(l="G",i.type="text",u="",i.maxDecimals=0):a.general?(l="G",i.type="general",u=""):a.fractions?(l="G",i.type="fraction",u=""):a.exponential?(l="S",i.type="scientific"):i.isPercent?(l="P",i.type="percent"):a.grouping?(l=",",i.type="grouped"):(a.int_max||s)&&(l="F",i.type="number");return i.code=l+u+m+d,i.level=Ge[i.type],Object.freeze(i)}(n.partitions,null==t?void 0:t.currency)),n.info},exports.getLocale=te,exports.isDateFormat=function(e){return Ue(Ve(e,!1).partitions)},exports.isPercentFormat=function(e){return Le(Ve(e,!1).partitions)},exports.isTextFormat=function(e){return Je(Ve(e,!1).partitions)},exports.isValidFormat=function(e){try{return Ve(e,!0),!0}catch(e){return!1}},exports.parseBool=Fe,exports.parseDate=ke,exports.parseLocale=X,exports.parseNumber=Me,exports.parseTime=xe,exports.parseValue=function(e){var t,n,a;return null!==(t=null!==(n=null!==(a=Me(e))&&void 0!==a?a:ke(e))&&void 0!==n?n:xe(e))&&void 0!==t?t:Fe(e)},exports.round=ie,exports.tokenTypes=Qe,exports.tokenize=Ke;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
