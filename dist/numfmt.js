"use strict";const e=2,t=4,n=8,a=16,r=32,i=64,s=128,m=256,o=512,d=-1,l=1,u=6,p="general",c="hash",f="zero",h="qmark",g="slash",b="group",y="scale",v="comma",_="break",j="text",k="plus",M="minus",x="point",F="space",w="percent",z="digit",C="calendar",S="error",A="datetime",I="duration",E="condition",D="dbnum",T="natnum",N="locale",Y="color",O="modifier",P="ampm",R="escaped",L="string",U="skip",H="exp",B="fill",G="paren",J="char",$=["#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#000","#FFF","#F00","#0F0","#00F","#FF0","#F0F","#0FF","#800","#080","#008","#880","#808","#088","#CCC","#888","#99F","#936","#FFC","#CFF","#606","#F88","#06C","#CCF","#008","#F0F","#FF0","#0FF","#808","#800","#088","#00F","#0CF","#CFF","#CFC","#FF9","#9CF","#F9C","#C9F","#FC9","#36F","#3CC","#9C0","#FC0"],V=["¤","$","£","¥","֏","؋","৳","฿","៛","₡","₦","₩","₪","₫","€","₭","₮","₱","₲","₴","₸","₹","₺","₼","₽","₾","₿"],K=new RegExp("["+V.join("")+"]");var Z=Object.freeze({1078:"af",1052:"sq",1118:"am",5121:"ar_DZ",15361:"ar_BH",3073:"ar_EG",2049:"ar_IQ",11265:"ar_JO",13313:"ar_KW",12289:"ar_LB",4097:"ar_LY",6145:"ar_MA",8193:"ar_OM",16385:"ar_QA",1025:"ar_SA",10241:"ar_SY",7169:"ar_TN",14337:"ar_AE",9217:"ar_YE",1067:"hy",1101:"as",2092:"az_AZ",1068:"az_AZ",1069:"eu",1059:"be",2117:"bn",1093:"bn_IN",5146:"bs",1026:"bg",1109:"my",1027:"ca",2052:"zh_CN",3076:"zh_HK",5124:"zh_MO",4100:"zh_SG",1028:"zh_TW",1050:"hr",1029:"cs",1030:"da",1125:"dv",2067:"nl_BE",1043:"nl_NL",1126:"bin",3081:"en_AU",10249:"en_BZ",4105:"en_CA",9225:"en_CB",2057:"en_GB",16393:"en_IN",6153:"en_IE",8201:"en_JM",5129:"en_NZ",13321:"en_PH",7177:"en_ZA",11273:"en_TT",1033:"en_US",12297:"en_ZW",1061:"et",1071:"mk",1080:"fo",1065:"fa",1124:"fil",1035:"fi",2060:"fr_BE",11276:"fr_CM",3084:"fr_CA",9228:"fr_CG",12300:"fr_CI",1036:"fr_FR",5132:"fr_LU",13324:"fr_ML",6156:"fr_MC",14348:"fr_MA",10252:"fr_SN",4108:"fr_CH",7180:"fr",1122:"fy_NL",2108:"gd_IE",1084:"gd",1110:"gl",1079:"ka",3079:"de_AT",1031:"de_DE",5127:"de_LI",4103:"de_LU",2055:"de_CH",1032:"el",1140:"gn",1095:"gu",1279:"en",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig_NG",1057:"id",1040:"it_IT",2064:"it_CH",1041:"ja",1099:"kn",1120:"ks",1087:"kk",1107:"km",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1142:"la",1062:"lv",1063:"lt",2110:"ms_BN",1086:"ms_MY",1100:"ml",1082:"mt",1112:"mni",1153:"mi",1102:"mr",1104:"mn",2128:"mn",1121:"ne",1044:"no_NO",2068:"no_NO",1096:"or",1045:"pl",1046:"pt_BR",2070:"pt_PT",1094:"pa",1047:"rm",2072:"ro_MO",1048:"ro_RO",1049:"ru",2073:"ru_MO",1083:"se",1103:"sa",3098:"sr_SP",2074:"sr_SP",1072:"st",1074:"tn",1113:"sd",1115:"si",1051:"sk",1060:"sl",1143:"so",1070:"sb",11274:"es_AR",16394:"es_BO",13322:"es_CL",9226:"es_CO",5130:"es_CR",7178:"es_DO",12298:"es_EC",17418:"es_SV",4106:"es_GT",18442:"es_HN",2058:"es_MX",19466:"es_NI",6154:"es_PA",15370:"es_PY",10250:"es_PE",20490:"es_PR",1034:"es_ES",14346:"es_UY",8202:"es_VE",1089:"sw",2077:"sv_FI",1053:"sv_SE",1114:"syc",1064:"tg",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1073:"ts",1055:"tr",1090:"tk",1058:"uk",1056:"ur",2115:"uz_UZ",1091:"uz_UZ",1075:"ve",1066:"vi",1106:"cy",1076:"xh",1085:"yi",1077:"zu"});const W=/^([a-z\d]+)(?:[_-]([a-z\d]+))?(?:\.([a-z\d]+))?(?:@([a-z\d]+))?$/i,X={},q=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.replace(/~/g,t).split(";")},Q=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e.mmm||(e.mmm=t<1?e.mmmm.concat():e.mmmm.map((e=>{const n=e.slice(0,t%10);return n+(t<10||e===n?"":".")}))),e.ddd||(e.ddd=n<1?e.dddd.concat():e.dddd.map((e=>{const t=e.slice(0,n%10);return t+(n<10||e===t?"":".")}))),!e.mmm6&&e.mmmm6&&(e.mmm6=e.mmmm6),e},ee={group:" ",decimal:".",positive:"+",negative:"-",percent:"%",exponent:"E",nan:"NaN",infinity:"∞",ampm:q("AM;PM"),mmmm6:q("Muharram;Safar;Rabiʻ I;Rabiʻ II;Jumada I;Jumada II;Rajab;Shaʻban;Ramadan;Shawwal;Dhuʻl-Qiʻdah;Dhuʻl-Hijjah"),mmm6:q("Muh.;Saf.;Rab. I;Rab. II;Jum. I;Jum. II;Raj.;Sha.;Ram.;Shaw.;Dhuʻl-Q.;Dhuʻl-H."),mmmm:q("January;February;March;April;May;June;July;August;September;October;November;December"),mmm:q("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec"),dddd:q("Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday"),ddd:q("Sun;Mon;Tue;Wed;Thu;Fri;Sat")};function te(e){const t=W.exec(e);if(!t)throw new SyntaxError("Malformed locale: ".concat(e));return{lang:t[1]+(t[2]?"_"+t[2]:""),language:t[1],territory:t[2]||""}}function ne(e){if("number"==typeof e)return Z[65535&e]||null;const t=parseInt(e,16);return isFinite(t)&&Z[65535&t]?Z[65535&t]||null:W.test(e)?e:null}function ae(e){const t=ne(e);let n=null;if(t){const e=te(t);n=X[e.lang]||X[e.language]||null}return n}function re(e){return Object.assign({},ee,e)}function ie(e,t){const n="object"==typeof t?t:te(t);return X[n.lang]=re(e),n.language===n.lang||X[n.language]||(X[n.language]=re(e)),X[n.lang]}const se=re({group:","});se.isDefault=!0,ie({group:",",ampm:q("上午;下午"),mmmm:q("一月;二月;三月;四月;五月;六月;七月;八月;九月;十月;十一月;十二月"),mmm:q("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:q("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:q("周日;周一;周二;周三;周四;周五;周六")},"zh_CN");const me={group:",",ampm:q("上午;下午"),mmmm:q("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),mmm:q("1月;2月;3月;4月;5月;6月;7月;8月;9月;10月;11月;12月"),dddd:q("~日;~一;~二;~三;~四;~五;~六","星期"),ddd:q("周日;周一;周二;周三;周四;周五;周六")};ie({...me,nan:"非數值",dddd:q("~日;~一;~二;~三;~四;~五;~六","星期")},"zh_TW"),ie({...me,dddd:q("~日;~一;~二;~三;~四;~五;~六","星期")},"zh_HK"),ie({...me,ampm:q("午前;午後"),dddd:q("日~;月~;火~;水~;木~;金~;土~","曜日"),ddd:q("日;月;火;水;木;金;土")},"ja"),ie({group:",",ampm:q("오전;오후"),mmmm:q("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),mmm:q("1월;2월;3월;4월;5월;6월;7월;8월;9월;10월;11월;12월"),dddd:q("일요일;월요일;화요일;수요일;목요일;금요일;토요일"),ddd:q("일;월;화;수;목;금;토")},"ko"),ie({group:",",ampm:q("ก่อนเที่ยง;หลังเที่ยง"),mmmm:q("มกร~;กุมภาพันธ์;มีน~;เมษายน;พฤษภ~;มิถุนายน;กรกฎ~;สิงห~;กันยายน;ตุล~;พฤศจิกายน;ธันว~","าคม"),mmm:q("ม.ค.;ก.พ.;มี.ค.;เม.ย.;พ.ค.;มิ.ย.;ก.ค.;ส.ค.;ก.ย.;ต.ค.;พ.ย.;ธ.ค."),dddd:q("วันอาทิตย์;วันจันทร์;วันอังคาร;วันพุธ;วันพฤหัสบดี;วันศุกร์;วันเสาร์"),ddd:q("อา.;จ.;อ.;พ.;พฤ.;ศ.;ส.")},"th"),ie(Q({decimal:",",ampm:q("dop.;odp."),mmmm:q("ledna;února;března;dubna;května;června;července;srpna;září;října;listopadu;prosince"),mmm:q("I;II;III;IV;V;VI;VII;VIII;IX;X;XI;XII"),dddd:q("neděle;pondělí;úterý;středa;čtvrtek;pátek;sobota")},-1,2),"cs"),ie(Q({group:".",decimal:",",mmmm:q("januar;februar;marts;april;maj;juni;juli;august;september;oktober;november;december"),dddd:q("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag")},13,13),"da"),ie(Q({group:".",decimal:",",ampm:q("a.m.;p.m."),mmmm:q("januari;februari;maart;april;mei;juni;juli;augustus;september;oktober;november;december"),mmm:q("jan.;feb.;mrt.;apr.;mei;jun.;jul.;aug.;sep.;okt.;nov.;dec."),dddd:q("zondag;maandag;dinsdag;woensdag;donderdag;vrijdag;zaterdag")},-1,2),"nl"),ie({group:","},"en"),ie({group:","},"en_AU"),ie({group:","},"en_CA"),ie({group:","},"en_GB"),ie({group:",",mmm:q("Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sept;Oct;Nov;Dec")},"en_IE"),ie(Q({decimal:",",nan:"epäluku",ampm:q("ap.;ip."),mmmm:q("tammi~;helmi~;maalis~;huhti~;touko~;kesä~;heinä~;elo~;syys~;loka~;marras~;joulu~","kuuta"),mmm:q("tammik.;helmik.;maalisk.;huhtik.;toukok.;kesäk.;heinäk.;elok.;syysk.;lokak.;marrask.;jouluk."),dddd:q("sunnun~;maanan~;tiis~;keskiviikkona;tors~;perjan~;lauan~","taina")},-1,2),"fi");const oe=Q({group:" ",decimal:",",mmmm:q("janvier;février;mars;avril;mai;juin;juillet;août;septembre;octobre;novembre;décembre"),mmm:q("janv.;févr.;mars;avr.;mai;juin;juil.;août;sept.;oct.;nov.;déc."),dddd:q("~manche;lun~;mar~;mercre~;jeu~;vendre~;same~","di")},-1,13);ie({...oe},"fr"),ie({...oe,mmm:q("janv.;févr.;mars;avr.;mai;juin;juill.;août;sept.;oct.;nov.;déc.")},"fr_CA"),ie({group:"'",decimal:".",...oe},"fr_CH");const de=Q({mmmm:q("Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember"),mmm:q("Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sept.;Okt.;Nov.;Dez."),dddd:q("Sonn~;Mon~;Diens~;Mittwoch;Donners~;Frei~;Sams~","tag")},-1,12);ie({group:".",decimal:",",...de},"de"),ie({group:"'",decimal:".",...de},"de_CH"),ie(Q({group:".",decimal:",",ampm:q("π.μ.;μ.μ."),mmmm:q("Ιανουαρ~;Φεβρουαρ~;Μαρτ~;Απριλ~;Μαΐου;Ιουν~;Ιουλ~;Αυγούστου;Σεπτεμβρ~;Οκτωβρ~;Νοεμβρ~;Δεκεμβρ~","ίου"),mmm:q("Ιαν;Φεβ;Μαρ;Απρ;Μαΐ;Ιουν;Ιουλ;Αυγ;Σεπ;Οκτ;Νοε;Δεκ"),dddd:q("Κυριακή;Δευτέρα;Τρίτη;Τετάρτη;Πέμπτη;Παρασκευή;Σάββατο")},-1,3),"el"),ie({decimal:",",ampm:q("de.;du."),mmmm:q("január;február;március;április;május;június;július;augusztus;szeptember;október;november;december"),mmm:q("jan.;febr.;márc.;ápr.;máj.;jún.;júl.;aug.;szept.;okt.;nov.;dec."),dddd:q("vasárnap;hétfő;kedd;szerda;csütörtök;péntek;szombat"),ddd:q("V;H;K;Sze;Cs;P;Szo")},"hu"),ie(Q({group:".",decimal:",",ampm:q("f.h.;e.h."),mmmm:q("janúar;febrúar;mars;apríl;maí;júní;júlí;ágúst;september;október;nóvember;desember"),dddd:q("sunnu~;mánu~;þriðju~;miðviku~;fimmtu~;föstu~;laugar~","dagur")},13,13),"is"),ie(Q({group:".",decimal:",",mmmm:q("Januari;Februari;Maret;April;Mei;Juni;Juli;Agustus;September;Oktober;November;Desember"),dddd:q("Minggu;Senin;Selasa;Rabu;Kamis;Jumat;Sabtu")},3,3),"id");const le=Q({mmmm:q("gennaio;febbraio;marzo;aprile;maggio;giugno;luglio;agosto;settembre;ottobre;novembre;dicembre"),dddd:q("domenica;lunedì;martedì;mercoledì;giovedì;venerdì;sabato")},3,3);ie({group:".",decimal:",",...le},"it"),ie({group:"'",decimal:".",...le},"it_CH");const ue={decimal:",",ampm:q("a.m.;p.m."),mmmm:q("januar;februar;mars;april;mai;juni;juli;august;september;oktober;november;desember"),mmm:q("jan.;feb.;mar.;apr.;mai;jun.;jul.;aug.;sep.;okt.;nov.;des."),dddd:q("søn~;man~;tirs~;ons~;tors~;fre~;lør~","dag")};ie(Q({...ue},-1,13),"nb"),ie(Q({...ue},-1,13),"no"),ie(Q({decimal:",",mmmm:q("stycznia;lutego;marca;kwietnia;maja;czerwca;lipca;sierpnia;września;października;listopada;grudnia"),dddd:q("niedziela;poniedziałek;wtorek;środa;czwartek;piątek;sobota"),ddd:q("niedz.;pon.;wt.;śr.;czw.;pt.;sob.")},3,-1),"pl");const pe={group:".",decimal:",",mmmm:q("janeiro;fevereiro;março;abril;maio;junho;julho;agosto;setembro;outubro;novembro;dezembro"),dddd:q("domingo;segunda-feira;terça-feira;quarta-feira;quinta-feira;sexta-feira;sábado")};ie(Q(pe,13,13),"pt"),ie(Q(pe,13,13),"pt_BR"),ie({decimal:",",nan:"не число",mmmm:q("января;февраля;марта;апреля;мая;июня;июля;августа;сентября;октября;ноября;декабря"),mmm:q("янв.;февр.;мар.;апр.;мая;июн.;июл.;авг.;сент.;окт.;нояб.;дек."),dddd:q("воскресенье;понедельник;вторник;среда;четверг;пятница;суббота"),ddd:q("вс;пн;вт;ср;чт;пт;сб"),mmmm6:q("рамадан;шавваль;зуль-каада;зуль-хиджжа;мухаррам;раби-уль-авваль;раби-уль-ахир;джумад-уль-авваль;джумад-уль-ахир;раджаб;шаабан;рамадан"),mmm6:q("рам.;шав.;зуль-к.;зуль-х.;мух.;раб. I;раб. II;джум. I;джум. II;радж.;шааб.;рам.")},"ru"),ie(Q({decimal:",",mmmm:q("januára;februára;marca;apríla;mája;júna;júla;augusta;septembra;októbra;novembra;decembra"),dddd:q("nedeľa;pondelok;utorok;streda;štvrtok;piatok;sobota")},3,2),"sk");const ce={group:".",decimal:",",ampm:q("a. m.;p. m."),mmmm:q("enero;febrero;marzo;abril;mayo;junio;julio;agosto;septiem~;octu~;noviem~;diciem~","bre"),mmm:q("ene;feb;mar;abr;may;jun;jul;ago;sept;oct;nov;dic"),dddd:q("domingo;lunes;martes;miércoles;jueves;viernes;sábado"),ddd:q("dom;lun;mar;mié;jue;vie;sáb")},fe=q("ene;feb;mar;abr;may;jun;jul;ago;sep;oct;nov;dic"),he=q("ene.;feb.;mar.;abr.;may.;jun.;jul.;ago.;sept.;oct.;nov.;dic.");ie({...ce},"es"),ie({...ce},"es_AR"),ie({...ce},"es_BO"),ie({...ce},"es_CL"),ie({...ce},"es_CO"),ie({...ce},"es_EC"),ie({...ce,mmm:fe,ampm:q("a.m.;p.m.")},"es_MX"),ie({...ce,mmm:he},"es_PY"),ie({...ce,mmm:he},"es_UY"),ie({...ce,mmm:he,mmmm:q("enero;febrero;marzo;abril;mayo;junio;julio;agosto;setiembre;octubre;noviembre;diciembre")},"es_VE"),ie({decimal:",",ampm:q("fm;em"),mmmm:q("januari;februari;mars;april;maj;juni;juli;augusti;september;oktober;november;december"),mmm:q("jan.;feb.;mars;apr.;maj;juni;juli;aug.;sep.;okt.;nov.;dec."),dddd:q("sön~;mån~;tis~;ons~;tors~;fre~;lör~","dag"),ddd:q("sön;mån;tis;ons;tors;fre;lör")},"sv"),ie(Q({group:".",decimal:",",ampm:q("ÖÖ;ÖS"),mmmm:q("Ocak;Şubat;Mart;Nisan;Mayıs;Haziran;Temmuz;Ağustos;Eylül;Ekim;Kasım;Aralık"),mmm:q("Oca;Şub;Mar;Nis;May;Haz;Tem;Ağu;Eyl;Eki;Kas;Ara"),dddd:q("Pazar;Pazartesi;Salı;Çarşamba;Perşembe;Cuma;Cumartesi"),ddd:q("Paz;Pzt;Sal;Çar;Per;Cum;Cmt")},3,-1),"tr"),ie({group:",",ampm:q("yb;yh"),mmmm:q("Ionawr;Chwefror;Mawrth;Ebrill;Mai;Mehefin;Gorffennaf;Awst;Medi;Hydref;Tachwedd;Rhagfyr"),mmm:q("Ion;Chwef;Maw;Ebr;Mai;Meh;Gorff;Awst;Medi;Hyd;Tach;Rhag"),dddd:q("Dydd Sul;Dydd Llun;Dydd Mawrth;Dydd Mercher;Dydd Iau;Dydd Gwener;Dydd Sadwrn"),ddd:q("Sul;Llun;Maw;Mer;Iau;Gwen;Sad")},"cy"),ie({group:".",decimal:",",mmmm:q("yanvar;fevral;mart;aprel;may;iyun;iyul;avqust;sentyabr;oktyabr;noyabr;dekabr"),mmm:q("yan;fev;mar;apr;may;iyn;iyl;avq;sen;okt;noy;dek"),dddd:q("bazar;bazar ertəsi;çərşənbə axşamı;çərşənbə;cümə axşamı;cümə;şənbə"),ddd:q("B.;B.e.;Ç.a.;Ç.;C.a.;C.;Ş.")},"az"),ie(Q({decimal:",",mmmm:q("студзеня;лютага;сакавіка;красавіка;мая;чэрвеня;ліпеня;жніўня;верасня;кастрычніка;лістапада;снежня"),dddd:q("нядзеля;панядзелак;аўторак;серада;чацвер;пятніца;субота"),ddd:q("нд;пн;аў;ср;чц;пт;сб")},3,-1),"be"),ie({decimal:",",ampm:q("пр.об.;сл.об."),mmmm:q("януари;февруари;март;април;май;юни;юли;август;септември;октомври;ноември;декември"),mmm:q("яну;фев;март;апр;май;юни;юли;авг;сеп;окт;ное;дек"),dddd:q("неделя;понеделник;вторник;сряда;четвъртък;петък;събота"),ddd:q("нд;пн;вт;ср;чт;пт;сб")},"bg"),ie({group:".",decimal:",",mmmm:q("de gener;de febrer;de març;d’abril;de maig;de juny;de juliol;d’agost;de setembre;d’octubre;de novembre;de desembre"),mmm:q("de gen.;de febr.;de març;d’abr.;de maig;de juny;de jul.;d’ag.;de set.;d’oct.;de nov.;de des."),dddd:q("diumenge;dilluns;dimarts;dimecres;dijous;divendres;dissabte"),ddd:q("dg.;dl.;dt.;dc.;dj.;dv.;ds."),ampm:q("a. m.;p. m.")},"ca"),ie(Q({group:",",decimal:".",mmmm:q("Enero;Pebrero;Marso;Abril;Mayo;Hunyo;Hulyo;Agosto;Setyembre;Oktubre;Nobyembre;Disyembre"),dddd:q("Linggo;Lunes;Martes;Miyerkules;Huwebes;Biyernes;Sabado")},3,3),"fil"),ie({group:",",decimal:".",mmmm:q("જાન્યુઆરી;ફેબ્રુઆરી;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટેમ્બર;ઑક્ટોબર;નવેમ્બર;ડિસેમ્બર"),mmm:q("જાન્યુ;ફેબ્રુ;માર્ચ;એપ્રિલ;મે;જૂન;જુલાઈ;ઑગસ્ટ;સપ્ટે;ઑક્ટો;નવે;ડિસે"),dddd:q("રવિ~;સોમ~;મંગળ~;બુધ~;ગુરુ~;શુક્ર~;શનિ~","વાર"),ddd:q("રવિ;સોમ;મંગળ;બુધ;ગુરુ;શુક્ર;શનિ")},"gu"),ie({group:",",decimal:".",ampm:q("לפנה״צ;אחה״צ"),dddd:q("~ראשון;~שני;~שלישי;~רביעי;~חמישי;~שישי;~שבת","יום "),ddd:q("~א׳;~ב׳;~ג׳;~ד׳;~ה׳;~ו׳;שבת","יום "),mmmm:q("ינואר;פברואר;מרץ;אפריל;מאי;יוני;יולי;אוגוסט;ספטמבר;אוקטובר;נובמבר;דצמבר"),mmm:q("ינו׳;פבר׳;מרץ;אפר׳;מאי;יוני;יולי;אוג׳;ספט׳;אוק׳;נוב׳;דצמ׳"),mmmm6:q("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע אל־אוול;רביע א־ת׳אני;ג׳ומאדא אל־אולא;ג׳ומאדא א־ת׳אניה;רג׳ב;שעבאן;רמדאן"),mmm6:q("רמדאן;שוואל;ד׳ו אל־קעדה;ד׳ו אל־חיג׳ה;מוחרם;רביע א׳;רביע ב׳;ג׳ומאדא א׳;ג׳ומאדא ב׳;רג׳ב;שעבאן;רמדאן")},"he"),ie(Q({group:".",decimal:",",mmmm:q("siječnja;veljače;ožujka;travnja;svibnja;lipnja;srpnja;kolovoza;rujna;listopada;studenoga;prosinca"),mmm:q("sij;velj;ožu;tra;svi;lip;srp;kol;ruj;lis;stu;pro"),dddd:q("nedjelja;ponedjeljak;utorak;srijeda;četvrtak;petak;subota")},-1,3),"hr"),ie({decimal:",",mmmm:q("հունվարի;փետրվարի;մարտի;ապրիլի;մայիսի;հունիսի;հուլիսի;օգոստոսի;սեպտեմբերի;հոկտեմբերի;նոյեմբերի;դեկտեմբերի"),mmm:q("հնվ;փտվ;մրտ;ապր;մյս;հնս;հլս;օգս;սեպ;հոկ;նոյ;դեկ"),dddd:q("կիրակի;երկուշաբթի;երեքշաբթի;չորեքշաբթի;հինգշաբթի;ուրբաթ;շաբաթ"),ddd:q("կիր;երկ;երք;չրք;հնգ;ուր;շբթ")},"hy"),ie(Q({decimal:",",mmmm:q("იანვარი;თებერვალი;მარტი;აპრილი;მაისი;ივნისი;ივლისი;აგვისტო;სექტემბერი;ოქტომბერი;ნოემბერი;დეკემბერი"),dddd:q("კვირა;ორშაბათი;სამშაბათი;ოთხშაბათი;ხუთშაბათი;პარასკევი;შაბათი")},3,3),"ka"),ie(Q({decimal:",",mmmm:q("қаңтар;ақпан;наурыз;сәуір;мамыр;маусым;шілде;тамыз;қыркүйек;қазан;қараша;желтоқсан"),dddd:q("жексенбі;дүйсенбі;сейсенбі;сәрсенбі;бейсенбі;жұма;сенбі"),ddd:q("жс;дс;сс;ср;бс;жм;сб")},13,-1),"kk"),ie({group:",",mmmm:q("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿಲ್;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂಬರ್;ಅಕ್ಟೋಬರ್;ನವೆಂಬರ್;ಡಿಸೆಂಬರ್"),mmm:q("ಜನವರಿ;ಫೆಬ್ರವರಿ;ಮಾರ್ಚ್;ಏಪ್ರಿ;ಮೇ;ಜೂನ್;ಜುಲೈ;ಆಗಸ್ಟ್;ಸೆಪ್ಟೆಂ;ಅಕ್ಟೋ;ನವೆಂ;ಡಿಸೆಂ"),dddd:q("ಭಾನು~;ಸೋಮ~;ಮಂಗಳ~;ಬುಧ~;ಗುರು~;ಶುಕ್ರ~;ಶನಿ~","ವಾರ"),ddd:q("ಭಾನು;ಸೋಮ;ಮಂಗಳ;ಬುಧ;ಗುರು;ಶುಕ್ರ;ಶನಿ"),ampm:q("ಪೂರ್ವಾಹ್ನ;ಅಪರಾಹ್ನ")},"kn"),ie({decimal:",",mmmm:q("sausio;vasario;kovo;balandžio;gegužės;birželio;liepos;rugpjūčio;rugsėjo;spalio;lapkričio;gruodžio"),mmm:q("saus.;vas.;kov.;bal.;geg.;birž.;liep.;rugp.;rugs.;spal.;lapkr.;gruod."),dddd:q("sekmadienis;pirmadienis;antradienis;trečiadienis;ketvirtadienis;penktadienis;šeštadienis"),ddd:q("sk;pr;an;tr;kt;pn;št"),ampm:q("priešpiet;popiet")},"lt"),ie({decimal:",",mmmm:q("janvāris;februāris;marts;aprīlis;maijs;jūnijs;jūlijs;augusts;septembris;oktobris;novembris;decembris"),mmm:q("janv.;febr.;marts;apr.;maijs;jūn.;jūl.;aug.;sept.;okt.;nov.;dec."),dddd:q("svētdiena;pirmdiena;otrdiena;trešdiena;ceturtdiena;piektdiena;sestdiena"),ddd:q("svētd.;pirmd.;otrd.;trešd.;ceturtd.;piektd.;sestd."),ampm:q("priekšpusdienā;pēcpusdienā")},"lv"),ie({group:",",decimal:".",mmmm:q("ജനുവരി;ഫെബ്രുവരി;മാർച്ച്;ഏപ്രിൽ;മേയ്;ജൂൺ;ജൂലൈ;ഓഗസ്റ്റ്;സെപ്റ്റംബർ;ഒക്‌ടോബർ;നവംബർ;ഡിസംബർ"),mmm:q("ജനു;ഫെബ്രു;മാർ;ഏപ്രി;മേയ്;ജൂൺ;ജൂലൈ;ഓഗ;സെപ്റ്റം;ഒക്ടോ;നവം;ഡിസം"),dddd:q("ഞായറാഴ്‌ച;തിങ്കളാഴ്‌ച;ചൊവ്വാഴ്ച;ബുധനാഴ്‌ച;വ്യാഴാഴ്‌ച;വെള്ളിയാഴ്‌ച;ശനിയാഴ്‌ച"),ddd:q("ഞായർ;തിങ്കൾ;ചൊവ്വ;ബുധൻ;വ്യാഴം;വെള്ളി;ശനി")},"ml"),ie({group:",",decimal:".",mmmm:q("нэгдүгээ~;хоёрдугаа~;гуравдугаа~;дөрөвдүгээ~;тавдугаа~;зургаадугаа~;долоодугаа~;наймдугаа~;есдүгээ~;аравдугаа~;арван нэгдүгээ~;арван хоёрдугаа~","р сар"),mmm:q("1~;2~;3~;4~;5~;6~;7~;8~;9~;10~;11~;12~","-р сар"),dddd:q("ням;даваа;мягмар;лхагва;пүрэв;баасан;бямба"),ddd:q("Ня;Да;Мя;Лх;Пү;Ба;Бя"),ampm:q("ү.ө.;ү.х.")},"mn"),ie({group:",",decimal:".",mmmm:q("जानेवारी;फेब्रुवारी;मार्च;एप्रिल;मे;जून;जुलै;ऑगस्ट;सप्टेंबर;ऑक्टोबर;नोव्हेंबर;डिसेंबर"),mmm:q("जाने;फेब्रु;मार्च;एप्रि;मे;जून;जुलै;ऑग;सप्टें;ऑक्टो;नोव्हें;डिसें"),dddd:q("रविवार;सोमवार;मंगळवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:q("रवि;सोम;मंगळ;बुध;गुरु;शुक्र;शनि")},"mr"),ie(Q({group:",",decimal:".",mmmm:q("ဇန်နဝါရီ;ဖေဖော်ဝါရီ;မတ်;ဧပြီ;မေ;ဇွန်;ဇူလိုင်;ဩဂုတ်;စက်တင်ဘာ;အောက်တိုဘာ;နိုဝင်ဘာ;ဒီဇင်ဘာ"),mmm:q("ဇန်;ဖေ;မတ်;ဧ;မေ;ဇွန်;ဇူ;ဩ;စက်;အောက်;နို;ဒီ"),dddd:q("တနင်္ဂနွေ;တနင်္လာ;အင်္ဂါ;ဗုဒ္ဓဟူး;ကြာသပတေး;သောကြာ;စနေ"),ampm:q("နံနက်;ညနေ")},-1,0),"my"),ie({group:",",decimal:".",mmmm:q("ਜਨਵਰੀ;ਫ਼ਰਵਰੀ;ਮਾਰਚ;ਅਪ੍ਰੈਲ;ਮਈ;ਜੂਨ;ਜੁਲਾਈ;ਅਗਸਤ;ਸਤੰਬਰ;ਅਕਤੂਬਰ;ਨਵੰਬਰ;ਦਸੰਬਰ"),mmm:q("ਜਨ;ਫ਼ਰ;ਮਾਰਚ;ਅਪ੍ਰੈ;ਮਈ;ਜੂਨ;ਜੁਲਾ;ਅਗ;ਸਤੰ;ਅਕਤੂ;ਨਵੰ;ਦਸੰ"),dddd:q("ਐਤਵਾਰ;ਸੋਮਵਾਰ;ਮੰਗਲਵਾਰ;ਬੁੱਧਵਾਰ;ਵੀਰਵਾਰ;ਸ਼ੁੱਕਰਵਾਰ;ਸ਼ਨਿੱਚਰਵਾਰ"),ddd:q("ਐਤ;ਸੋਮ;ਮੰਗਲ;ਬੁੱਧ;ਵੀਰ;ਸ਼ੁੱਕਰ;ਸ਼ਨਿੱਚਰ"),ampm:q("ਪੂ.ਦੁ.;ਬਾ.ਦੁ.")},"pa"),ie({group:".",decimal:",",mmmm:q("ianuarie;februarie;martie;aprilie;mai;iunie;iulie;august;septem~;octom~;noiem~;decem~","brie"),mmm:q("ian.;feb.;mar.;apr.;mai;iun.;iul.;aug.;sept.;oct.;nov.;dec."),dddd:q("duminică;luni;marți;miercuri;joi;vineri;sâmbătă"),ddd:q("dum.;lun.;mar.;mie.;joi;vin.;sâm."),ampm:q("a.m.;p.m.")},"ro"),ie(Q({group:".",decimal:",",mmmm:q("januar;februar;marec;april;maj;junij;julij;avgust;september;oktober;november;december"),mmm:q("jan.;feb.;mar.;apr.;maj;jun.;jul.;avg.;sep.;okt.;nov.;dec."),dddd:q("nedelja;ponedeljek;torek;sreda;četrtek;petek;sobota"),ampm:q("dop.;pop.")},-1,13),"sl"),ie(Q({group:".",decimal:",",mmmm:q("јануар;фебруар;март;април;мај;јун;јул;август;септембар;октобар;новембар;децембар"),dddd:q("недеља;понедељак;уторак;среда;четвртак;петак;субота")},3,3),"sr"),ie({group:",",decimal:".",mmmm:q("ஜனவரி;பிப்ரவரி;மார்ச்;ஏப்ரல்;மே;ஜூன்;ஜூலை;ஆகஸ்ட்;செப்டம்பர்;அக்டோபர்;நவம்பர்;டிசம்பர்"),mmm:q("ஜன.;பிப்.;மார்.;ஏப்.;மே;ஜூன்;ஜூலை;ஆக.;செப்.;அக்.;நவ.;டிச."),dddd:q("ஞாயிறு;திங்கள்;செவ்வாய்;புதன்;வியாழன்;வெள்ளி;சனி"),ddd:q("ஞாயி.;திங்.;செவ்.;புத.;வியா.;வெள்.;சனி")},"ta"),ie({group:",",decimal:".",mmmm:q("జనవరి;ఫిబ్రవరి;మార్చి;ఏప్రిల్;మే;జూన్;జులై;ఆగస్టు;సెప్టెంబర్;అక్టోబర్;నవంబర్;డిసెంబర్"),mmm:q("జన;ఫిబ్ర;మార్చి;ఏప్రి;మే;జూన్;జులై;ఆగ;సెప్టెం;అక్టో;నవం;డిసెం"),dddd:q("ఆదివారం;సోమవారం;మంగళవారం;బుధవారం;గురువారం;శుక్రవారం;శనివారం"),ddd:q("ఆది;సోమ;మంగళ;బుధ;గురు;శుక్ర;శని")},"te"),ie({decimal:",",mmmm:q("січня;лютого;березня;квітня;травня;червня;липня;серпня;вересня;жовтня;листопада;грудня"),mmm:q("січ.;лют.;бер.;квіт.;трав.;черв.;лип.;серп.;вер.;жовт.;лист.;груд."),dddd:q("неділю;понеділок;вівторок;середу;четвер;пʼятницю;суботу"),ddd:q("нд;пн;вт;ср;чт;пт;сб"),ampm:q("дп;пп")},"uk"),ie({group:".",decimal:",",mmmm:q("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","tháng "),mmm:q("~1;~2;~3;~4;~5;~6;~7;~8;~9;~10;~11;~12","thg "),dddd:q("Chủ Nhật;Thứ Hai;Thứ Ba;Thứ Tư;Thứ Năm;Thứ Sáu;Thứ Bảy"),ddd:q("CN;Th 2;Th 3;Th 4;Th 5;Th 6;Th 7"),ampm:q("SA;CH")},"vi"),ie(Q({group:"٬",decimal:"٫",ampm:q("ص;م"),mmmm:q("يناير;فبراير;مارس;أبريل;مايو;يونيو;يوليو;أغسطس;سبتمبر;أكتوبر;نوفمبر;ديسمبر"),dddd:q("الأحد;الاثنين;الثلاثاء;الأربعاء;الخميس;الجمعة;السبت"),mmmm6:q("رمضان;شوال;ذو القعدة;ذو الحجة;محرم;ربيع الأول;ربيع الآخرة;جمادى الأولى;جمادى الآخرة;رجب;شعبان;رمضان")},0,0,0),"ar"),ie({group:",",decimal:".",mmmm:q("জানুয়ারী;ফেব্রুয়ারী;মার্চ;এপ্রিল;মে;জুন;জুলাই;আগস্ট;সেপ্টেম্বর;অক্টোবর;নভেম্বর;ডিসেম্বর"),mmm:q("জানু;ফেব;মার্চ;এপ্রি;মে;জুন;জুল;আগ;সেপ্টেঃ;অক্টোঃ;নভেঃ;ডিসেঃ"),dddd:q("রবিবার;সোমবার;মঙ্গলবার;বুধবার;বৃহস্পতিবার;শুক্রবার;শনিবার"),ddd:q("রবি;সোম;মঙ্গল;বুধ;বৃহস্পতি;শুক্র;শনি")},"bn"),ie({group:",",decimal:".",mmmm:q("जनवरी;फ़रवरी;मार्च;अप्रैल;मई;जून;जुलाई;अगस्त;सितंबर;अक्तूबर;नवंबर;दिसंबर"),mmm:q("जन॰;फ़र॰;मार्च;अप्रैल;मई;जून;जुल॰;अग॰;सित॰;अक्तू॰;नव॰;दिस॰"),dddd:q("रविवार;सोमवार;मंगलवार;बुधवार;गुरुवार;शुक्रवार;शनिवार"),ddd:q("रवि;सोम;मंगल;बुध;गुरु;शुक्र;शनि"),ampm:q("am;pm")},"hi");const ge={overflow:"######",dateErrorThrows:!1,dateErrorNumber:!0,dateSpanLarge:!0,leap1900:!0,nbsp:!1,throws:!0,invalid:"######",locale:"",ignoreTimezone:!1,grouping:[3,3],indexColors:!0,skipChar:"",repeatChar:""};function be(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if("number"!=typeof e)return e;if(e<0)return-be(-e,t);if(t){const n=10**t||1;return be(e*n,0)/n}return Math.round(e)}const ye=1e-13;function ve(e){const t=e<0?-1:1,n=10**((arguments.length>1&&void 0!==arguments[1]?arguments[1]:2)||2),a=10**((arguments.length>2&&void 0!==arguments[2]?arguments[2]:2)||2);let r,i,s=Math.abs(e),m=0,o=0,d=0,l=1;if((e=s)%1==0)i=[e*t,1];else if(e<1e-19)i=[t,1e19];else if(e>1e19)i=[1e19*t,1];else{do{if(s=1/(s-Math.floor(s)),r=l,l=l*Math.floor(s)+m,m=r,o=d,d=Math.floor(e*l+.5),d>=n||l>=a)return[t*o,m]}while(Math.abs(e-d/l)>=ye&&s!==Math.floor(s));i=[t*d,l]}return i}const _e=Math.floor;function je(e){if((!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&e>=0){if(0===e)return[1900,1,0];if(60===e)return[1900,2,29];if(e<60)return[1900,e<32?1:2,(e-1)%31+1]}let t=e+68569+2415019;const n=_e(4*t/146097);t-=_e((146097*n+3)/4);const a=_e(4e3*(t+1)/1461001);t=t-_e(1461*a/4)+31;const r=_e(80*t/2447),i=t-_e(2447*r/80);t=_e(r/11);return[0|100*(n-49)+a+t,0|r+2-12*t,0|i]}function ke(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const a=_e(e);return t===u?function(e){if(60===e)throw new Error("#VALUE!");if(e<=1)return[1317,8,29];if(e<60)return[1317,e<32?9:10,1+(e-2)%30];const t=10631/30,n=.1335;let a=e+466935;const r=_e(a/10631);a-=10631*r;const i=_e((a-n)/t);a-=_e(i*t+n);const s=_e((a+28.5001)/29.5);return 13===s?[30*r+i,12,30]:[30*r+i,s,a-_e(29.5001*s-29)]}(a):t===d?function(e){return je(e+1462)}(a):je(a,n)}const Me=Math.floor,xe=86400;function Fe(e,t){let n=null;if(Array.isArray(e)){const[t,a,r,i,s,m]=e;n=Date.UTC(t,null==a?0:a-1,null!=r?r:1,i||0,s||0,m||0)}else if(e instanceof Date&&(n=1*e,!t||!t.ignoreTimezone)){const t=new Date;t.setUTCFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t.setUTCHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n=1*t}if(null!=n&&isFinite(n)){const e=n/864e5;return e-(e<=-25509?-25568:-25569)}return null}const we={};function ze(e,t){if(e){const n=e[0];t[n]=t[n]||{},ze(e.slice(1),t[n])}else t.$=!0}["d-F-y","d-F-Y","d-M-y","d-M-Y","F-d-y","F-d-Y","F-j-y","F-j-Y","j-F-y","j-F-Y","j-M-y","j-M-Y","M-d-y","M-d-Y","M-j-y","M-j-Y","m-d-y","m-d-Y","m-j-y","m-j-Y","n-d-y","n-d-Y","n-j-y","n-j-Y","y-F-d","y-F-j","y-M-d","y-M-j","Y-F-d","Y-F-j","Y-M-d","Y-m-d","Y-M-j","Y-m-j","Y-n-d","Y-n-j","j-F","j-M","d-F","d-M","n-d","n-j","n-Y","m-d","m-j","m-Y","M-Y","M-y","F-y","F-Y","Y-M","Y-n","Y-m","Y-F","Y-M"].forEach((e=>{ze(e,we),ze(e+" x",we),ze(e+" l",we),ze(e+" l x",we),ze("l "+e,we),ze("l "+e+" x",we),ze(e+" D",we),ze(e+" D x",we),ze("D "+e,we),ze("D "+e+" x",we)}));const Ce={jan:1,feb:2,mar:3,apr:4,may:5,jun:6,jul:7,aug:8,sep:9,oct:10,nov:11,dec:12},Se={january:1,february:2,march:3,april:4,june:6,july:7,august:8,september:9,october:10,november:11,december:12},Ae={sunday:"l",monday:"l",tuesday:"l",wednesday:"l",thursday:"l",friday:"l",saturday:"l",sun:"D",mon:"D",tue:"D",wed:"D",thu:"D",fri:"D",sat:"D"},Ie=(new Date).getUTCFullYear();function Ee(e){const t=new RegExp("^([\\s+%"+V.join("")+"(-]*)(((?:(?:\\d[\\d,]*)(?:\\.\\d*)?|(?:\\.\\d+)))([eE][+-]?\\d+)?)([\\s%"+V.join("")+")]*)$").exec(e);if(t){const[,e,n,a,r,i]=t;let s=1,m="",o=!1,d=!1,l=!1,u=!1,p=!1,c=null,f=!1,h=parseFloat(n.replace(/,/g,""));if(!isFinite(h))return null;for(let t=0;t<e.length;t++){const n=e[t];if("-"===n){if(o||d)return null;o=!0,s=-1}else if(K.test(n)){if(p)return null;p=!0,c=n}else if("("===n){if(d||o)return null;d=!0,s=-1}else if("%"===n){if(u)return null;u=!0}}for(let e=0;e<i.length;e++){const t=i[e];if(K.test(t)){if(p)return null;p=!0,c=t,f=!0}else if(")"===t){if(l||!d)return null;l=!0}else if("%"===t){if(u)return null;u=!0}}if(r){if(u||p)return null;m="0.00E+00"}else if(u){if(p)return null;m=a.includes(".")?"0.00%":"0%",h*=.01}else if(p){const e=a.includes(".")?"#,##0.00":"#,##0";m=f?e+c:c+e}else a.includes(",")&&(m=a.includes(".")?"#,##0.00":"#,##0");const g={v:h*s};return m&&(g.z=m),g}return null}const De=(e,t,n)=>{const a=n.path||"",r=Object.keys(t);for(let i=0;i<r.length;i++){let s;const m=r[i];if(t[m]){if("$"===m||"€"===m)e||(s=n);else if("-"===m){const r=/^(\s*([./-]|,\s)\s*|\s+)/.exec(e);if(r){const i="-"===r[1]||"/"===r[1]||"."===r[1]?r[1]:" ";if(!n.sep||n.sep===i){const o=r[0].replace(/\s+/g," ");s=De(e.slice(r[0].length),t[m],{...n,sep:i,path:a+o})}}}else if(" "===m){const r=/^[,.]?\s+/.exec(e);if(r){const i=r[0].replace(/\s+/g," ");s=De(e.slice(r[0].length),t[m],{...n,path:a+i})}}else if("j"===m||"d"===m){const r=/^(0?[1-9]|1\d|2\d|3[01])\b/.exec(e);r&&(s=De(e.slice(r[0].length),t[m],{...n,day:r[0],path:a+m}))}else if("n"===m||"m"===m){const r=/^(0?[1-9]|1[012])\b/.exec(e);r&&(s=De(e.slice(r[0].length),t[m],{...n,month:+r[0],_mon:r[0],path:a+m}))}else if("F"===m||"M"===m){const r=/^([a-z]{3,9})\b/i.exec(e),i=r&&("F"===m?Se:Ce)[r[0].toLowerCase()];i&&(s=De(e.slice(r[0].length),t[m],{...n,month:i,_mon:r[0],path:a+m}))}else if("l"===m||"D"===m){const r=/^([a-z]{3,9})\b/i.exec(e);(r&&Ae[r[0].toLowerCase()])===m&&(s=De(e.slice(r[0].length),t[m],{...n,path:a+m}))}else if("y"===m){const r=/^\d\d\b/.exec(e);if(r){const i=+r[0]>=30?+r[0]+1900:+r[0]+2e3;s=De(e.slice(r[0].length),t[m],{...n,year:i,path:a+m})}}else if("Y"===m){const r=/^\d\d\d\d\b/.exec(e);r&&(s=De(e.slice(r[0].length),t[m],{...n,year:+r[0],path:a+m}))}else{if("x"!==m)throw new Error('Unknown date token "'.concat(m,'"'));{const r=Ne(e);r&&(s=De("",t[m],{...n,time:r.v,tf:r.z,path:a+m}))}}if(s)return s}}};function Te(e){const t=De(e.trim(),we,{path:""});if(t){var n;if("."===t.sep&&3===t.path.length)return null;const e=+(null!==(n=t.year)&&void 0!==n?n:Ie);if(t.day||(t.day=1),!function(e,t,n){if(n<1)return!1;if(t<1||t>12)return!1;if(2===t){if(n>(e%4==0&&e%100!=0||e%400==0||1900===e?29:28))return!1}else if((4===t||6===t||9===t||11===t)&&n>30||(1===t||3===t||5===t||7===t||8===t||10===t||12===t)&&n>31)return!1;return!0}(e,t.month,t.day))return null;let a=-1/0;if(e<1900)return null;e<=1900&&t.month<=2?a=25568:e<1e4&&(a=25569);const r=Date.UTC(e,t.month-1,t.day)/864e5+a+(t.time||0);if(r>=0&&r<=2958465){const e="0"===t._mon[0]||"0"===t.day[0]||2===t._mon.length&&2===t.day.length;return{v:r,z:t.path.replace(/[jdlDnmMFyYx-]/g,(n=>"j"===n||"d"===n?e?"dd":"d":"D"===n?"ddd":"l"===n?"dddd":"n"===n||"m"===n?e?"mm":"m":"M"===n?"mmm":"F"===n?"mmmm":"y"===n?"yy":"x"===n?t.tf||"":"Y"===n?"yyyy":n))}}}return null}function Ne(e){const t=/^\s*([10]?\d|2[0-4])(?::([0-5]\d|\d))?(?::([0-5]\d|\d))?(\.\d{1,10})?(?:\s*([AP])M?)?\s*$/i.exec(e);if(t){const[,e,n,a,r,i]=t;if(r&&!a)return null;if(!i&&!n&&!a)return null;let s=1*(e||0);if(i){if(s>=13)return null;"p"!==i[0]&&"P"!==i[0]||(s+=12)}return{v:(60*s*60+60*(1*(n||0))+1*(a||0)+1*(r||0))/86400,z:(2===e.length?"hh":"h")+":mm"+(a?":ss":"")+(i?" AM/PM":"")}}return null}function Ye(e){return/^\s*true\s*$/i.test(e)?{v:!0}:/^\s*false\s*$/i.test(e)?{v:!1}:null}function Oe(e,t,n){return t[n+"_max"]=e.length,t[n+"_min"]=e.replace(/#/g,"").length,t}function Pe(e,t){"string"==typeof e?t.push({type:"string",value:e}):t.push(e)}function Re(e,t){const n=e&&e.type;return n===c||n===f||n===h||n===z&&"den"===t}function Le(d){const c=[],h={scale:1,percent:!1,text:!1,date:0,date_eval:!1,date_system:l,sec_decimals:0,general:!1,clock:24,int_pattern:[],frac_pattern:[],man_pattern:[],den_pattern:[],num_pattern:[],tokens:c};let O="int",$=null;const V=[];let K,Z=!1,W=-1,X=!1,q="",Q=!1;for(;++W<d.length&&!X;){var ee;const ie=d[W],se=ie.type||S;if(q+=ie.raw,se===p)h.general=!0,Pe(ie,c);else if(Re(ie,O)){var te;const e=h[O+"_pattern"];Re(K,O)||(null===(te=K)||void 0===te?void 0:te.type)===b?(e.push((e.pop()||"")+ie.value),$.num+=ie.value):(e.push(ie.value),$={type:O,num:ie.value},Pe($,c))}else if(se===G)"("===ie.value&&(h.parens=!0),Pe(ie.value,c);else if(se===z)Pe(ie.value,c);else if(se===g)if(Q=!0,h[O+"_pattern"].length){if(!$)throw new SyntaxError("Format pattern is missing a numerator");h.fractions=!0,h.num_pattern.push(h[O+"_pattern"].pop()),$.type="num",O="den",Pe({type:"div"},c)}else Pe(ie.value,c);else if(se===v)Pe(",",c);else if(se===y)h.scale=.001**ie.raw.length;else if(se===b){if("int"===O&&(h.grouping=!0),"den"===O)throw new SyntaxError("Cannot group denominator digits")}else if(se===F)Pe(ie,c);else{if(se===_){X=!0;break}if(se===j)h.text=!0,Pe(ie,c);else if(se===k||se===M)Pe(ie,c);else if(se===I){const e=ie.value.toLowerCase(),t=e[0],n={type:"",size:0,date:1,pad:e.length};"h"===t?(n.size=a,n.type="hour-elap"):"m"===t?(n.size=r,n.type="min-elap"):(n.size=i,n.type="sec-elap"),h.date=h.date|n.size,V.push(n),Pe(n,c)}else if(h.date&&se===x&&(null===(ee=d[W+1])||void 0===ee?void 0:ee.type)===f){var ae,re;let e=1;W++;let t="0";(null===(ae=d[W+1])||void 0===ae?void 0:ae.type)===f&&(t+="0",e=2,W++),(null===(re=d[W+1])||void 0===re?void 0:re.type)===f&&(t+="0",e=3,W++),q+=t;const n=[i,s,m,o][e];h.date=h.date|n,h.date_eval=!0,h.sec_decimals=Math.max(h.sec_decimals,e),Pe({type:"subsec",size:n,decimals:e,date:1},c)}else if(se===C)Z||("B2"===ie.value||"b2"===ie.value?h.date_system=u:h.date_system=l);else if(se===A){const s={type:"",size:0,date:1},m=ie.value.toLowerCase(),o=m[0];if("y"===m||"yy"===m)s.size=e,s.type="year-short";else if("y"===o||"e"===o)s.size=e,s.type="year";else if("b"===m||"bb"===m)s.size=e,s.type="b-year-short";else if("b"===o)s.size=e,s.type="b-year";else if("d"===m||"dd"===m)s.size=n,s.type="day",s.pad=/dd/.test(m);else if("ddd"===m)s.size=n,s.type="weekday-short";else if("d"===o)s.size=n,s.type="weekday";else if("h"===o)s.size=a,s.type="hour",s.pad=/hh/i.test(m);else if("m"===o){3===m.length?(s.size=t,s.type="monthname-short"):5===m.length?(s.size=t,s.type="monthname-single"):m.length>=4&&(s.size=t,s.type="monthname");const e=V[V.length-1];!s.type&&e&&!e.used&&e.size&(a|i)&&(e.used=!0,s.size=r,s.type="min",s.pad=/mm/.test(m)),s.type||(s.size=t,s.type="month",s.pad=/mm/.test(m),s.indeterminate=!0)}else if("s"===o){s.size=i,s.type="sec",s.pad=/ss/.test(m);const e=V[V.length-1];e&&e.size&r?s.used=!0:e&&e.indeterminate&&(delete e.indeterminate,e.size=r,e.type="min",s.used=!0)}h.date=h.date|s.size,h.date_eval=!0,V.push(s),Pe(s,c)}else if(se===P)h.clock=12,h.date=h.date|a,h.date_eval=!0,ie.short="A/P"===ie.value,Pe(ie,c);else if(se===L||se===R||se===J)Pe(ie.value,c);else if(se===E)h.condition=[ie.value[0],parseFloat(ie.value[1])];else if(se===N){const e=ie.value.split("-"),t=e.length<2?"":e.slice(1).join("-"),n=e[0];n&&Pe(n,c);const a=ne(t);a&&(h.locale=a);const r=parseInt(t,16);if(isFinite(r)&&16711680&r){6===(r>>16&255)&&(h.date_system=u)}Z=!0}else if(se===Y){let e,t=ie.value.toLowerCase();(e=/^color\s*(\d+)$/i.exec(t))&&(t=parseInt(e[1],10)),h.color=t}else if(se===w)h.scale=100,h.percent=!0,Pe("%",c);else if(se===x)Pe(ie,c),h.date||(h.dec_fractions=!0,O="frac");else if(se===H)h.exponential=!0,h.exp_plus=ie.value.includes("+"),O="man",Pe({type:"exp",plus:h.exp_plus},c);else if(se===U)Pe(ie,c);else if(se===B)Pe(ie,c);else if(se!==D&&se!==T)throw se===S?new SyntaxError("Illegal character: ".concat(q)):new SyntaxError("Unknown token ".concat(se," in ").concat(q))}K=ie}if(h.tokensUsed=W,h.pattern=q,/^((?:\[[^\]]+\])+)(;|$)/.test(h.pattern)&&!/^\[(?:h+|m+|s+)\]/.test(h.pattern)&&Pe({type:"text"},c),h.fractions&&h.dec_fractions||h.grouping&&!h.int_pattern.length||h.fractions&&h.exponential||h.fractions&&h.den_pattern.length*h.num_pattern.length==0||Q&&!h.fractions&&!h.date||h.exponential&&(h.int_pattern.length||h.frac_pattern.length)*h.man_pattern.length==0)throw new SyntaxError("Invalid pattern: ".concat(q));const ie=h.int_pattern.join(""),se=h.man_pattern.join(""),me=h.frac_pattern.join("");Oe(ie,h,"int");let oe=0;for(let e=0;e<ie.length;e++){const t=ie[ie.length-1-e];/^[0-9?]/.test(t)&&(oe=e+1)}h.int_min=oe,Oe(me,h,"frac"),Oe(se,h,"man");let de=h.num_pattern.join(""),le=h.den_pattern[0]||"";if(le.includes("?")||de.includes("?")?(le=le.replace(/\d/g,"?"),le=le.replace(/#$/g,"?"),Oe(de,h,"num"),Oe(le,h,"den"),de=de.replace(/#$/g,"?")):(Oe(de,h,"num"),Oe(le,h,"den")),h.int_p=ie,h.man_p=se,h.num_p=de,h.den_p=le,h.den_pattern.length&&(h.denominator=parseInt(h.den_pattern.join("").replace(/\D/g,""),10)),h.integer=!!ie.length,!h.integer&&!h.exponential&&me.length){const e=h.tokens.findIndex((e=>"point"===e.type));h.tokens.splice(e,0,{type:"int",value:"#"}),h.integer=!0,h.int_pattern=["#"],h.int_p="#"}if(h.fractions)for(let e=0;e<c.length-1;e++){const t=c[e];if("string"!==t.type&&"space"!==t.type)continue;const n=c[e+1].type;"num"===n?t.rule="num+int":"div"===n?t.rule="num":"den"===n&&(t.rule="den")}return h.grouping&&h.int_pattern.length>1&&(h.grouping=!1),h}const Ue={total:1,sign:0,period:0,int:1,frac:0};const He=(e,t)=>e.replace(/\./,t.decimal);function Be(e,t,n,a){const r=0|n;if("string"==typeof n)e.push(n);else if(n===r)e.push(Math.abs(r));else{const t=Math.abs(n);let r=t?Math.floor(Math.log10(t)):0,i=t*10**-r;10===i&&(i=1,r++);const s=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Math.abs(e);if(!n)return Ue;const a=t&&e<0?1:0,r=Math.floor(n),i=Math.floor(Math.log10(n)+1);let s=0,m=0;if(r!==n){s=1;const e=String(be(n*10**-i,15));let t=e.length,a=!0,r=0;for(;r<=e.length;){if("."===e[r]){t--;break}"0"===e[r]&&a?t--:a=!1,r++}m=t-i,m<0&&(m=0,s=0)}return{total:a+Math.max(i,1)+s+m,digits:Math.max(i,0)+m,sign:a,period:s,int:Math.max(i,1),frac:m}}(t),m=()=>{const t=Math.abs(r);let n;n=1===i?i:be(i,5),e.push(He(n+"",a),a.exponent,r<0?a.negative:a.positive,t<10?"0":"",t)};if(r>=-4&&r<=-1){const n=t.toPrecision(10+r).replace(/\.?0+$/,"");e.push(He(n,a))}else if(10===r){const n=t.toFixed(10).slice(0,12).replace(/\.$/,"");e.push(He(n,a))}else if(Math.abs(r)<=9)if(s.total<=11){const n=be(t,9).toFixed(s.frac);e.push(He(n,a))}else 9===r?e.push(Math.floor(t)):r>=0&&r<9?e.push(be(t,9-r)):m();else s.total>=12?m():Math.floor(t)===t?e.push(Math.floor(t)):e.push(He(be(t,9).toFixed(s.frac),a))}return e}function Ge(e){return"0"===e?"0":"?"===e?arguments.length>1&&void 0!==arguments[1]&&arguments[1]?" ":" ":""}const Je=86400,$e=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=Math.floor(Math.log10(e));return t>1?Math.floor(n/t)*t:n},Ve=(e,t,n)=>n?e<-694324||t>=35830291:e<0||t>=2958466;function Ke(e,t,n,a){var r,i;let d="",l="",p="",c="",f="",h="",g=0,b=0|e,y=0,v=0,_=1,j=0,k=0,M=0,x=0,F=0,w=0;const z=a||se;if(!t.text&&isFinite(t.scale)&&1!==t.scale&&(e=function(e){if(0===e)return e;const t=Math.ceil(Math.log10(e<0?-e:e)),n=10**(16-Math.floor(t));return isFinite(n)?Math.round(e*n)/n:0}(e*t.scale)),t.exponential){let n=Math.abs(e);if(n){const e=10**-$e(n,t.int_max),a=be(n*e,t.frac_max)/e;g=$e(a,t.int_max)}e&&!t.integer&&g++,n*=10**-g,e=e<0?-n:n,d+=Math.abs(g)}if(t.integer){const n=Math.abs(be(e,t.fractions?1:t.frac_max));h+=n<1?"":Math.floor(n)}const C=null!==(r=n.grouping[0])&&void 0!==r?r:3,S=null!==(i=n.grouping[1])&&void 0!==i?i:C;t.dec_fractions&&(f=String(be(e,t.frac_max)).split(".")[1]||"");const A=!t.error&&(t.num_p.includes("0")||t.den_p.includes("0"));let I=A;if(t.fractions){I=A||!!(e%1);const n=Math.abs(t.integer?e%1:e);if(n)if(I=!0,t.denominator&&isFinite(t.denominator))c+=t.denominator,p+=be(n*t.denominator),"0"===p&&(p="",c="",I=A);else{const e=ve(n,1/0,t.den_max);p+=e[0],c+=e[1],t.integer&&"0"===p&&(p="",c="",I=A)}else e||t.integer||(I=!0,p="0",c="1");!t.integer||I||Math.trunc(e)||(h="0")}if(t.date){b=Math.trunc(e);const a=Je*(e-b);if(y=Math.floor(a),w=a-y,Math.abs(w)<1e-6?w=0:w>.9999&&(w=0,y+=1,y===Je&&(y=0,b+=1)),w){const e=t.date&o||t.date&m||t.date&s;(e===o&&w>.9995||e===m&&w>.995||e===s&&w>.95||!e&&w>=.5)&&(y++,w=0)}if(b||t.date_system){const a=ke(e,t.date_system,n.leap1900);v=a[0],_=a[1],j=a[2]}if(y){const e=y<0?Je+y:y;F=Math.floor(e)%60,x=Math.floor(e/60)%60,M=Math.floor(e/60/60)%60}if(k=(6+b)%7,t.date_eval&&Ve(e,b+y/Je,n.dateSpanLarge)){if(n.dateErrorThrows)throw new Error("Date out of bounds");if(n.dateErrorNumber){return Be(e<0?[z.negative]:[],0,e,z).join("")}return n.overflow}}const E=Ge("?",n.nbsp);g<0?l="-":t.exp_plus&&(l="+");const D=[],T=(e,t,a,r)=>{const i=!r&&e.length>t.length?a.length+e.length-t.length:a.length;e.length<t.length&&(r+=e.length-t.length);for(let t=0;t<i;t++)D.push(e[t+r]||Ge(a[t],n.nbsp));return i};let N=!1;const Y={int:0,frac:0,man:0,num:0,den:0};for(let r=0,i=t.tokens.length;r<i;r++){const i=t.tokens[r],s=i.type,m=i.num?i.num.length:0;if("string"===s)i.rule?"num"===i.rule?I?D.push(i.value.replace(/ /g,E)):(t.num_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,E)):"num+int"===i.rule?I&&h?D.push(i.value.replace(/ /g,E)):t.den_min>0&&(h||t.num_min)&&D.push(i.value.replace(/./g,E)):"den"===i.rule&&(I?D.push(i.value.replace(/ /g,E)):(t.den_min>0||t.den_min>0)&&D.push(i.value.replace(/./g,E))):D.push(i.value.replace(/ /g,E));else if("space"===s)"num+int"===i.rule?(I||t.num_min||t.den_min)&&(h||t.num_min)&&D.push(E):D.push(E);else if("error"===s)D.push(n.invalid);else if("point"===s)D.push(t.date?i.value:z.decimal);else if("general"===s)Be(D,0,e,z);else if("exp"===s)D.push(z.exponent);else if("minus"===s)i.volatile&&t.date||i.volatile&&(e>=0||"number"!=typeof e)||(i.volatile&&!t.fractions&&(t.integer||t.dec_fractions)?(e<0&&h&&"0"!==h||f)&&D.push(z.negative):D.push(z.negative));else if("plus"===s)D.push(z.positive);else if("text"===s)D.push(e);else if("fill"===s)n.fillChar&&D.push(n.fillChar,i.value);else if("skip"===s)n.skipChar?D.push(n.skipChar,i.value):D.push(n.nbsp?" ":" ");else if("div"===s)I?D.push("/"):t.num_min>0||t.den_min>0?D.push(E):D.push(Ge("#",n.nbsp));else if("int"===s)if(1===t.int_pattern.length){const e=t.int_p;let a="";for(let r=Math.max(t.int_min,h.length);r>0;r--){const i=h.charAt(h.length-r),s=i?"":e.charAt(e.length-r)||e[0];let m="";if(t.grouping){const e=r-1-C;e>=0&&!(e%S)&&(m=i||"0"===s?z.group:Ge("?",n.nbsp))}a+=(i||Ge(s,n.nbsp))+m}D.push(a)}else Y.int+=T(h,t.int_p,i.num,Y.int);else if("frac"===s){const e=Y.frac;for(let t=0;t<m;t++)D.push(f[t+e]||Ge(i.num[t],n.nbsp));Y.frac+=m}else if("man"===s)Y[s]||Y.man||D.push(l),Y.man+=T(d,t.man_p,i.num,Y.man);else if("num"===s)Y.num+=T(p,t.num_p,i.num,Y.num);else if("den"===s){const e=Y.den;for(let t=0;t<m;t++){let a=c[t+e];if(!a){const e=i.num[t];"123456789".includes(e)||N&&"0"===e?(N=!0,a=n.nbsp?" ":" "):a=N||t!==m-1||"0"!==e||c?Ge(e,n.nbsp):"1"}D.push(a)}Y.den+=m}else if("year"===s)v<0&&D.push(z.negative),D.push(String(Math.abs(v)).padStart(4,"0"));else if("year-short"===s){const e=v%100;D.push(e<10?"0":"",e)}else if("month"===s)D.push(i.pad&&_<10?"0":"",_);else if("monthname-single"===s)t.date_system===u?D.push(z.mmmm6[_-1].charAt(0)):D.push(z.mmmm[_-1].charAt(0));else if("monthname-short"===s)t.date_system===u?D.push(z.mmm6[_-1]):D.push(z.mmm[_-1]);else if("monthname"===s)t.date_system===u?D.push(z.mmmm6[_-1]):D.push(z.mmmm[_-1]);else if("weekday-short"===i.type)D.push(z.ddd[k]);else if("weekday"===s)D.push(z.dddd[k]);else if("day"===s)D.push(i.pad&&j<10?"0":"",j);else if("hour"===s){const e=M%t.clock||(t.clock<24?t.clock:0);D.push(i.pad&&e<10?"0":"",e)}else if("min"===s)D.push(i.pad&&x<10?"0":"",x);else if("sec"===s)D.push(i.pad&&F<10?"0":"",F);else if("subsec"===s){D.push(z.decimal);const e=w.toFixed(t.sec_decimals);D.push(e.slice(2,2+i.decimals))}else if("ampm"===s){const e=M<12?0:1;i.short&&!a?D.push("AP"[e]):D.push(z.ampm[e])}else if("hour-elap"===s){e<0&&D.push(z.negative);const t=24*b+Math.floor(Math.abs(y)/3600);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("min-elap"===s){e<0&&D.push(z.negative);const t=1440*b+Math.floor(Math.abs(y)/60);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("sec-elap"===s){e<0&&D.push(z.negative);const t=b*Je+Math.abs(y);D.push(String(Math.abs(t)).padStart(i.pad,"0"))}else if("b-year"===s)D.push(v+543);else if("b-year-short"===s){const e=(v+543)%100;D.push(e<10?"0":"",e)}}return D.join("")}const Ze=Le([{type:j,value:"@",raw:"@"}]);function We(e,t){for(let n=0;n<3;n++){const a=t[n];if(a){let t;if(a.condition){const n=a.condition[0],r=a.condition[1];"="===n?t=e===r:">"===n?t=e>r:"<"===n?t=e<r:">="===n?t=e>=r:"<="===n?t=e<=r:"<>"===n&&(t=e!==r)}else t=!0;if(t)return a}}}function Xe(e){return!!(e[0]&&e[0].percent||e[1]&&e[1].percent||e[2]&&e[2].percent||e[3]&&e[3].percent)}function qe(e){return!!(e[0]&&e[0].date||e[1]&&e[1].date||e[2]&&e[2].date||e[3]&&e[3].date)}function Qe(e){const[t,n,a,r]=e;return!(t&&!t.generated||n&&!n.generated||a&&!a.generated||!r||!r.text||r.generated)}const et={text:15,datetime:10.8,date:10.8,time:10.8,percent:10.6,currency:10.4,grouped:10.2,scientific:6,number:4,fraction:2,general:0,error:0},tt=[["DMY",1],["DM",2],["MY",3],["MDY",4],["MD",5],["hmsa",6],["hma",7],["hms",8],["hm",9]];const nt=[[p,/^General/i,0],[c,/^#/,0],[f,/^0/,0],[h,/^\?/,0],[g,/^\//,0],[_,/^;/,0],[j,/^@/,0],[k,/^\+/,0],[M,/^-/,0],[x,/^\./,0],[F,/^ /,0],[w,/^%/,0],[z,/^[1-9]/,0],[C,/^(?:B1|B2)/i,0],[S,/^B$/,0],[A,/^(?:[hH]+|[mM]+|[sS]+|[yY]+|[bB]+|[dD]+|[gG]+|e+)/,0],[I,/^(?:\[(h+|m+|s+)\])/i,1],[E,/^\[(<[=>]?|>=?|=)\s*(-?[.\d]+)\]/,[1,2]],[D,/^\[(DBNum[0-4]?\d)\]/i,1],[T,/^\[(NatNum[0-4]?\d)\]/i,1],[N,/^\[\$([^\]]+)\]/,1],[Y,/^\[(black|blue|cyan|green|magenta|red|white|yellow|color\s*\d+)\]/i,1],[O,/^\[([^\]]+)\]/,1],[P,/^(?:AM\/PM|am\/pm|A\/P)/,0],[R,/^\\(.)/,1],[L,/^"([^"]*?)"/,1],[U,/^_(\\.|.)/,1],[H,/^[Ee]([+-])/,1],[B,/^\*(\\.|.)/,1],[G,/^[()]/,0],[S,/^[EÈÉÊËèéêëĒēĔĕĖėĘęĚěȄȅȆȇȨȩNnÑñŃńŅņŇňǸǹ["*/\\_]/,0],[J,/^./,0]],at=e=>{const t=(e||"\0").charCodeAt(0);return 63===t||35===t||t>=48&&t<=57};function rt(e){let t=0;const n=[],a=[];for(;t<e.length;){const r=e.slice(t);let i=0;const s=/^(,+)(.)?/.exec(r);if(s){const r=s[1];i=r.length;const m=e[t-1]||"";let o=!1,d=!1;at(m)?(o=!0,d=!0):"."===m&&(d=!0);const l=s[2]||"";if(!o||l&&";"!==l||(o=!1),d&&at(l)&&(d=!1),o&&!d)n.push({type:b,value:",",raw:r});else if(!o&&d)n.push({type:y,value:",",raw:r});else if(o&&d){const e={type:y,value:",",raw:r};n.push(e),a.push(e)}else n.push({type:v,value:",",raw:r})}else{let e;for(const[t,a,s]of nt){const m=a.exec(r);if(m){e={type:t,value:Array.isArray(s)?s.map((e=>m[e])):m[s||0],raw:m[0]},n.push(e),i=m[0].length;break}}a.length&&at(e.raw)&&(a.forEach((e=>e.type=b)),a.length=0)}if(!i){const e=r[0];i=1,n.push({type:J,value:e,raw:e})}t+=i}return n}const it=e=>{const t=e.condition;t&&t[1]<0&&("<"===t[0]||"<="===t[0]||"="===t[0])||e.tokens.unshift({type:"minus",volatile:!0})},st=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n={};for(const t in e)Array.isArray(e[t])?n[t]=[...e[t]]:n[t]=e[t];return t&&n.tokens.unshift(t),n.generated=!0,n};const mt=Object.create({});function ot(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e||(e="General");let n=mt[e];if(!n)try{n=function(e){const t=[];let n,a=!1,r=null,i=0,s=!1,m=0,o=0,d=rt(e);do{var l;if(s=Le(d),(s.date||s.general)&&(s.int_pattern.length||s.frac_pattern.length||1!==s.scale||s.text))throw new Error("Illegal format");if(s.condition&&(o++,a=!0),s.text){if(r)throw new Error("Unexpected partition");r=s}s.locale&&(n=ne(s.locale)),t.push(s),i="break"===(null===(l=d[s.tokensUsed])||void 0===l?void 0:l.type)?1:0,d=d.slice(s.tokensUsed+i),m++}while(i&&m<4&&o<3);if(i)throw new Error("Unexpected partition");if(o>2)throw new Error("Unexpected condition");const u=t[3];if(u&&(u.int_pattern.length||u.frac_pattern.length||u.date))throw new Error("Unexpected partition");if(a){const e=t.length;if(1===e&&(t[1]=Le(rt("General")),t[1].generated=!0),e<3){const e=t[0],n=t[1];if(it(e),n.condition)it(n);else{const t=e.condition;("="===t[0]||t[1]>=0&&(">"===t[0]||">="===t[0]))&&n.tokens.unshift({type:"minus",volatile:!0})}}else t.forEach(it)}else{if(t.length<4&&r)for(let e=0,n=t.length;e<n;e++)t[e]===r&&t.splice(e,1);if(t.length<1&&r&&(t[0]=Le(rt("General")),t[0].generated=!0),t.length<2){const e={type:"minus",volatile:!0};t.push(st(t[0],e))}if(t.length<3&&t.push(st(t[0])),t.length<4)if(r)t.push(r);else{const e=Le(rt("@"));e.generated=!0,t.push(e)}t[0].condition=[">",0],t[1].condition=["<",0],t[2].condition=null}return{pattern:e,partitions:t,locale:n}}(e),mt[e]=n}catch(a){if(t)throw a;const r={tokens:[{type:"error"}],error:a.message};n={pattern:e,partitions:[r,r,r,r],error:a.message,locale:null}}return n}const dt=Object.freeze({AMPM:P,BREAK:_,CALENDAR:C,CHAR:J,COLOR:Y,COMMA:v,CONDITION:E,DATETIME:A,DBNUM:D,DIGIT:z,DURATION:I,ERROR:S,ESCAPED:R,EXP:H,FILL:B,GENERAL:p,GROUP:b,HASH:c,LOCALE:N,MINUS:M,MODIFIER:O,NATNUM:T,PAREN:G,PERCENT:w,PLUS:k,POINT:x,QMARK:h,SCALE:y,SKIP:U,SLASH:g,SPACE:F,STRING:L,TEXT:j,ZERO:f});exports.addLocale=ie,exports.dateFromSerial=function(e,t){let n=0|e;const a=xe*(e-n);let r=Me(a);a-r>.9999&&(r+=1,r===xe&&(r=0,n+=1));const i=r<0?xe+r:r,[s,m,o]=ke(e,0,t&&t.leap1900);return[s,m,o,Me(i/60/60)%60,Me(i/60)%60,Me(i)%60]},exports.dateToSerial=Fe,exports.dec2frac=ve,exports.format=function(e,t){var n;let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const r=Object.assign({},ge,a),i=ot(e,r.throws);return function(e,t,n){const a=t.partitions,r=ae(t.locale||n.locale),i=a[3]?a[3]:Ze;if("boolean"==typeof e&&(e=e?"TRUE":"FALSE"),null==e)return"";if("number"!=typeof e)return Ke(e,i,n,r);if(!isFinite(e)){const t=r||se;return isNaN(e)?t.nan:(e<0?t.negative:"")+t.infinity}const s=We(e,a);return s?Ke(e,s,n,r):n.overflow}(null!==(n=Fe(t,r))&&void 0!==n?n:t,i,r)},exports.formatColor=function(e,t,n){var a;const r=Object.assign({},ge,n),i=ot(e,r.throws);return function(e,t,n){const a=t.partitions;let r=a[3],i=null;return"number"==typeof e&&isFinite(e)&&(r=We(e,a)),r&&r.color&&(i=r.color),i&&"number"==typeof i&&n.indexColors&&(i=$[i-1]||"#000"),i}(null!==(a=Fe(t,r))&&void 0!==a?a:t,i,r)},exports.getFormatDateInfo=function(s){const m=ot(s,!1);return m.dateInfo||(m.dateInfo=function(s){const[m]=s;return{year:!!(m.date&e),month:!!(m.date&t),day:!!(m.date&n),hours:!!(m.date&a),minutes:!!(m.date&r),seconds:!!(m.date&i),clockType:12===m.clock?12:24}}(m.partitions)),m.dateInfo},exports.getFormatInfo=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=ot(e,!1);return n.info||(n.info=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const[a,r]=e,i=a.frac_max,s={type:"general",isDate:qe(e),isText:Qe(e),isPercent:Xe(e),maxDecimals:a.general?9:i,scale:null!==(t=a.scale)&&void 0!==t?t:1,color:0,parentheses:0,grouped:a.grouping?1:0},m=!s.isDate&&!s.isText&&!a.error&&a.tokens.some((e=>"string"===e.type&&(n?e.value===n:K.test(e.value))));let o="G",d=i>=0?Math.min(15,i):"",l="",u="";if(r&&r.color&&(u="-",s.color=1),a.parens&&(l="()",s.parentheses=1),m)o="C",s.type="currency";else if(a.error)s.type="error",s.maxDecimals=0;else if(s.isDate){let e=0,t=0,n="";a.tokens.forEach((a=>{const r=a.type;/^(b-)?year/.test(r)?(n+="Y",t++):r.startsWith("month")?(n+="M",t++):/^(week)?day/.test(r)?(n+="D",t++):"hour"!==r&&"min"!==r&&"sec"!==r&&"ampm"!==r||(n+=r[0],e++)})),s.type="date",t&&e?s.type="datetime":!t&&e&&(s.type="time");const r=tt.find((e=>n.startsWith(e[0])));o=r?"D":"G",d=r?r[1]:""}else s.isText?(o="G",s.type="text",d="",s.maxDecimals=0):a.general?(o="G",s.type="general",d=""):a.fractions?(o="G",s.type="fraction",d=""):a.exponential?(o="S",s.type="scientific"):s.isPercent?(o="P",s.type="percent"):a.grouping?(o=",",s.type="grouped"):(a.int_max||i)&&(o="F",s.type="number");return s.code=o+d+u+l,s.level=et[s.type],Object.freeze(s)}(n.partitions,null==t?void 0:t.currency)),n.info},exports.getLocale=ae,exports.isDateFormat=function(e){return qe(ot(e,!1).partitions)},exports.isPercentFormat=function(e){return Xe(ot(e,!1).partitions)},exports.isTextFormat=function(e){return Qe(ot(e,!1).partitions)},exports.isValidFormat=function(e){try{return ot(e,!0),!0}catch(e){return!1}},exports.parseBool=Ye,exports.parseDate=Te,exports.parseLocale=te,exports.parseNumber=Ee,exports.parseTime=Ne,exports.parseValue=function(e){var t,n,a;return null!==(t=null!==(n=null!==(a=Ee(e))&&void 0!==a?a:Te(e))&&void 0!==n?n:Ne(e))&&void 0!==t?t:Ye(e)},exports.round=be,exports.tokenTypes=dt,exports.tokenize=rt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
