{"version":3,"file":"numfmt.js","sources":["../lib/codeToLocale.js","../lib/locale.js","../lib/round.js","../lib/dec2frac.js","../lib/options.js","../lib/constants.js","../lib/parsePart.js","../lib/parsePattern.js","../lib/toYMD.js","../lib/serialDate.js","../lib/clamp.js","../lib/numdec.js","../lib/general.js","../lib/runPart.js","../lib/formatNumber.js","../lib/formatInfo.js","../lib/parseValue.js","../lib/index.js"],"sourcesContent":["/* eslint-disable indent, no-multi-spaces */\n// https://docs.microsoft.com/en-us/office/vba/api/office.msolanguageid\nexport default {\n   1078: 'af',    // Afrikaans\n   1052: 'sq',    // Albanian\n   1118: 'am',    // Amharic\n   5121: 'ar_DZ', // Arabic - Algeria\n  15361: 'ar_BH', // Arabic - Bahrain\n   3073: 'ar_EG', // Arabic - Egypt\n   2049: 'ar_IQ', // Arabic - Iraq\n  11265: 'ar_JO', // Arabic - Jordan\n  13313: 'ar_KW', // Arabic - Kuwait\n  12289: 'ar_LB', // Arabic - Lebanon\n   4097: 'ar_LY', // Arabic - Libya\n   6145: 'ar_MA', // Arabic - Morocco\n   8193: 'ar_OM', // Arabic - Oman\n  16385: 'ar_QA', // Arabic - Qatar\n   1025: 'ar_SA', // Arabic - Saudi Arabia\n  10241: 'ar_SY', // Arabic - Syria\n   7169: 'ar_TN', // Arabic - Tunisia\n  14337: 'ar_AE', // Arabic - United Arab Emirates\n   9217: 'ar_YE', // Arabic - Yemen\n   1067: 'hy',    // Armenian\n   1101: 'as',    // Assamese\n   2092: 'az_AZ', // Azeri - Cyrillic\n   1068: 'az_AZ', // Azeri - Latin\n   1069: 'eu',    // Basque\n   1059: 'be',    // Belarusian\n   2117: 'bn',    // Bengali - Bangladesh\n   1093: 'bn_IN', // Bengali - India\n   5146: 'bs',    // Bosnian\n   1026: 'bg',    // Bulgarian\n   1109: 'my',    // Burmese\n   1027: 'ca',    // Catalan\n   2052: 'zh_CN', // Chinese - China\n   3076: 'zh_HK', // Chinese - Hong Kong SAR\n   5124: 'zh_MO', // Chinese - Macau SAR\n   4100: 'zh_SG', // Chinese - Singapore\n   1028: 'zh_TW', // Chinese - Taiwan\n   1050: 'hr',    // Croatian\n   1029: 'cs',    // Czech\n   1030: 'da',    // Danish\n   1125: 'dv',    // Divehi; Dhivehi; Maldivian\n   2067: 'nl_BE', // Dutch - Belgium\n   1043: 'nl_NL', // Dutch - Netherlands\n   1126: 'bin',   // Edo\n   3081: 'en_AU', // English - Australia\n  10249: 'en_BZ', // English - Belize\n   4105: 'en_CA', // English - Canada\n   9225: 'en_CB', // English - Caribbean\n   2057: 'en_GB', // English - Great Britain\n  16393: 'en_IN', // English - India\n   6153: 'en_IE', // English - Ireland\n   8201: 'en_JM', // English - Jamaica\n   5129: 'en_NZ', // English - New Zealand\n  13321: 'en_PH', // English - Phillippines\n   7177: 'en_ZA', // English - Southern Africa\n  11273: 'en_TT', // English - Trinidad\n   1033: 'en_US', // English - United States\n  12297: 'en_ZW', // English - Zimbabwe\n   1061: 'et',    // Estonian\n   1071: 'mk',    // FYRO Macedonia\n   1080: 'fo',    // Faroese\n   1065: 'fa',    // Farsi - Persian\n   1124: 'fil',   // Filipino\n   1035: 'fi',    // Finnish\n   2060: 'fr_BE', // French - Belgium\n  11276: 'fr_CM', // French - Cameroon\n   3084: 'fr_CA', // French - Canada\n   9228: 'fr_CG', // French - Congo\n  12300: 'fr_CI', // French - Cote d'Ivoire\n   1036: 'fr_FR', // French - France\n   5132: 'fr_LU', // French - Luxembourg\n  13324: 'fr_ML', // French - Mali\n   6156: 'fr_MC', // French - Monaco\n  14348: 'fr_MA', // French - Morocco\n  10252: 'fr_SN', // French - Senegal\n   4108: 'fr_CH', // French - Switzerland\n   7180: 'fr',    // French - West Indies\n   1122: 'fy_NL', // Frisian - Netherlands\n   2108: 'gd_IE', // Gaelic - Ireland\n   1084: 'gd',    // Gaelic - Scotland\n   1110: 'gl',    // Galician\n   1079: 'ka',    // Georgian\n   3079: 'de_AT', // German - Austria\n   1031: 'de_DE', // German - Germany\n   5127: 'de_LI', // German - Liechtenstein\n   4103: 'de_LU', // German - Luxembourg\n   2055: 'de_CH', // German - Switzerland\n   1032: 'el',    // Greek\n   1140: 'gn',    // Guarani - Paraguay\n   1095: 'gu',    // Gujarati\n   1279: 'en',    // HID (Human Interface Device)\n   1037: 'he',    // Hebrew\n   1081: 'hi',    // Hindi\n   1038: 'hu',    // Hungarian\n   1039: 'is',    // Icelandic\n   1136: 'ig_NG', // Igbo - Nigeria\n   1057: 'id',    // Indonesian\n   1040: 'it_IT', // Italian - Italy\n   2064: 'it_CH', // Italian - Switzerland\n   1041: 'ja',    // Japanese\n   1099: 'kn',    // Kannada\n   1120: 'ks',    // Kashmiri\n   1087: 'kk',    // Kazakh\n   1107: 'km',    // Khmer\n   1111: 'kok',   // Konkani\n   1042: 'ko',    // Korean\n   1088: 'ky',    // Kyrgyz - Cyrillic\n   1108: 'lo',    // Lao\n   1142: 'la',    // Latin\n   1062: 'lv',    // Latvian\n   1063: 'lt',    // Lithuanian\n   2110: 'ms_BN', // Malay - Brunei\n   1086: 'ms_MY', // Malay - Malaysia\n   1100: 'ml',    // Malayalam\n   1082: 'mt',    // Maltese\n   1112: 'mni',   // Manipuri\n   1153: 'mi',    // Maori\n   1102: 'mr',    // Marathi\n   1104: 'mn',    // Mongolian\n   2128: 'mn',    // Mongolian\n   1121: 'ne',    // Nepali\n   1044: 'no_NO', // Norwegian - Bokml\n   2068: 'no_NO', // Norwegian - Nynorsk\n   1096: 'or',    // Oriya\n   1045: 'pl',    // Polish\n   1046: 'pt_BR', // Portuguese - Brazil\n   2070: 'pt_PT', // Portuguese - Portugal\n   1094: 'pa',    // Punjabi\n   1047: 'rm',    // Raeto-Romance\n   2072: 'ro_MO', // Romanian - Moldova\n   1048: 'ro_RO', // Romanian - Romania\n   1049: 'ru',    // Russian\n   2073: 'ru_MO', // Russian - Moldova\n   1083: 'se',    // Sami Lappish\n   1103: 'sa',    // Sanskrit\n   3098: 'sr_SP', // Serbian - Cyrillic\n   2074: 'sr_SP', // Serbian - Latin\n   1072: 'st',    // Sesotho (Sutu)\n   1074: 'tn',    // Setsuana\n   1113: 'sd',    // Sindhi\n   1115: 'si',    // Sinhala; Sinhalese\n   1051: 'sk',    // Slovak\n   1060: 'sl',    // Slovenian\n   1143: 'so',    // Somali\n   1070: 'sb',    // Sorbian\n  11274: 'es_AR', // Spanish - Argentina\n  16394: 'es_BO', // Spanish - Bolivia\n  13322: 'es_CL', // Spanish - Chile\n   9226: 'es_CO', // Spanish - Colombia\n   5130: 'es_CR', // Spanish - Costa Rica\n   7178: 'es_DO', // Spanish - Dominican Republic\n  12298: 'es_EC', // Spanish - Ecuador\n  17418: 'es_SV', // Spanish - El Salvador\n   4106: 'es_GT', // Spanish - Guatemala\n  18442: 'es_HN', // Spanish - Honduras\n   2058: 'es_MX', // Spanish - Mexico\n  19466: 'es_NI', // Spanish - Nicaragua\n   6154: 'es_PA', // Spanish - Panama\n  15370: 'es_PY', // Spanish - Paraguay\n  10250: 'es_PE', // Spanish - Peru\n  20490: 'es_PR', // Spanish - Puerto Rico\n   1034: 'es_ES', // Spanish - Spain (Traditional)\n  14346: 'es_UY', // Spanish - Uruguay\n   8202: 'es_VE', // Spanish - Venezuela\n   1089: 'sw',    // Swahili\n   2077: 'sv_FI', // Swedish - Finland\n   1053: 'sv_SE', // Swedish - Sweden\n   1114: 'syc',   // Syriac\n   1064: 'tg',    // Tajik\n   1097: 'ta',    // Tamil\n   1092: 'tt',    // Tatar\n   1098: 'te',    // Telugu\n   1054: 'th',    // Thai\n   1105: 'bo',    // Tibetan\n   1073: 'ts',    // Tsonga\n   1055: 'tr',    // Turkish\n   1090: 'tk',    // Turkmen\n   1058: 'uk',    // Ukrainian\n   1056: 'ur',    // Urdu\n   2115: 'uz_UZ', // Uzbek - Cyrillic\n   1091: 'uz_UZ', // Uzbek - Latin\n   1075: 've',    // Venda\n   1066: 'vi',    // Vietnamese\n   1106: 'cy',    // Welsh\n   1076: 'xh',    // Xhosa\n   1085: 'yi',    // Yiddish\n   1077: 'zu'     // Zulu\n};\n","import codeToLocale from './codeToLocale.js';\n\nconst re_locale = /^([a-z\\d]+)(?:[_-]([a-z\\d]+))?(?:\\.([a-z\\d]+))?(?:@([a-z\\d]+))?$/i;\nconst locales = {};\n\nconst defaultData = {\n  group: ' ',\n  decimal: '.',\n  positive: '+',\n  negative: '-',\n  percent: '%',\n  exponent: 'E',\n  nan: 'NaN',\n  infinity: '∞',\n  ampm: [ 'AM', 'PM' ],\n  mmmm6: [ 'Muharram', 'Safar', 'Rabiʻ I', 'Rabiʻ II', 'Jumada I', 'Jumada II', 'Rajab', 'Shaʻban', 'Ramadan', 'Shawwal', 'Dhuʻl-Qiʻdah', 'Dhuʻl-Hijjah' ],\n  mmm6: [ 'Muh.', 'Saf.', 'Rab. I', 'Rab. II', 'Jum. I', 'Jum. II', 'Raj.', 'Sha.', 'Ram.', 'Shaw.', 'Dhuʻl-Q.', 'Dhuʻl-H.' ],\n  mmmm: [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ],\n  mmm: [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],\n  dddd: [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ],\n  ddd: [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ]\n};\n\n// Locale: [language[_territory][.codeset][@modifier]]\nexport function parseLocale (l4e) {\n  const lm = re_locale.exec(l4e);\n  if (!lm) {\n    throw new SyntaxError(`Malformed locale: ${l4e}`);\n  }\n  return {\n    lang: lm[1] + (lm[2] ? '_' + lm[2] : ''),\n    language: lm[1],\n    territory: lm[2] || '',\n    codeset: lm[3] || '',\n    modifier: lm[4] || ''\n  };\n}\n\n// MS code format is: aabbcccc [$-aabbcccc]\n// aa = numerical style (optional, 00 if absent)\n// bb = calendar format (optional, 00 if absent)\n// cc = language code\nexport function resolveLocale (l4e) {\n  if (typeof l4e === 'number') {\n    return codeToLocale[l4e & 0xffff] || null;\n  }\n  const wincode = parseInt(l4e, 16);\n  if (isFinite(wincode) && codeToLocale[wincode & 0xffff]) {\n    return codeToLocale[wincode & 0xffff] || null;\n  }\n  if (re_locale.test(l4e)) {\n    return l4e;\n  }\n  return null;\n}\n\n// return a locale object given a language tag tag\nexport function getLocale (l4e) {\n  const tag = resolveLocale(l4e);\n  let obj = null;\n  if (tag) {\n    const c = parseLocale(tag);\n    obj = locales[c.lang] || locales[c.language] || null;\n  }\n  return obj;\n}\n\n// creates a new locale options object\nexport function createLocale (data) {\n  return Object.assign({}, defaultData, data);\n}\n\n// adds a locale object to locale collection\nexport function addLocale (options, id) {\n  // parse language tag\n  const c = typeof id === 'object' ? id : parseLocale(id);\n  // add the language\n  locales[c.lang] = createLocale(options);\n  // if \"xx_YY\" is added also create \"xx\" if it is missing\n  if (c.language !== c.lang && !locales[c.language]) {\n    locales[c.language] = createLocale(options);\n  }\n  return locales[c.lang];\n}\n\nexport const defaultLocale = createLocale({ group: ',' });\ndefaultLocale.isDefault = true;\n\naddLocale({\n  group: ',',\n  ampm: [ '上午', '下午' ],\n  mmmm: [ '一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月' ],\n  mmm: [ '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月' ],\n  dddd: [ '星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六' ],\n  ddd: [ '周日', '周一', '周二', '周三', '周四', '周五', '周六' ]\n}, 'zh_CN');\naddLocale({\n  group: ',',\n  nan: '非數值',\n  ampm: [ '上午', '下午' ],\n  mmmm: [ '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月' ],\n  mmm: [ '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月' ],\n  dddd: [ '星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六' ],\n  ddd: [ '週日', '週一', '週二', '週三', '週四', '週五', '週六' ]\n}, 'zh_TW');\naddLocale({\n  group: ',',\n  ampm: [ '午前', '午後' ],\n  mmmm: [ '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月' ],\n  mmm: [ '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月' ],\n  dddd: [ '日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日' ],\n  ddd: [ '日', '月', '火', '水', '木', '金', '土' ]\n}, 'ja');\naddLocale({\n  group: ',',\n  ampm: [ '오전', '오후' ],\n  mmmm: [ '1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월' ],\n  mmm: [ '1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월' ],\n  dddd: [ '일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일' ],\n  ddd: [ '일', '월', '화', '수', '목', '금', '토' ]\n}, 'ko');\naddLocale({\n  group: ',',\n  ampm: [ 'ก่อนเที่ยง', 'หลังเที่ยง' ],\n  mmmm: [ 'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม' ],\n  mmm: [ 'ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.' ],\n  dddd: [ 'วันอาทิตย์', 'วันจันทร์', 'วันอังคาร', 'วันพุธ', 'วันพฤหัสบดี', 'วันศุกร์', 'วันเสาร์' ],\n  ddd: [ 'อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.' ]\n}, 'th');\naddLocale({\n  decimal: ',',\n  ampm: [ 'dop.', 'odp.' ],\n  mmmm: [ 'ledna', 'února', 'března', 'dubna', 'května', 'června', 'července', 'srpna', 'září', 'října', 'listopadu', 'prosince' ],\n  mmm: [ 'led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro' ],\n  dddd: [ 'neděle', 'pondělí', 'úterý', 'středa', 'čtvrtek', 'pátek', 'sobota' ],\n  ddd: [ 'ne', 'po', 'út', 'st', 'čt', 'pá', 'so' ]\n}, 'cs');\naddLocale({\n  group: '.',\n  decimal: ',',\n  mmmm: [ 'januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december' ],\n  mmm: [ 'jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.' ],\n  dddd: [ 'søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag' ],\n  ddd: [ 'søn.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'lør.' ]\n}, 'da');\naddLocale({\n  group: '.',\n  decimal: ',',\n  ampm: [ 'a.m.', 'p.m.' ],\n  mmmm: [ 'januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december' ],\n  mmm: [ 'jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.' ],\n  dddd: [ 'zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag' ],\n  ddd: [ 'zo', 'ma', 'di', 'wo', 'do', 'vr', 'za' ]\n}, 'nl');\naddLocale({ group: ',' }, 'en');\naddLocale({\n  decimal: ',',\n  nan: 'epäluku',\n  ampm: [ 'ap.', 'ip.' ],\n  mmmm: [ 'tammikuuta', 'helmikuuta', 'maaliskuuta', 'huhtikuuta', 'toukokuuta', 'kesäkuuta', 'heinäkuuta', 'elokuuta', 'syyskuuta', 'lokakuuta', 'marraskuuta', 'joulukuuta' ],\n  mmm: [ 'tammik.', 'helmik.', 'maalisk.', 'huhtik.', 'toukok.', 'kesäk.', 'heinäk.', 'elok.', 'syysk.', 'lokak.', 'marrask.', 'jouluk.' ],\n  dddd: [ 'sunnuntaina', 'maanantaina', 'tiistaina', 'keskiviikkona', 'torstaina', 'perjantaina', 'lauantaina' ],\n  ddd: [ 'su', 'ma', 'ti', 'ke', 'to', 'pe', 'la' ]\n}, 'fi');\naddLocale({\n  group: ' ',\n  decimal: ',',\n  mmmm: [ 'janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre' ],\n  mmm: [ 'janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.' ],\n  dddd: [ 'dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi' ],\n  ddd: [ 'dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.' ]\n}, 'fr');\naddLocale({\n  group: '.',\n  decimal: ',',\n  mmmm: [ 'Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember' ],\n  mmm: [ 'Jan.', 'Feb.', 'März', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sept.', 'Okt.', 'Nov.', 'Dez.' ],\n  dddd: [ 'Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag' ],\n  ddd: [ 'So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.' ]\n}, 'de');\naddLocale({\n  group: '.',\n  decimal: ',',\n  ampm: [ 'π.μ.', 'μ.μ.' ],\n  mmmm: [ 'Ιανουαρίου', 'Φεβρουαρίου', 'Μαρτίου', 'Απριλίου', 'Μαΐου', 'Ιουνίου', 'Ιουλίου', 'Αυγούστου', 'Σεπτεμβρίου', 'Οκτωβρίου', 'Νοεμβρίου', 'Δεκεμβρίου' ],\n  mmm: [ 'Ιαν', 'Φεβ', 'Μαρ', 'Απρ', 'Μαΐ', 'Ιουν', 'Ιουλ', 'Αυγ', 'Σεπ', 'Οκτ', 'Νοε', 'Δεκ' ],\n  dddd: [ 'Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο' ],\n  ddd: [ 'Κυρ', 'Δευ', 'Τρί', 'Τετ', 'Πέμ', 'Παρ', 'Σάβ' ]\n}, 'el');\naddLocale({\n  decimal: ',',\n  ampm: [ 'de.', 'du.' ],\n  mmmm: [ 'január', 'február', 'március', 'április', 'május', 'június', 'július', 'augusztus', 'szeptember', 'október', 'november', 'december' ],\n  mmm: [ 'jan.', 'febr.', 'márc.', 'ápr.', 'máj.', 'jún.', 'júl.', 'aug.', 'szept.', 'okt.', 'nov.', 'dec.' ],\n  dddd: [ 'vasárnap', 'hétfő', 'kedd', 'szerda', 'csütörtök', 'péntek', 'szombat' ],\n  ddd: [ 'V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo' ]\n}, 'hu');\naddLocale({\n  group: '.',\n  decimal: ',',\n  ampm: [ 'f.h.', 'e.h.' ],\n  mmmm: [ 'janúar', 'febrúar', 'mars', 'apríl', 'maí', 'júní', 'júlí', 'ágúst', 'september', 'október', 'nóvember', 'desember' ],\n  mmm: [ 'jan.', 'feb.', 'mar.', 'apr.', 'maí', 'jún.', 'júl.', 'ágú.', 'sep.', 'okt.', 'nóv.', 'des.' ],\n  dddd: [ 'sunnudagur', 'mánudagur', 'þriðjudagur', 'miðvikudagur', 'fimmtudagur', 'föstudagur', 'laugardagur' ],\n  ddd: [ 'sun.', 'mán.', 'þri.', 'mið.', 'fim.', 'fös.', 'lau.' ]\n}, 'is');\naddLocale({\n  group: '.',\n  decimal: ',',\n  mmmm: [ 'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember' ],\n  mmm: [ 'Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des' ],\n  dddd: [ 'Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu' ],\n  ddd: [ 'Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab' ]\n}, 'id');\naddLocale({\n  group: '.',\n  decimal: ',',\n  mmmm: [ 'gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre' ],\n  mmm: [ 'gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic' ],\n  dddd: [ 'domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato' ],\n  ddd: [ 'dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab' ]\n}, 'it');\naddLocale({\n  decimal: ',',\n  ampm: [ 'a.m.', 'p.m.' ],\n  mmmm: [ 'januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember' ],\n  mmm: [ 'jan.', 'feb.', 'mar.', 'apr.', 'mai', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'des.' ],\n  dddd: [ 'søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag' ],\n  ddd: [ 'søn.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'lør.' ]\n}, 'nb');\naddLocale({\n  decimal: ',',\n  mmmm: [ 'stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia' ],\n  mmm: [ 'sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru' ],\n  dddd: [ 'niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota' ],\n  ddd: [ 'niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.' ]\n}, 'pl');\naddLocale({\n  group: '.',\n  decimal: ',',\n  mmmm: [ 'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro' ],\n  mmm: [ 'jan.', 'fev.', 'mar.', 'abr.', 'mai.', 'jun.', 'jul.', 'ago.', 'set.', 'out.', 'nov.', 'dez.' ],\n  dddd: [ 'domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado' ],\n  ddd: [ 'dom.', 'seg.', 'ter.', 'qua.', 'qui.', 'sex.', 'sáb.' ]\n}, 'pt');\naddLocale({\n  decimal: ',',\n  nan: 'не число',\n  mmmm: [ 'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря' ],\n  mmm: [ 'янв.', 'февр.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.' ],\n  dddd: [ 'воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота' ],\n  ddd: [ 'вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб' ]\n}, 'ru');\naddLocale({\n  decimal: ',',\n  mmmm: [ 'januára', 'februára', 'marca', 'apríla', 'mája', 'júna', 'júla', 'augusta', 'septembra', 'októbra', 'novembra', 'decembra' ],\n  mmm: [ 'jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec' ],\n  dddd: [ 'nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota' ],\n  ddd: [ 'ne', 'po', 'ut', 'st', 'št', 'pi', 'so' ]\n}, 'sk');\naddLocale({\n  group: '.',\n  decimal: ',',\n  ampm: [ 'a. m.', 'p. m.' ],\n  mmmm: [ 'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre' ],\n  mmm: [ 'ene.', 'feb.', 'mar.', 'abr.', 'may.', 'jun.', 'jul.', 'ago.', 'sept.', 'oct.', 'nov.', 'dic.' ],\n  dddd: [ 'domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado' ],\n  ddd: [ 'dom.', 'lun.', 'mar.', 'mié.', 'jue.', 'vie.', 'sáb.' ]\n}, 'es');\naddLocale({\n  decimal: ',',\n  ampm: [ 'fm', 'em' ],\n  mmmm: [ 'januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december' ],\n  mmm: [ 'jan.', 'feb.', 'mars', 'apr.', 'maj', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.' ],\n  dddd: [ 'söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag' ],\n  ddd: [ 'sön', 'mån', 'tis', 'ons', 'tors', 'fre', 'lör' ]\n}, 'sv');\naddLocale({\n  group: '.',\n  decimal: ',',\n  ampm: [ 'ÖÖ', 'ÖS' ],\n  mmmm: [ 'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık' ],\n  mmm: [ 'Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara' ],\n  dddd: [ 'Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi' ],\n  ddd: [ 'Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt' ]\n}, 'tr');\n\n","// Excel uses symmetric arithmetic rounding\nexport default function round (value, places) {\n  if (typeof value !== 'number') {\n    return value;\n  }\n  if (value < 0) {\n    return -round(-value, places);\n  }\n  if (places) {\n    const p = 10 ** (places || 0) || 1;\n    return round(value * p, 0) / p;\n  }\n  return Math.round(value);\n}\n","// http://homepage.smc.edu/kennedy_john/DEC2FRAC.PDF\nconst PRECISION = 1e-10;\n\nexport default function dec2frac (val, maxdigits_num, maxdigits_de) {\n  const sign = (val < 0) ? -1 : 1;\n  const maxdigits_n = 10 ** (maxdigits_num || 2);\n  const maxdigits_d = 10 ** (maxdigits_de || 2);\n  let z = Math.abs(val);\n  let last_d = 0;\n  let last_n = 0;\n  let curr_n = 0;\n  let curr_d = 1;\n  let tmp;\n  let r;\n  val = z;\n  if (val % 1 === 0) {\n    // handles exact integers including 0\n    r = [ val * sign, 1 ];\n  }\n  else if (val < 1e-19) {\n    r = [ sign, 1e+19 ];\n  }\n  else if (val > 1e+19) {\n    r = [ 1e+19 * sign, 1 ];\n  }\n  else {\n    do {\n      z = 1 / (z - Math.floor(z));\n      tmp = curr_d;\n      curr_d = (curr_d * Math.floor(z)) + last_d;\n      last_d = tmp;\n      last_n = curr_n;\n      curr_n = Math.floor(val * curr_d + 0.5); // round\n      if (curr_n >= maxdigits_n || curr_d >= maxdigits_d) {\n        return [ sign * last_n, last_d ];\n      }\n    }\n    while (Math.abs(val - (curr_n / curr_d)) >= PRECISION && z !== Math.floor(z));\n    r = [ sign * curr_n, curr_d ];\n  }\n  return r;\n}\n","const defaultOptions = {\n  // Overflow error string\n  overflow: '######', // dateErrorThrow needs to be off! [prev in locale]\n  // Should it throw when there is an overflow error?\n  dateErrorThrows: false,\n  // Should it emit a number is an overflow error? (Sheets does this)\n  dateErrorNumber: true, // dateErrorThrow needs to be off!\n  // Sheets mode (see #3)\n  dateSpanLarge: true,\n  // Simulate the Lotus 1-2-3 leap year bug\n  leap1900: true,\n  // Emit regular vs. non-breaking spaces\n  nbsp: true,\n  // Robust/throw mode\n  throws: true,\n  // What is emitted when robust mode fails to parse (###### currently)\n  invalid: '######',\n  // Locale\n  locale: '',\n  // Don't adjust dates to UTC when converting them to serial time\n  ignoreTimezone: false\n};\n\nconst globalOptions = Object.assign({}, defaultOptions);\n\nexport default function options (opts) {\n  // passing in a null will reset to defaults\n  if (opts === null) {\n    opts = defaultOptions;\n  }\n  if (opts) {\n    for (const key in opts) {\n      if (key in defaultOptions) {\n        const value = opts[key];\n        if (value == null) { // set back to default\n          globalOptions[key] = defaultOptions[key];\n        }\n        else {\n          globalOptions[key] = value;\n        }\n      }\n    }\n  }\n  return { ...globalOptions };\n}\n","export const u_YEAR = 2;\nexport const u_MONTH = 2 ** 2;\nexport const u_DAY = 2 ** 3;\nexport const u_HOUR = 2 ** 4;\nexport const u_MIN = 2 ** 5;\nexport const u_SEC = 2 ** 6;\nexport const u_DSEC = 2 ** 7; // decisecond\nexport const u_CSEC = 2 ** 8; // centisecond\nexport const u_MSEC = 2 ** 9; // millisecond\n\n// Excel date boundaries\nexport const MIN_S_DATE = 0;\nexport const MAX_S_DATE = 2958466;\n// Google date boundaries\nexport const MIN_L_DATE = -694324;\nexport const MAX_L_DATE = 35830291;\n\n// if more calendars are added, they should conform to MS CALID identifiers\n// https://docs.microsoft.com/en-us/windows/win32/intl/calendar-identifiers\nexport const EPOCH_1904 = -1;\nexport const EPOCH_1900 = 1;\nexport const EPOCH_1317 = 6;\n\nexport const _numchars = {\n  '#': '',\n  '0': '0',\n  '?': '\\u00a0'\n};\n\nexport const _sp_chars = {\n  '@': 'text',\n  '-': 'minus',\n  '+': 'plus'\n};\n\nexport const indexColors = [\n  '#000', '#FFF', '#F00', '#0F0', '#00F', '#FF0', '#F0F', '#0FF', '#000', '#FFF',\n  '#F00', '#0F0', '#00F', '#FF0', '#F0F', '#0FF', '#800', '#080', '#008', '#880',\n  '#808', '#088', '#CCC', '#888', '#99F', '#936', '#FFC', '#CFF', '#606', '#F88',\n  '#06C', '#CCF', '#008', '#F0F', '#FF0', '#0FF', '#808', '#800', '#088', '#00F',\n  '#0CF', '#CFF', '#CFC', '#FF9', '#9CF', '#F9C', '#C9F', '#FC9', '#36F', '#3CC',\n  '#9C0', '#FC0'\n];\n","import { resolveLocale } from './locale.js';\nimport {\n  u_YEAR, u_MONTH, u_DAY, u_HOUR, u_MIN, u_SEC, u_DSEC, u_CSEC, u_MSEC,\n  EPOCH_1900, EPOCH_1317,\n  _numchars, _sp_chars,\n  indexColors\n} from './constants.js';\n\nfunction minMaxPad (str, part, prefix) {\n  part[prefix + '_max'] = str.length;\n  part[prefix + '_min'] = str.replace(/#/g, '').length;\n  return part;\n}\n\nconst _pattcache = {};\nfunction patternToPadding (ss) {\n  if (!(ss in _pattcache)) {\n    const nch = [];\n    const chars = ss\n      .replace(/^[#,]+/, '')\n      .replace(/[1-9]\\d*/g, m => '?'.repeat(m.length));\n    for (let i = 0; i < chars.length; i++) {\n      const c = chars.charAt(i);\n      nch[i] = (c in _numchars) ? _numchars[c] : c;\n    }\n    _pattcache[ss] = nch.join('');\n  }\n  return _pattcache[ss];\n}\n\nfunction add (s, tokens) {\n  // allow adding string tokens without wrapping\n  if (typeof s === 'string') {\n    s = s.replace(/ /g, _numchars['?']);\n    s = { type: 'string', value: s };\n  }\n  tokens.push(s);\n}\n\nexport function parsePart (pattern) {\n  const tokens = [];\n  const part = {\n    scale: 1,\n    percent: false,\n    text: false,\n    date: 0,\n    date_eval: false,\n    date_system: null,\n    sec_decimals: 0,\n    general: false,\n    clock: 24,\n    int_pattern: [],\n    frac_pattern: [],\n    man_pattern: [],\n    den_pattern: [],\n    num_pattern: [],\n    tokens: tokens\n  };\n  let s = (pattern + '');\n  let current_pattern = 'int';\n  let part_over = false;\n  let last_number_chunk = null;\n  const date_chunks = [];\n  let m;\n  let last;\n  let have_locale = false;\n\n  while (s && !part_over) {\n    if ((m = /^General/i.exec(s))) {\n      part.general = true;\n      add({ type: 'general' }, tokens);\n    }\n\n    // new partition\n    else if (\n      (current_pattern === 'int' && (m = /^[#?0]+(?:,[#?0]+)*/.exec(s))) ||\n      (current_pattern === 'den' && (m = /^[#?\\d]+/.exec(s))) ||\n      (m = /^[#?0]+/.exec(s))\n    ) {\n      part[current_pattern + '_pattern'].push(m[0]);\n      last_number_chunk = { type: current_pattern, num: m[0] };\n      add(last_number_chunk, tokens);\n    }\n\n    // vulgar fractions\n    else if ((m = /^\\//.exec(s)) && part[current_pattern + '_pattern'].length) {\n      if (!last_number_chunk) { // need to have a numerator present\n        throw new SyntaxError(`Missing a numerator in pattern ${pattern}`);\n      }\n      part.fractions = true;\n      // ... we just passed the numerator - correct that item\n      part.num_pattern.push(part[current_pattern + '_pattern'].pop());\n      last_number_chunk.type = 'num';\n      // next up... the denominator\n      current_pattern = 'den';\n      add({ type: 'div' }, tokens);\n    }\n\n    else if ((m = /^,+/.exec(s))) {\n      // decimal scaling\n      // * must directly follow a \"number character\" [#0?] and\n      // * must not be followed by a number character\n      const followed_by_num = (s.charAt(1) in _numchars);\n      const following_num = (last.slice(-1) in _numchars);\n      if (following_num && (m[0].length > 1 || !followed_by_num)) {\n        part.scale = 0.001 ** m[0].length;\n      }\n      else {\n        // regular comma\n        add(m[0], tokens);\n      }\n    }\n\n    else if ((m = /^;/.exec(s))) {\n      part_over = true;\n      break; // leave the \";\" hanging\n    }\n\n    // handlers\n    else if ((m = /^[@+-]/.exec(s))) {\n      if (m[0] === '@') { part.text = true; }\n      add({ type: _sp_chars[m[0]] }, tokens);\n    }\n\n    // [h] [m] [s]\n    else if ((m = /^(?:\\[(h+|m+|s+)\\])/i.exec(s))) {\n      const token = m[1].toLowerCase();\n      const tok = token[0];\n      const bit = { type: '', size: 0, date: 1, raw: m[0], pad: token.length };\n      if (tok === 'h') {\n        bit.size = u_HOUR;\n        bit.type = 'hour-elap';\n      }\n      else if (tok === 'm') {\n        bit.size = u_MIN;\n        bit.type = 'min-elap';\n      }\n      else {\n        bit.size = u_SEC;\n        bit.type = 'sec-elap';\n      }\n      // signal date calc and track smallest needed unit\n      part.date = part.date | bit.size;\n      date_chunks.push(bit);\n      add(bit, tokens);\n    }\n\n    // Use Hijri calendar system\n    else if ((m = /^(?:B2)/i.exec(s))) {\n      // signal date system (ignored if defined with [$-xxx])\n      if (!have_locale) {\n        // TODO: B2 does more than this, it switches locale to [$-060401] (ar) which affects display (RTL)\n        part.date_system = EPOCH_1317;\n      }\n    }\n    // Use Gregorian calendar system\n    else if ((m = /^(?:B1)/i.exec(s))) {\n      // signal date system (ignored if defined with [$-xxx])\n      if (!have_locale) {\n        part.date_system = EPOCH_1900;\n      }\n    }\n\n    // hh:mm:ss YYYY-MM-DD\n    else if ((m = /^(?:([hHmMsSyYbBdDegG])\\1*)/.exec(s))) {\n      // Excel is \"mostly\" case insensitive here but checks the last used date token\n      // if it was s or h, minutes is used – same is true if we hit m or s, and last is m\n      // m and mm are spurious, mmm is always month\n      const bit = { type: '', size: 0, date: 1, raw: m[0] };\n      const token = m[0].toLowerCase();\n      const tok = token[0];\n\n      if (token === 'y' || token === 'yy') {\n        bit.size = u_YEAR;\n        bit.type = 'year-short';\n      }\n      else if (tok === 'y' || tok === 'e') {\n        bit.size = u_YEAR;\n        bit.type = 'year';\n      }\n      else if (token === 'b' || token === 'bb') {\n        bit.size = u_YEAR;\n        bit.type = 'b-year-short';\n      }\n      else if (tok === 'b') {\n        bit.size = u_YEAR;\n        bit.type = 'b-year';\n      }\n      else if (token === 'd' || token === 'dd') {\n        bit.size = u_DAY;\n        bit.type = 'day';\n        bit.pad = /dd/.test(token);\n      }\n      else if (token === 'ddd') {\n        bit.size = u_DAY;\n        bit.type = 'weekday-short';\n      }\n      else if (tok === 'd') {\n        bit.size = u_DAY;\n        bit.type = 'weekday';\n      }\n      else if (tok === 'h') {\n        bit.size = u_HOUR;\n        bit.type = 'hour';\n        bit.pad = /hh/i.test(token);\n      }\n      else if (tok === 'm') {\n        if (token.length === 3) {\n          bit.size = u_MONTH;\n          bit.type = 'monthname-short';\n        }\n        else if (token.length === 5) {\n          bit.size = u_MONTH;\n          bit.type = 'monthname-single';\n        }\n        else if (token.length >= 4) {\n          bit.size = u_MONTH;\n          bit.type = 'monthname';\n        }\n        // m or mm can be either minute or month based on context\n        const last_date_chunk = date_chunks[date_chunks.length - 1];\n        if (!bit.type && last_date_chunk &&\n            !last_date_chunk.used &&\n            (last_date_chunk.size & (u_HOUR | u_SEC))) {\n          // if this token follows hour or second, it is a minute\n          last_date_chunk.used = true;\n          bit.size = u_MIN;\n          bit.type = 'min';\n          bit.pad = /mm/.test(token);\n        }\n        // if we still don't know, we treat as a month\n        // and defer, a later 'sec' token may switch it\n        if (!bit.type) {\n          bit.size = u_MONTH;\n          bit.type = 'month';\n          bit.pad = /mm/.test(token);\n          bit.indeterminate = true;\n        }\n      }\n      else if (tok === 's') {\n        bit.size = u_SEC;\n        bit.type = 'sec';\n        bit.pad = /ss/.test(token);\n        // if last date chunk was m, flag this used\n        const last_date_chunk = date_chunks[date_chunks.length - 1];\n        if (last_date_chunk && last_date_chunk.size & u_MIN) {\n          bit.used = true;\n        }\n        // if last date chunk is undecided, we know that it is a minute\n        else if (last_date_chunk && last_date_chunk.indeterminate) {\n          delete last_date_chunk.indeterminate;\n          last_date_chunk.size = u_MIN;\n          last_date_chunk.type = 'min';\n          bit.used = true;\n        }\n      }\n      else if (tok === 'g') {\n        // FIXME: Don't know what this does? (yet!)\n      }\n      // signal date calc and track smallest needed unit\n      part.date = part.date | bit.size;\n      part.date_eval = true;\n      date_chunks.push(bit);\n      add(bit, tokens);\n    }\n    // AM/PM\n    // See: https://github.com/SheetJS/sheetjs/issues/676\n    else if ((m = /^(?:AM\\/PM|am\\/pm|A\\/P)/.exec(s))) {\n      part.clock = 12;\n      // TEST: size is here is just a guess, can possibly detect this by rounding?\n      part.date = part.date | u_HOUR;\n      part.date_eval = true;\n      add({ type: 'am', short: m[0] === 'A/P' }, tokens);\n    }\n    // Note: In locales where decimal symbol is set to \",\" Excel expects that rather than \".\"\n    // .0 .00 .000\n    else if (part.date && (m = /^\\.0{1,3}/i.exec(s))) {\n      const dec = m[0].length - 1;\n      const size = [ u_SEC, u_DSEC, u_CSEC, u_MSEC ][dec];\n      part.date = part.date | size;\n      part.date_eval = true;\n      part.sec_decimals = Math.max(part.sec_decimals, dec);\n      add({\n        type: 'subsec',\n        size: size,\n        decimals: dec,\n        date: 1,\n        raw: m[0]\n      }, tokens);\n    }\n\n    // escaped character, string\n    else if ((m = /^\\\\(.)/.exec(s)) || (m = /^\"([^\"]*?)\"/.exec(s))) {\n      add(m[1], tokens);\n    }\n\n    // condition\n    else if ((m = /^\\[(<[=>]?|>=?|=)\\s*(-?[.\\d]+)\\]/.exec(s))) {\n      part.condition = [ m[1], parseFloat(m[2], 10) ]; // [ operator, operand ]\n    }\n\n    // locale code -- we allow std. \"en-US\" style codes\n    // https://stackoverflow.com/questions/54134729/what-does-the-130000-in-excel-locale-code-130000-mean/54540455#54540455\n    else if ((m = /^\\[\\$([^\\]]+)\\]/.exec(s))) {\n      const bits = m[1].split('-');\n      const code = bits.length < 2 ? '' : bits[bits.length - 1];\n\n      const currency = bits[0];\n      if (currency) {\n        add(currency, tokens);\n      }\n\n      const l4e = resolveLocale(code);\n      if (l4e) { part.locale = l4e; }\n      const wincode = parseInt(code, 16);\n      if (isFinite(wincode) && (wincode & 0xff0000)) {\n        const cal = (wincode >> 16) & 0xff;\n        // only Hijri is supported atm.\n        if (cal === 6) { part.date_system = EPOCH_1317; }\n      }\n\n      have_locale = true; // ignore any B2 & B1 tokens\n    }\n\n    // color\n    else if ((m = /^\\[(black|blue|cyan|green|magenta|red|white|yellow|color\\s*(\\d+))\\]/i.exec(s))) {\n      part.color = m[2] ? (indexColors[parseInt(m[2], 10)] || '#000') : m[1].toLowerCase();\n    }\n\n    // WTF\n    else if ((m = /^\\[(DBNum1|ENG|HIJ|JPN|TWN)\\]/i.exec(s))) {\n      // ...\n    }\n\n    // percentage\n    else if ((m = /^%/.exec(s))) {\n      part.scale = 100;\n      part.percent = true;\n      add('%', tokens);\n    }\n\n    // skip width\n    else if ((m = /^_(\\\\.|.)/.exec(s))) {\n      // UNSUPPORTED: This does what Excel's TEXT function does in this case: Emits a space.\n      // It might be worth considering emitting U+200B (zero width space) for the most common pattern, \"* \".\n      // That way a recipent of the string might still be able to make the spacing work by splitting the number?\n      add(' ', tokens);\n    }\n\n    // decimal fraction\n    else if ((m = /^\\./.exec(s))) {\n      add({ type: 'point', value: m[0] }, tokens);\n      part.dec_fractions = true;\n      current_pattern = 'frac';\n    }\n\n    // exponent\n    else if ((m = /^[Ee]([+-]?|(?=[0#?]))/.exec(s))) {\n      // Exponent pattern requires symbol to directly follow \"E\" but the\n      // signature symbol, however, prefixes the first digit of the mantissa\n      part.exponential = true;\n      part.exp_plus = m[1] === '+';\n      current_pattern = 'man';\n      add({ type: 'exp', plus: (m[1] === '+') }, tokens);\n    }\n\n    // fill space with next char\n    else if ((m = /^\\*(\\\\.|.)/.exec(s))) {\n      // UNSUPPORTED: This does what Excel's TEXT function does in this case: Emits nothing.\n    }\n\n    // characters that throw ... because reasons?\n    // Excel also throws on ÈÉÊËèéêëĒēĔĕĖėĘęĚěȄȅȆȇȨȩNnÑñŃńŅņŇňǸǹ...\n    // but there is limited point in replicating that behaviour\n    else if ((m = /^[BENn[]/.exec(s))) {\n      throw new SyntaxError(\n        `Unexpected char ${s.charAt(0)} in pattern ${pattern}`\n      );\n    }\n\n    // characters are generally allowed to pass directly through\n    else {\n      if (s[0] === '(') { part.parens = true; }\n      m = [ s[0] ];\n      add(m[0], tokens);\n    }\n\n    // advance parser\n    last = m[0];\n    s = s.slice(m ? m[0].length : 1);\n  }\n  part.pattern = pattern.slice(0, pattern.length - s.length);\n\n  // Quickly determine if this pattern is condition only\n  // if so, then add String(value) but using the condition\n  if (/^((?:\\[[^\\]]+\\])+)(;|$)/.test(part.pattern) &&\n     !/^\\[(?:h+|m+|s+)\\]/.test(part.pattern)) {\n    add({ type: 'text' }, tokens);\n  }\n\n  // Make sure we don't have an illegal pattern. We could support this but\n  // lets side with Excel here and don't because they make absolutely no sense.\n  if ((part.fractions && part.dec_fractions) || (part.fractions && part.exponential)) {\n    throw new SyntaxError(`Invalid pattern: ${part.pattern}`);\n  }\n\n  // parse number grouping\n  const ipatt = part.int_pattern.join('');\n  part.grouping = ipatt.indexOf(',') >= 0;\n  if (part.grouping) {\n    const si = ipatt.split(',');\n    const sl = si.length;\n    if (sl === 2) {\n      part.group_pri = si[1].length;\n      part.group_sec = part.group_pri;\n    }\n    // next block should only\n    else if (sl > 2) {\n      part.group_pri = si[sl - 1].length;\n      part.group_sec = si[sl - 2].length;\n    }\n  }\n  else {\n    part.group_pri = 0;\n    part.group_sec = 0;\n  }\n\n  minMaxPad(ipatt.replace(/[,]/g, ''), part, 'int');\n  minMaxPad(part.frac_pattern.join(''), part, 'frac');\n  minMaxPad(part.man_pattern.join(''), part, 'man');\n\n  let num_pat = part.num_pattern.join('');\n  let den_pat = part.den_pattern.join('');\n\n  const enforce_padded = /\\?/.test(den_pat) || /\\?/.test(num_pat);\n  // numberical denominator padding type is inherited from numerator padding type\n  den_pat = den_pat.replace(/\\d/g, enforce_padded ? '?' : '#');\n  if (enforce_padded) {\n    // this needs to be _before_ min/max\n    den_pat = den_pat.replace(/#$/g, '?');\n  }\n  minMaxPad(num_pat, part, 'num');\n  minMaxPad(den_pat, part, 'den');\n  if (enforce_padded) {\n    // this needs to be _after_ min/max\n    num_pat = num_pat.replace(/#$/g, '?');\n  }\n\n  part.int_padding = patternToPadding(part.int_pattern.join(''));\n  part.man_padding = patternToPadding(part.man_pattern.join(''));\n\n  part.num_padding = patternToPadding(num_pat);\n  part.den_padding = patternToPadding(den_pat);\n\n  if (part.den_pattern.length) {\n    // detect and set rounding factor for denominator\n    part.denominator = parseInt(part.den_pattern.join('').replace(/\\D/g, ''), 10);\n  }\n  part.integer = !!part.int_pattern.join('').length;\n\n  // extra whitespace rules for vulgar fractions\n  if (part.fractions) {\n    // fragment bits affect surrounding whitespace\n    // if either bit is \"#\", the whitespace around it, and\n    // the div symbol, is removed if the bit is not shown\n    tokens.forEach((tok, i) => {\n      // is next token a \"num\", \"den\", or \"div\"?\n      const next = tokens[i + 1];\n      if (tok.type === 'string' && next) {\n        if (next.type === 'num') {\n          tok.rule = 'num+int';\n        }\n        else if (next.type === 'div') {\n          tok.rule = 'num';\n        }\n        else if (next.type === 'den') {\n          tok.rule = 'den';\n        }\n      }\n    });\n  }\n\n  // dates cannot blend with non-date tokens\n  // general cannot blend with non-date tokens\n  // -- this is doess not match excel 100% (it seems to allow , as a text token with general)\n  // -- excel also does something strange when mixing general with dates (but that can hardly be expected to work)\n  if (\n    (part.date || part.general) &&\n    (part.int_pattern.length || part.frac_pattern.length || part.scale !== 1 || part.text)\n  ) {\n    throw new Error('Illegal format');\n  }\n\n  if (!part.date_system) {\n    part.date_system = EPOCH_1900;\n  }\n\n  return part;\n}\n","import { resolveLocale } from './locale.js';\nimport { parsePart } from './parsePart.js';\n\nexport function parsePattern (pattern) {\n  const partitions = [];\n  let conditional = false;\n  let l10n_override;\n  let text_partition = null;\n\n  let p = pattern;\n  let more = 0;\n  let part = false;\n  let i = 0;\n  let conditions = 0;\n  do {\n    part = parsePart(p);\n    if (part.condition) {\n      conditions++;\n      conditional = true;\n    }\n    if (part.text) {\n      // only one text partition is allowed per pattern\n      if (text_partition) {\n        throw new Error('Unexpected partition');\n      }\n      text_partition = part;\n    }\n    if (part.locale) {\n      l10n_override = resolveLocale(part.locale);\n    }\n    partitions.push(part);\n    more = (p.charAt(part.pattern.length) === ';') ? 1 : 0;\n    p = p.slice(part.pattern.length + more);\n    i++;\n  }\n  while (more && i < 4 && conditions < 3);\n\n  // No more than 4 sections and only 2 conditional statements: \"1;2;else;txt\"\n  if (conditions > 2) {\n    throw new Error('Unexpected condition');\n  }\n  if (more) {\n    throw new Error('Unexpected partition');\n  }\n\n  // if this is not a conditional, then we ensure we have all 4 partitions\n  if (!conditional) {\n    // if we have less than 4 partitions - and one of them is .text, use it as the text one\n    if (partitions.length < 4 && text_partition) {\n      for (let pi = 0, pl = partitions.length; pi < pl; pi++) {\n        if (partitions[pi] === text_partition) {\n          partitions.splice(pi, 1);\n        }\n      }\n    }\n    // missing positive\n    if (partitions.length < 1 && text_partition) {\n      partitions[0] = parsePart('General');\n      partitions[0].generated = true;\n    }\n    // missing negative\n    if (partitions.length < 2) {\n      const part = parsePart(partitions[0].pattern);\n      // the volatile minus only happens if there is a single pattern\n      part.tokens.unshift({ type: 'minus', volatile: true });\n      part.generated = true;\n      partitions.push(part);\n    }\n    // missing zero\n    if (partitions.length < 3) {\n      const part = parsePart(partitions[0].pattern);\n      part.generated = true;\n      partitions.push(part);\n    }\n    // missing text\n    if (partitions.length < 4) {\n      if (text_partition) {\n        partitions.push(text_partition);\n      }\n      else {\n        const part = parsePart('@');\n        part.generated = true;\n        partitions.push(part);\n      }\n    }\n\n    partitions[0].condition = [ '>', 0 ];\n    partitions[1].condition = [ '<', 0 ];\n    partitions[2].condition = null;\n  }\n\n  return {\n    pattern: pattern,\n    partitions: partitions,\n    locale: l10n_override\n  };\n}\n\nexport function parseCatch (pattern) {\n  try {\n    return parsePattern(pattern);\n  }\n  catch (err) {\n    const errPart = { tokens: [ { type: 'error' } ] };\n    return {\n      pattern: pattern,\n      partitions: [ errPart, errPart, errPart, errPart ],\n      error: err.message,\n      locale: null\n    };\n  }\n}\n","import { EPOCH_1317, EPOCH_1904 } from './constants.js';\n\nconst floor = Math.floor;\n\n// https://www.codeproject.com/Articles/2750/Excel-Serial-Date-to-Day-Month-Year-and-Vice-Versa\nexport function toYMD_1900 (ord, leap1900 = true) {\n  if (leap1900 && ord >= 0) {\n    if (ord === 0) {\n      return [ 1900, 1, 0 ];\n    }\n    if (ord === 60) {\n      return [ 1900, 2, 29 ];\n    }\n    if (ord < 60) {\n      return [ 1900, (ord < 32 ? 1 : 2), ((ord - 1) % 31) + 1 ];\n    }\n  }\n  let l = ord + 68569 + 2415019;\n  const n = floor((4 * l) / 146097);\n  l = l - floor((146097 * n + 3) / 4);\n  const i = floor((4000 * (l + 1)) / 1461001);\n  l = l - floor((1461 * i) / 4) + 31;\n  const j = floor((80 * l) / 2447);\n  const nDay = l - floor((2447 * j) / 80);\n  l = floor(j / 11);\n  const nMonth = j + 2 - (12 * l);\n  const nYear = 100 * (n - 49) + i + l;\n  return [ nYear | 0, nMonth | 0, nDay | 0 ];\n}\n\nexport function toYMD_1904 (ord) {\n  return toYMD_1900(ord + 1462);\n}\n\n// https://web.archive.org/web/20080209173858/https://www.microsoft.com/globaldev/DrIntl/columns/002/default.mspx\n// > [algorithm] is used in many Microsoft products, including all operating systems that\n// > support Arabic locales, Microsoft Office, COM, Visual Basic, VBA, and SQL Server 2000.\nexport function toYMD_1317 (ord) {\n  if (ord === 60) {\n    throw new Error('#VALUE!');\n  }\n  if (ord <= 1) {\n    return [ 1317, 8, 29 ];\n  }\n  if (ord < 60) {\n    return [ 1317, (ord < 32 ? 9 : 10), 1 + ((ord - 2) % 30) ];\n  }\n  const y = 10631 / 30;\n  const shift1 = 8.01 / 60;\n  let z = ord + 466935;\n  const cyc = floor(z / 10631);\n  z = z - 10631 * cyc;\n  const j = floor((z - shift1) / y);\n  z = z - floor(j * y + shift1);\n  const m = floor((z + 28.5001) / 29.5);\n  if (m === 13) {\n    return [ 30 * cyc + j, 12, 30 ];\n  }\n  return [ 30 * cyc + j, m, z - floor(29.5001 * m - 29) ];\n}\n\nexport function toYMD (ord, system = 0, leap1900 = true) {\n  const int = floor(ord);\n  if (system === EPOCH_1317) {\n    return toYMD_1317(int);\n  }\n  if (system === EPOCH_1904) {\n    return toYMD_1904(int);\n  }\n  return toYMD_1900(int, leap1900);\n}\n","import { toYMD } from './toYMD.js';\n\nconst floor = Math.floor;\nconst DAYSIZE = 86400;\n\nexport function dateToSerial (value, opts) {\n  let ts = null;\n  if (Array.isArray(value)) {\n    const [ y, m, d, hh, mm, ss ] = value;\n    ts = Date.UTC(y, m == null ? 0 : m - 1, d ?? 1, hh || 0, mm || 0, ss || 0);\n  }\n  // dates are changed to serial\n  else if (value instanceof Date) {\n    ts = value * 1;\n    if (!opts || !opts.ignoreTimezone) {\n      ts -= (value.getTimezoneOffset() * 60 * 1000);\n    }\n  }\n  if (ts != null && isFinite(ts)) {\n    const d = (ts / 864e5);\n    return d - (d <= -25509 ? -25568 : -25569);\n  }\n  // everything else is passed through\n  return value;\n}\n\nexport function dateFromSerial (value, opts) {\n  let date = (value | 0);\n  const t = DAYSIZE * (value - date);\n  let time = floor(t); // in seconds\n  // date \"epsilon\" correction\n  if ((t - time) > 0.9999) {\n    time += 1;\n    if (time === DAYSIZE) {\n      time = 0;\n      date += 1;\n    }\n  }\n  // serial date/time to gregorian calendar\n  const x = (time < 0) ? DAYSIZE + time : time;\n  const [ y, m, d ] = toYMD(value, 0, opts && opts.leap1900);\n  const hh = floor((x / 60) / 60) % 60;\n  const mm = floor(x / 60) % 60;\n  const ss = floor(x) % 60;\n  // return it as a native date object\n  if (opts && opts.nativeDate) {\n    const dt = new Date(0);\n    dt.setUTCFullYear(y, m - 1, d);\n    dt.setUTCHours(hh, mm, ss);\n    return dt;\n  }\n  // return the parts\n  return [ y, m, d, hh, mm, ss ];\n}\n","export default function clamp (number) {\n  if (number === 0) {\n    return number;\n  }\n  const d = Math.ceil(Math.log10(number < 0 ? -number : number));\n  const mag = 10 ** (16 - Math.floor(d));\n  return Math.round(number * mag) / mag;\n}\n","import round from './round.js';\n\nconst zero = {\n  total: 1,\n  sign: 0,\n  period: 0,\n  int: 1,\n  frac: 0\n};\n\n// returns the count of digits (including - and .) need to represent the number\nexport default function numdec (value, incl_sign = true) {\n  const v = Math.abs(value);\n\n  // shortcut zero\n  if (!v) { return zero; }\n\n  const signSize = (incl_sign && value < 0) ? 1 : 0;\n  const intPart = Math.floor(v);\n  const intSize = Math.floor(Math.log10(v) + 1);\n  let periodSize = 0;\n  let fracSize = 0;\n\n  // is not an integer\n  if (intPart !== v) {\n    periodSize = 1;\n\n    // B: this has turned out to be much faster than all pure math\n    // based solutions I was able to come up with ¯\\_(ツ)_/¯\n    const n = String(\n      round(\n        (intSize < 0)\n          ? v * (10 ** -intSize)\n          : v / (10 ** intSize),\n        15\n      )\n    );\n    let f = n.length;\n    let z = true;\n    let i = 0;\n    while (i <= n.length) {\n      if (n[i] === '.') {\n        // discount period\n        f--;\n        break;\n      }\n      else if (n[i] === '0' && z) {\n        // leading zeros before period are discounted\n        f--;\n      }\n      else {\n        // non-zero digit\n        z = false;\n      }\n      i++;\n    }\n    fracSize = f - intSize;\n\n    if (fracSize < 0) {\n      // the number is not representable [by Excel]\n      // this would be something like 1000.0000000000001\n      // it would normally get truncated to 15 significant figures and\n      // end up in the same place as the following does:\n      fracSize = 0;\n      periodSize = 0;\n    }\n  }\n\n  return {\n    total: signSize + Math.max(intSize, 1) + periodSize + fracSize,\n    digits: Math.max(intSize, 0) + fracSize,\n    sign: signSize,\n    period: periodSize,\n    int: Math.max(intSize, 1),\n    frac: fracSize\n  };\n}\n","import numdec from './numdec.js';\nimport round from './round.js';\n\nconst fixLocale = (s, l10n) => {\n  return s.replace(/\\./, l10n.decimal);\n};\n\nexport default function general (ret, part, value, l10n) {\n  const int = value | 0;\n\n  // sign is emitted if there is no condition or\n  // if condition operator is one of [ '<>', '>=', '>' ]\n  const showSign = value < 0 && (!part.condition ||\n    part.condition[0] === '<>' ||\n    part.condition[0] === '>=' ||\n    part.condition[0] === '>'\n  );\n  if (typeof value === 'string') {\n    // special case\n    // [<-25]General;[>25]General;General;General\n    ret.push(value);\n  }\n  else if (value === int) {\n    if (showSign) {\n      ret.push(l10n.negative);\n    }\n    ret.push(Math.abs(int));\n  }\n  else {\n    if (showSign) {\n      ret.push(l10n.negative);\n    }\n    let exp = 0;\n    const v = Math.abs(value);\n\n    // FIXME: it is best if numdec returns all of these\n    if (v) { exp = Math.floor(Math.log10(v)); }\n    let n = (exp < 0) ? v * (10 ** -exp) : v / (10 ** exp);\n    if (n === 10) { n = 1; exp++; }\n\n    // The application shall attempt to display the full number\n    // up to 11 digits (inc. decimal point).\n    const num_dig = numdec(v);\n\n    const getExp = () => {\n      const x = Math.abs(exp);\n      let m;\n      if (n === 1) {\n        m = n;\n      }\n      else {\n        m = round(n, 5);\n      }\n      ret.push(\n        fixLocale(m + '', l10n),\n        l10n.exponent, (exp < 0 ? l10n.negative : l10n.positive),\n        x < 10 ? '0' : '', x\n      );\n    };\n\n    if (exp >= -4 && exp <= -1) {\n      const o = v.toPrecision(10 + exp).replace(/0+$/, '');\n      ret.push(fixLocale(o, l10n));\n    }\n    else if (exp === 10) {\n      const o = v.toFixed(10)\n        .slice(0, 12)\n        .replace(/\\.$/, '');\n      ret.push(fixLocale(o, l10n));\n    }\n    else if (Math.abs(exp) <= 9) {\n      const w = 11;\n      if (num_dig.total <= w) {\n        const o = round(v, 9).toFixed(num_dig.frac);\n        ret.push(fixLocale(o, l10n));\n      }\n      else if (exp === 9) {\n        ret.push(Math.floor(v));\n      }\n      else if (exp >= 0 && exp < 9) {\n        ret.push(round(v, 9 - exp));\n      }\n      else {\n        getExp();\n      }\n    }\n    else if (num_dig.total >= 12) {\n      getExp();\n    }\n    else if (Math.floor(v) === v) {\n      ret.push(Math.floor(v));\n    }\n    else {\n      ret.push(fixLocale(round(v, 9).toFixed(num_dig.frac), l10n));\n    }\n  }\n  return ret;\n}\n","import round from './round.js';\nimport clamp from './clamp.js';\nimport dec2frac from './dec2frac.js';\nimport general from './general.js';\nimport { toYMD } from './toYMD.js';\nimport { defaultLocale } from './locale.js';\nimport {\n  u_HOUR, u_MIN, u_SEC, u_DSEC, u_CSEC, u_MSEC,\n  EPOCH_1317,\n  MIN_S_DATE, MAX_S_DATE,\n  MIN_L_DATE, MAX_L_DATE,\n  _numchars\n} from './constants.js';\n\nconst DAYSIZE = 86400;\n\nconst short_to_long = {\n  int: 'integer',\n  frac: 'fraction',\n  man: 'mantissa',\n  num: 'numerator',\n  den: 'denominator'\n};\n\nconst dateOverflows = (value, bigRange) => {\n  if (bigRange) {\n    return (value < MIN_L_DATE || value >= MAX_L_DATE);\n  }\n  return (value < MIN_S_DATE || value >= MAX_S_DATE);\n};\n\nexport function runPart (value, part, opts, l10n_) {\n  let mantissa = '';\n  let numerator = '';\n  let denominator = '';\n  let fraction = '';\n  let integer = '';\n  let exp = 0;\n\n  let date = value | 0;\n  let time = 0;\n  let year = 0;\n  let month = 1;\n  let day = 0;\n  let weekday = 0;\n  let hour = 0;\n  let minute = 0;\n  let second = 0;\n  let subsec = 0;\n\n  const l10n = l10n_ || defaultLocale;\n\n  // scale number\n  if (!part.text && isFinite(part.scale) && part.scale !== 1) {\n    value = clamp(value * part.scale);\n  }\n  // calc exponent\n  if (part.exponential) {\n    let v = Math.abs(value);\n    if (v) {\n      exp = Math.round(Math.log10(v));\n    }\n    if (part.int_max > 1) {\n      exp = Math.floor(exp / part.int_max) * part.int_max;\n    }\n    v = (exp < 0) ? v * (10 ** -exp) : v / (10 ** exp);\n    value = (value < 0) ? -v : v;\n    mantissa += Math.abs(exp);\n  }\n  // integer to text\n  if (part.integer) {\n    const i = Math.abs(round(value, part.fractions ? 1 : part.frac_max));\n    integer += (i < 1) ? '' : Math.floor(i);\n  }\n\n  // grouping\n  if (part.grouping) {\n    let gtmp = '';\n    let ipos = integer.length;\n    if (ipos > part.group_pri) {\n      ipos -= part.group_pri;\n      gtmp = l10n.group + integer.slice(ipos, ipos + part.group_pri) + gtmp;\n    }\n    while (ipos > part.group_sec) {\n      ipos -= part.group_sec;\n      gtmp = l10n.group + integer.slice(ipos, ipos + part.group_sec) + gtmp;\n    }\n    integer = ipos ? integer.slice(0, ipos) + gtmp : gtmp;\n  }\n\n  // fraction to text\n  if (part.dec_fractions) {\n    fraction = String(round(value, part.frac_max)).split('.')[1] || '';\n  }\n\n  // using vulgar fractions\n  let have_fraction = false;\n  if (part.fractions) {\n    const _dec = Math.abs(part.integer ? value % 1 : value);\n    if (_dec) {\n      have_fraction = true;\n      if (isFinite(part.denominator)) {\n        // predefined denominator\n        denominator += part.denominator;\n        numerator += round(_dec * part.denominator);\n        if (numerator === '0') {\n          numerator = '';\n          denominator = '';\n          have_fraction = false;\n          if (!integer) {\n            integer = '0';\n          }\n        }\n      }\n      else {\n        const nmax = (part.integer) ? part.num_max : Infinity;\n        const frt = dec2frac(_dec, nmax, part.den_max);\n        numerator += frt[0];\n        denominator += frt[1];\n        if (part.integer) {\n          if (numerator === '0') {\n            if (!integer) {\n              integer = '0';\n            }\n            numerator = '';\n            denominator = '';\n            have_fraction = false;\n          }\n        }\n      }\n    }\n  }\n\n  // using date/time\n  if (part.date_eval && dateOverflows(value, opts.dateSpanLarge)) {\n    // if value is out of bounds and formatting is date Excel emits \"#########\" (full cell)\n    // this does not happen, if the only date tokens are elapsed time\n    // This copies the TEXT function which emits a #VALUE! error\n    if (opts.dateErrorThrows) {\n      throw new Error('Date out of bounds');\n    }\n    if (opts.dateErrorNumber) {\n      return general([], {}, value, l10n).join('');\n    }\n    return opts.overflow;\n  }\n  else if (part.date) {\n    date = (value | 0);\n    const t = DAYSIZE * (value - date);\n    time = Math.floor(t); // in seconds\n\n    // \"epsilon\" correction\n    subsec = t - time;\n    if (Math.abs(subsec) < 1e-6) { // 0.000001\n      subsec = 0;\n    }\n    else if (subsec > 0.9999) {\n      subsec = 0;\n      time += 1;\n      if (time === DAYSIZE) {\n        time = 0;\n        date += 1;\n      }\n    }\n\n    // serial date/time to gregorian calendar\n    if (date || part.date_system) {\n      const dout = toYMD(value, part.date_system, opts.leap1900);\n      year = dout[0];\n      month = dout[1];\n      day = dout[2];\n    }\n    if (time || subsec) {\n      // round time based on smallest used unit\n      const minU = part.date & u_MSEC || part.date & u_CSEC || part.date & u_DSEC ||\n                   part.date & u_SEC || part.date & u_MIN || part.date & u_HOUR;\n      if (\n        (minU === u_MSEC && subsec > 0.9995) ||\n        (minU === u_CSEC && subsec > 0.995) ||\n        (minU === u_DSEC && subsec > 0.95) ||\n        (minU === u_SEC && subsec >= 0.5) ||\n        (minU === u_MIN && subsec >= 0.5) ||\n        (minU === u_HOUR && subsec >= 0.5)\n      ) {\n        time++;\n        subsec = 0;\n      }\n      const x = (time < 0) ? DAYSIZE + time : time;\n      second = Math.floor(x) % 60;\n      minute = Math.floor(x / 60) % 60;\n      hour = Math.floor((x / 60) / 60) % 60;\n    }\n    weekday = (6 + date) % 7;\n  }\n\n  // integer padding\n  if (part.int_padding) {\n    integer = (part.int_padding.length === 1)\n      ? integer || part.int_padding\n      : part.int_padding.substring(0, part.int_padding.length - integer.length) + integer;\n  }\n  // numerator padding\n  if (part.num_padding) {\n    numerator = (part.num_padding.length === 1)\n      ? numerator || part.num_padding\n      : part.num_padding.substring(0, part.num_padding.length - numerator.length) + numerator;\n  }\n  // denominator padding\n  if (part.den_padding) {\n    denominator = (part.den_padding.length === 1)\n      ? denominator || part.den_padding\n      : denominator + part.den_padding.slice(denominator.length);\n  }\n  // mantissa padding\n  if (part.man_padding) {\n    const m_sign = (part.exp_plus) ? '+' : '';\n    mantissa = (part.man_padding.length === 1)\n      ? (exp < 0 ? '-' : m_sign) + (mantissa || part.man_padding)\n      : (exp < 0 ? '-' : m_sign) + part.man_padding.slice(0, part.man_padding.length - mantissa.length) + mantissa;\n  }\n\n  const ret = [];\n  let integer_bits_counter = 0;\n  const counter = { int: 0, frac: 0, man: 0, num: 0, den: 0 };\n  for (let ti = 0, tl = part.tokens.length; ti < tl; ti++) {\n    const tok = part.tokens[ti];\n    const len = tok.num ? tok.num.length : 0;\n\n    if (tok.type === 'string') {\n      // special rules may apply if next or prev is numerator or denominator\n      if (tok.rule) {\n        if (tok.rule === 'num') {\n          if (have_fraction) {\n            ret.push(tok.value);\n          }\n          else if (part.num_min > 0 || part.den_min > 0) {\n            ret.push(tok.value.replace(/./g, _numchars['?']));\n          }\n        }\n        else if (tok.rule === 'num+int') {\n          if (have_fraction && integer) {\n            ret.push(tok.value);\n          }\n          else if ((part.den_min > 0) && (integer || part.num_min)) {\n            ret.push(tok.value.replace(/./g, _numchars['?']));\n          }\n        }\n        else if (tok.rule === 'den') {\n          if (have_fraction) {\n            ret.push(tok.value);\n          }\n          else if (part.den_min > 0 || part.den_min > 0) {\n            ret.push(tok.value.replace(/./g, _numchars['?']));\n          }\n        }\n      }\n      else {\n        ret.push(tok.value);\n      }\n    }\n    else if (tok.type === 'error') {\n      // token used to define invalid pattern\n      ret.push(opts.invalid);\n    }\n    else if (tok.type === 'point') {\n      // Excel always emits a period: TEXT(0, \"#.#\") => \".\"\n      ret.push(part.date ? tok.value : l10n.decimal);\n    }\n    else if (tok.type === 'general') {\n      general(ret, part, value, l10n);\n    }\n    else if (tok.type === 'exp') {\n      ret.push(l10n.exponent);\n    }\n    else if (tok.type === 'minus') {\n      if (tok.volatile && part.date) {\n        // don't emit the prepended minus if this is a date\n      }\n      else if (tok.volatile && !part.fractions && (part.integer || part.dec_fractions)) {\n        // minus is only shown if there is a non-zero digit present\n        if ((integer && integer !== '0') || fraction) {\n          ret.push(l10n.negative);\n        }\n      }\n      else {\n        ret.push(l10n.negative);\n      }\n    }\n    else if (tok.type === 'plus') {\n      ret.push(l10n.positive);\n    }\n    else if (tok.type === 'text') {\n      ret.push(value);\n    }\n    else if (tok.type === 'div') {\n      if (have_fraction) {\n        ret.push('/');\n      }\n      else if (part.num_min > 0 || part.den_min > 0) {\n        ret.push(_numchars['?']);\n      }\n      else {\n        ret.push(_numchars['#']);\n      }\n    }\n    else if (tok.type === 'int') {\n      if (part.int_pattern.length === 1) { // number isn't fragmented\n        ret.push(integer);\n      }\n      else {\n        const c_s = (!integer_bits_counter)\n          ? Infinity\n          : part.int_pattern.join('').length - counter.int;\n        const c_e = (integer_bits_counter === part.int_pattern.length - 1)\n          ? 0\n          : part.int_pattern.join('').length - (counter.int + tok.num.length);\n        ret.push(integer.substring(integer.length - c_s, integer.length - c_e));\n        integer_bits_counter++;\n        counter.int += tok.num.length;\n      }\n    }\n    else if (tok.type === 'frac') {\n      const o = counter.frac;\n      for (let i = 0; i < len; i++) {\n        ret.push(fraction[i + o] || _numchars[tok.num[i]]);\n      }\n      counter.frac += len;\n    }\n    else if (tok.type in short_to_long) {\n      if (part[tok.type + '_pattern'].length === 1) {\n        // number isn't fragmented\n        if (tok.type === 'int') {\n          ret.push(integer);\n        }\n        if (tok.type === 'frac') {\n          ret.push(fraction);\n        }\n        if (tok.type === 'man') {\n          ret.push(mantissa);\n        }\n        if (tok.type === 'num') {\n          ret.push(numerator);\n        }\n        if (tok.type === 'den') {\n          ret.push(denominator);\n        }\n      }\n      else {\n        ret.push(short_to_long[tok.type].slice(counter[tok.type], counter[tok.type] + len));\n        counter[tok.type] += len;\n      }\n    }\n    else if (tok.type === 'year') {\n      if (year < 0) { ret.push(l10n.negative); }\n      ret.push(String(Math.abs(year)).padStart(4, '0'));\n    }\n    else if (tok.type === 'year-short') {\n      const y = year % 100;\n      ret.push(y < 10 ? '0' : '', y);\n    }\n    else if (tok.type === 'month') {\n      ret.push((tok.pad && month < 10 ? '0' : ''), month);\n    }\n    else if (tok.type === 'monthname-single') {\n      // This is what Excel does.\n      // The Vietnamese list goes from [\"Tháng 1\", \"Tháng 2\", ... ] to [ \"T\", \"T\", ... ]\n      // Simplified Chinese goes from [ 1月, ... 9月, 10月, 11月, 12月 ] to [ 1, ... 9, 1, 1, 1 ]\n      if (part.date_system === EPOCH_1317) {\n        ret.push(l10n.mmmm6[month - 1].charAt(0));\n      }\n      else {\n        ret.push(l10n.mmmm[month - 1].charAt(0));\n      }\n    }\n    else if (tok.type === 'monthname-short') {\n      if (part.date_system === EPOCH_1317) {\n        ret.push(l10n.mmm6[month - 1]);\n      }\n      else {\n        ret.push(l10n.mmm[month - 1]);\n      }\n    }\n    else if (tok.type === 'monthname') {\n      if (part.date_system === EPOCH_1317) {\n        ret.push(l10n.mmmm6[month - 1]);\n      }\n      else {\n        ret.push(l10n.mmmm[month - 1]);\n      }\n    }\n    else if (tok.type === 'weekday-short') {\n      ret.push(l10n.ddd[weekday]);\n    }\n    else if (tok.type === 'weekday') {\n      ret.push(l10n.dddd[weekday]);\n    }\n    else if (tok.type === 'day') {\n      ret.push((tok.pad && day < 10 ? '0' : ''), day);\n    }\n    else if (tok.type === 'hour') {\n      const h = hour % part.clock || (part.clock < 24 ? part.clock : 0);\n      ret.push((tok.pad && h < 10 ? '0' : ''), h);\n    }\n    else if (tok.type === 'min') {\n      ret.push((tok.pad && minute < 10 ? '0' : ''), minute);\n    }\n    else if (tok.type === 'sec') {\n      ret.push((tok.pad && second < 10 ? '0' : ''), second);\n    }\n    else if (tok.type === 'subsec') {\n      ret.push(l10n.decimal);\n      // decimals is pre-determined by longest subsec token\n      // but the number emitted is per-token\n      const f = subsec.toFixed(part.sec_decimals);\n      ret.push(f.slice(2, 2 + tok.decimals));\n    }\n    else if (tok.type === 'am') {\n      const idx = hour < 12 ? 0 : 1;\n      if (tok.short && !l10n_) {\n        ret.push('AP'[idx]);\n      }\n      else {\n        ret.push(l10n.ampm[idx]);\n      }\n    }\n    else if (tok.type === 'hour-elap') {\n      if (value < 0) { ret.push(l10n.negative); }\n      const hh = (date * 24) + Math.floor(Math.abs(time) / (60 * 60));\n      ret.push(String(Math.abs(hh)).padStart(tok.pad, '0'));\n    }\n    else if (tok.type === 'min-elap') {\n      if (value < 0) { ret.push(l10n.negative); }\n      const mm = (date * 1440) + Math.floor(Math.abs(time) / 60);\n      ret.push(String(Math.abs(mm)).padStart(tok.pad, '0'));\n    }\n    else if (tok.type === 'sec-elap') {\n      if (value < 0) { ret.push(l10n.negative); }\n      const ss = (date * DAYSIZE) + Math.abs(time);\n      ret.push(String(Math.abs(ss)).padStart(tok.pad, '0'));\n    }\n    else if (tok.type === 'b-year') {\n      ret.push(year + 543);\n    }\n    else if (tok.type === 'b-year-short') {\n      const y = (year + 543) % 100;\n      ret.push(y < 10 ? '0' : '', y);\n    }\n  }\n  if (opts.nbsp) {\n    // can we detect ? or string tokens and only do this if needed?\n    return ret.join('');\n  }\n  return ret.join('').replace(/\\u00a0/g, ' ');\n}\n","import { defaultLocale, getLocale } from './locale.js';\nimport { parsePart } from './parsePart.js';\nimport { runPart } from './runPart.js';\n\nfunction getPart (value, parts) {\n  for (let pi = 0; pi < 3; pi++) {\n    const part = parts[pi];\n    if (part) {\n      let cond;\n      if (part.condition) {\n        const operator = part.condition[0];\n        const operand = part.condition[1];\n        if (operator === '=') { cond = (value === operand); }\n        else if (operator === '>') { cond = (value > operand); }\n        else if (operator === '<') { cond = (value < operand); }\n        else if (operator === '>=') { cond = (value >= operand); }\n        else if (operator === '<=') { cond = (value <= operand); }\n        else if (operator === '<>') { cond = (value !== operand); }\n      }\n      else {\n        cond = true;\n      }\n      if (cond) {\n        return part;\n      }\n    }\n  }\n  // eslint-disable-next-line\n  return undefined;\n}\n\nconst default_text = parsePart('@');\nconst default_color = 'black';\n\nexport function color (value, parts) {\n  if (typeof value !== 'number' || !isFinite(value)) {\n    const nan_color = parts[3] ? parts[3].color : default_text.color;\n    return nan_color || default_color;\n  }\n  const part = getPart(value, parts);\n  return part ? part.color || default_color : default_color;\n}\n\nexport function formatNumber (value, parts, opts) {\n  const l10n = getLocale(opts.locale);\n  // not a number?\n  const text_part = parts[3] ? parts[3] : default_text;\n  if (typeof value === 'boolean') {\n    value = value ? 'TRUE' : 'FALSE';\n  }\n  if (value == null) {\n    return '';\n  }\n  if (typeof value !== 'number') {\n    return runPart(value, text_part, opts, l10n);\n  }\n  // guard against non-finite numbers:\n  if (!isFinite(value)) {\n    const loc = l10n || defaultLocale;\n    if (isNaN(value)) { return loc.nan; }\n    return (value < 0 ? loc.negative : '') + loc.infinity;\n  }\n  // find and run the pattern part that applies to this number\n  const part = getPart(value, parts);\n  return part ? runPart(value, part, opts, l10n) : '';\n}\n","export function isPercent (partitions) {\n  return !!(\n    (partitions[0] && partitions[0].percent) ||\n    (partitions[1] && partitions[1].percent) ||\n    (partitions[2] && partitions[2].percent) ||\n    (partitions[3] && partitions[3].percent)\n  );\n}\n\nexport function isDate (partitions) {\n  return !!(\n    (partitions[0] && partitions[0].date) ||\n    (partitions[1] && partitions[1].date) ||\n    (partitions[2] && partitions[2].date) ||\n    (partitions[3] && partitions[3].date)\n  );\n}\n\nexport function isText (partitions) {\n  const [ part1, part2, part3, part4 ] = partitions;\n  return !!(\n    (!part1 || part1.generated) &&\n    (!part2 || part2.generated) &&\n    (!part3 || part3.generated) &&\n    (part4 && part4.text && !part4.generated)\n  );\n}\n\nconst level = {\n  text: 15,\n  datetime: 10.8,\n  date: 10.8,\n  time: 10.8,\n  percent: 10.6,\n  currency: 10.4,\n  grouped: 10.2,\n  scientific: 6,\n  number: 4,\n  fraction: 2,\n  general: 0\n};\n\nconst dateCodes = [\n  [ 'DMY', 1 ],\n  [ 'DM', 2 ],\n  [ 'MY', 3 ],\n  [ 'MDY', 4 ],\n  [ 'MD', 5 ],\n  [ 'hmsa', 6 ],\n  [ 'hma', 7 ],\n  [ 'hms', 8 ],\n  [ 'hm', 9 ]\n];\n\nconst reCurrencySymbols = /[¤$£¥֏؋৳฿៛₡₦₩₪₫€₭₮₱₲₴₸₹₺₼₽₾₿]/;\nexport function info (partitions, currencyId = null) {\n  const [ partPos, partNeg ] = partitions;\n  const frac_max = partPos.frac_max;\n  const info = {\n    type: 'general',\n    isDate: isDate(partitions),\n    isText: isText(partitions),\n    isPercent: isPercent(partitions),\n    maxDecimals: partPos.general ? 9 : frac_max,\n    color: 0,\n    parentheses: 0,\n    grouped: partPos.grouping ? 1 : 0,\n    partitions\n  };\n\n  // currency identifier may be passed in, but otherwise we report if we find a known glyph\n  const isCurrency = (!info.isDate && !info.isText) && partPos.tokens.some(tok => (\n    tok.type === 'string' &&\n    (currencyId\n      ? tok.value === currencyId\n      : reCurrencySymbols.test(tok.value))\n  ));\n\n  let codeType = 'G';\n  let codeNum = (frac_max >= 0) ? Math.min(15, frac_max) : '';\n  let codeParens = '';\n  let codeDash = '';\n\n  if (partNeg.color) {\n    codeDash = '-';\n    info.color = 1;\n  }\n  if (partPos.parens) {\n    codeParens = '()';\n    info.parentheses = 1;\n  }\n\n  if (isCurrency) {\n    codeType = 'C';\n    info.type = 'currency';\n  }\n  else if (info.isDate) {\n    let haveTime = 0;\n    let haveDate = 0;\n    let order = '';\n    // This is equivalent to how Excel does this.\n    // It has to get the order right but then ignores any trailing tokens.\n    // So:  \"mmm dd yyyy\" matches \"mdy\" = D4\n    // But: \"mmm dd dd yyyy\" matches \"md\" = D5\n    partPos.tokens.forEach(tok => {\n      const type = tok.type;\n      // 'year' || 'year-short' || 'b-year' || 'b-year-short'\n      if (/^(b-)?year/.test(type)) {\n        order += 'Y';\n        haveDate++;\n      }\n      // 'month' || 'monthname-single' || 'monthname-short' || 'monthname'\n      else if (type.startsWith('month')) {\n        order += 'M';\n        haveDate++;\n      }\n      // 'weekday-short' || 'weekday' || 'day'\n      else if (/^(week)?day/.test(type)) {\n        order += 'D';\n        haveDate++;\n      }\n      else if (type === 'hour' || type === 'min' || type === 'sec' || type === 'am') {\n        order += type[0];\n        haveTime++;\n      }\n    });\n    info.type = 'date';\n    if (haveDate && haveTime) {\n      info.type = 'datetime';\n    }\n    else if (!haveDate && haveTime) {\n      info.type = 'time';\n    }\n    const code = dateCodes.find(d => order.startsWith(d[0]));\n    codeType = code ? 'D' : 'G';\n    codeNum = code ? code[1] : '';\n  }\n  else if (info.isText) {\n    codeType = 'G';\n    info.type = 'text';\n    codeNum = '';\n    info.maxDecimals = 0;\n  }\n  else if (partPos.general) {\n    codeType = 'G';\n    info.type = 'general';\n    codeNum = '';\n  }\n  else if (partPos.fractions) {\n    codeType = 'G';\n    info.type = 'fraction';\n    codeNum = '';\n  }\n  else if (partPos.exponential) {\n    codeType = 'S';\n    info.type = 'scientific';\n  }\n  else if (info.isPercent) {\n    codeType = 'P';\n    info.type = 'percent';\n  }\n  else if (partPos.grouping) {\n    codeType = ',';\n    info.type = 'grouped';\n  }\n  else if (partPos.int_max || frac_max) {\n    codeType = 'F';\n    info.type = 'number';\n  }\n\n  info.code = codeType + codeNum + codeDash + codeParens;\n\n  // Excel can combine some codes, but not all.\n  // When integer value of two is equal and it can't combine the \"first\" one wins out.\n  info.level = level[info.type];\n\n  return Object.freeze(info);\n}\n","import { dateFromSerial } from './serialDate.js';\n/*\nThis is a list of the allowed date formats. The test file contains\nthe full list of permuations and the resulting values and formats.\n\nLegend:\n  \"-\" - Date separator (any of \"/\" | \"-\" | \" \" | \".\"⁽¹⁾ | \", \"⁽²⁾)\n  \" \" - Whitespace\n  \"j\" - Day without leading zero (1-31)\n  \"d\" - Day with leading zero (00-31)\n  \"D\" - Abbreviated day name (\"Sun\"-\"Sat\")\n  \"l\" - Full day name (\"Sunday\"-\"Saturday\")\n  \"n\" - Month without leading zero (1-12)\n  \"m\" - Month with leading zero (01-12)\n  \"F\" - Full month name (\"Janary\"-\"December\")\n  \"M\" - Abbreviated month name (\"Jan\"-\"Dec\")\n  \"y\" - Year without century (00-99)\n  \"Y\" - Year of our lord (1900-9999)\n  \"x\" - Time of day (all formats: \"10 PM\", \"10:11:12\", ...)\n\n¹ Only considered valid if there are three or more sections to the date.\n² Comma is only allowed if followed by a space.\n\nTime is appended to each of these as they are inserted into the\ncollection of valid dates below.\n*/\nconst okDateFormats = [\n  'd-F-y', 'd-F-Y', 'd-M-y', 'd-M-Y', 'F-d-y', 'F-d-Y', 'F-j-y', 'F-j-Y', 'j-F-y', 'j-F-Y',\n  'j-M-y', 'j-M-Y', 'M-d-y', 'M-d-Y', 'M-j-y', 'M-j-Y', 'm-d-y', 'm-d-Y', 'm-j-y', 'm-j-Y',\n  'n-d-y', 'n-d-Y', 'n-j-y', 'n-j-Y', 'y-F-d', 'y-F-j', 'y-M-d', 'y-M-j', 'Y-F-d', 'Y-F-j',\n  'Y-M-d', 'Y-m-d', 'Y-M-j', 'Y-m-j', 'Y-n-d', 'Y-n-j',\n  'M-d', 'M-j', 'd-F', 'd-M', 'n-d', 'n-j', 'j-F', 'j-M', 'M-Y', 'n-Y', 'm-d', 'F-d', 'm-j',\n  'F-j', 'm-Y', 'F-Y', 'Y-M', 'Y-n', 'Y-m', 'Y-F', 'Y-M'\n];\n\n// date formats are stored as a token-tree in a trie\n// for minimal looping and branching while parsing\nconst dateTrie = {};\nfunction packDate (f, node) {\n  if (f) {\n    const char = f[0];\n    node[char] = node[char] || {};\n    packDate(f.slice(1), node[char]);\n  }\n  else {\n    node.$ = true;\n  }\n}\nokDateFormats.forEach(fmt => {\n  // add date to token tree\n  packDate(fmt, dateTrie);\n  // add a variant of the date with time suffixed\n  // Excel allows time first, but Sheets and GRID do not\n  packDate(fmt + ' x', dateTrie);\n  // add a variant of the date with weekdats pre/suffixed\n  packDate(fmt + ' l', dateTrie);\n  packDate(fmt + ' l x', dateTrie);\n  packDate('l ' + fmt, dateTrie);\n  packDate('l ' + fmt + ' x', dateTrie);\n  packDate(fmt + ' D', dateTrie);\n  packDate(fmt + ' D x', dateTrie);\n  packDate('D ' + fmt, dateTrie);\n  packDate('D ' + fmt + ' x', dateTrie);\n});\n\n/* eslint-disable object-property-newline */\nconst monthsM = {\n  jan: 1, feb: 2, mar: 3, apr: 4, may: 5, jun: 6,\n  jul: 7, aug: 8, sep: 9, oct: 10, nov: 11, dec: 12\n};\n// note: May is missing here, it is always parsed as M\nconst monthsF = {\n  january: 1, february: 2, march: 3, april: 4,\n  june: 6, july: 7, august: 8, september: 9,\n  october: 10, november: 11, december: 12\n};\nconst days = {\n  sunday: 'l', monday: 'l', tuesday: 'l', wednesday: 'l', thursday: 'l', friday: 'l', saturday: 'l',\n  sun: 'D', mon: 'D', tue: 'D', wed: 'D', thu: 'D', fri: 'D', sat: 'D'\n};\n/* eslint-enable */\n\nconst currentYear = new Date().getUTCFullYear();\n\nexport function parseNumber (str) {\n  // this horrifying expression assumes that we only need #,###.### and never #.###,###\n  const parts = /^([\\s+%$(-]*)(((?:(?:\\d[\\d,]*)(?:\\.\\d*)?|(?:\\.\\d+)))([eE][+-]?\\d+)?)([\\s%$)]*)$/.exec(str);\n  if (parts) {\n    const [ , prefix, number, numpart, exp, suffix ] = parts;\n    let sign = 1;\n    let format = '';\n    let minus = false;\n    let openParen = false;\n    let closeParen = false;\n    let percent = false;\n    let dollar = false;\n    let dollarTailing = false;\n    let value = parseFloat(number.replace(/,/g, ''));\n    // is number ok?\n    if (!isFinite(value)) {\n      return null;\n    }\n    // is prefix ok?\n    for (let i = 0; i < prefix.length; i++) {\n      const char = prefix[i];\n      // only 1 occurance of these is allowed\n      if (char === '-') {\n        if (minus || openParen) { return null; }\n        minus = true;\n        sign = -1;\n      }\n      else if (char === '$') {\n        if (dollar) { return null; }\n        dollar = true;\n      }\n      else if (char === '(') {\n        if (openParen || minus) { return null; }\n        openParen = true;\n        sign = -1;\n      }\n      else if (char === '%') {\n        if (percent) { return null; }\n        percent = true;\n      }\n    }\n    // is suffix ok?\n    for (let i = 0; i < suffix.length; i++) {\n      const char = suffix[i];\n      // only 1 occurance of these is allowed\n      if (char === '$') {\n        if (dollar) { return null; }\n        dollar = true;\n        dollarTailing = true;\n      }\n      else if (char === ')') {\n        if (closeParen || !openParen) { return null; }\n        closeParen = true;\n      }\n      else if (char === '%') {\n        if (percent) { return null; }\n        percent = true;\n      }\n    }\n    if (exp) {\n      if (percent || dollar) {\n        return null;\n      }\n      // allow parens and minus, but not %$\n      format = '0.00E+00';\n    }\n    else if (percent) {\n      if (dollar) {\n        // Sheets allows this: $123% => $1.23 (Excel does not)\n        return null;\n      }\n      // numpart dictates how \"deep\" the format is: \"0\" vs \"0.00\"\n      format = numpart.includes('.') ? '0.00%' : '0%';\n      value *= 0.01;\n    }\n    else if (dollar) {\n      // numpart dictates how \"deep\" the format is: \"0\" vs \"0.00\"\n      if (dollarTailing) {\n        format = numpart.includes('.') ? '#,##0.00$' : '#,##0$';\n      }\n      else {\n        format = numpart.includes('.') ? '$#,##0.00' : '$#,##0';\n      }\n    }\n    else if (numpart.includes(',')) {\n      format = numpart.includes('.') ? '#,##0.00' : '#,##0';\n    }\n    // we may want to lower the fidelity of the number: +p.value.toFixed(13)\n    const ret = { v: value * sign };\n    if (format) {\n      ret.z = format;\n    }\n    return ret;\n  }\n}\n\nexport function isValidDate (y, m, d) {\n  // day can't be 0\n  if (d < 1) {\n    return false;\n  }\n  // month must be 1-12\n  if (m < 1 || m > 12) {\n    return false;\n  }\n  // february\n  if (m === 2) {\n    const isLeapYear = (((y % 4 === 0) && (y % 100 !== 0)) || (y % 400 === 0));\n    // 1900 is a leap year in Excel\n    const febDays = (isLeapYear || y === 1900) ? 29 : 28;\n    if (d > febDays) {\n      return false;\n    }\n  }\n  // test any other month\n  else if (\n    ((m === 4 || m === 6 || m === 9 || m === 11) && d > 30) ||\n    ((m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) && d > 31)) {\n    return false;\n  }\n  return true;\n}\n\nconst nextToken = (str, node, data) => {\n  const path = data.path || '';\n  const matchOrder = Object.keys(node);\n  for (let i = 0; i < matchOrder.length; i++) {\n    let r;\n    const t = matchOrder[i];\n    if (!node[t]) {\n      continue;\n    }\n    if (t === '$') {\n      // if string is done, then we can return\n      if (!str) {\n        r = data;\n      }\n    }\n    else if (t === '-') {\n      const m = /^(\\s*([./-]|,\\s)\\s*|\\s+)/.exec(str);\n      if (m) {\n        // const sep = (!m[1] || m[1] === '.' || m[1] === ',') ? ' ' : m[0].trim();\n        const sep = (m[1] === '-' || m[1] === '/' || m[1] === '.') ? m[1] : ' ';\n        // don't allow mixing date separators\n        if (!data.sep || data.sep === sep) {\n          const s = m[0].replace(/\\s+/g, ' ');\n          r = nextToken(str.slice(m[0].length), node[t], { ...data, sep, path: path + s });\n          // r = nextToken(str.slice(m[0].length), node[t], { ...data, sep, path: path + sep });\n        }\n      }\n    }\n    else if (t === ' ') {\n      const m = /^[,.]?\\s+/.exec(str);\n      if (m) {\n        const s = m[0].replace(/\\s+/g, ' ');\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, path: path + s });\n      }\n    }\n    else if (t === 'j' || t === 'd') {\n      const m = /^(0?[1-9]|1\\d|2\\d|3[01])\\b/.exec(str);\n      if (m) {\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, day: m[0], path: path + t });\n      }\n    }\n    else if (t === 'n' || t === 'm') {\n      const m = /^(0?[1-9]|1[012])\\b/.exec(str);\n      if (m) {\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, month: +m[0], _mon: m[0], path: path + t });\n      }\n    }\n    else if (t === 'F' || t === 'M') {\n      const m = /^([a-z]{3,9})\\b/i.exec(str);\n      const v = m && (t === 'F' ? monthsF : monthsM)[m[0].toLowerCase()];\n      if (v) {\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, month: v, _mon: m[0], path: path + t });\n      }\n    }\n    else if (t === 'l' || t === 'D') {\n      const m = /^([a-z]{3,9})\\b/i.exec(str);\n      const v = m && days[m[0].toLowerCase()];\n      if (v === t) {\n        // the value is ignored\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, path: path + t });\n      }\n    }\n    else if (t === 'y') {\n      const m = /^\\d\\d\\b/.exec(str);\n      if (m) {\n        const y = (+m[0] >= 30) ? +m[0] + 1900 : +m[0] + 2000;\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, year: y, path: path + t });\n      }\n    }\n    else if (t === 'Y') {\n      const m = /^\\d\\d\\d\\d\\b/.exec(str);\n      if (m) {\n        r = nextToken(str.slice(m[0].length), node[t], { ...data, year: +m[0], path: path + t });\n      }\n    }\n    else if (t === 'x') {\n      const time = parseTime(str);\n      if (time) {\n        r = nextToken('', node[t], { ...data, time: time.v, tf: time.z, path: path + t });\n      }\n    }\n    else {\n      throw new Error(`Unknown date token \"${t}\"`);\n    }\n    if (r) {\n      return r;\n    }\n  }\n};\n\nexport function parseDate (str, opts) {\n  // possible shortcut: quickly dismiss if there isn't a number?\n  const date = nextToken(str.trim(), dateTrie, { path: '' });\n  if (date) {\n    // disallow matches where two tokens are separated by a period\n    if (date.sep === '.' && date.path.length === 3) {\n      return null;\n    }\n    const year = +(date.year ?? currentYear);\n    if (!date.day) {\n      date.day = 1;\n    }\n    // don't allow input of 31st apr, or 29th feb on non-leap years\n    if (!isValidDate(year, date.month, date.day)) {\n      return null;\n    }\n    let epoch = -Infinity;\n    if (year < 1900) {\n      return null;\n    }\n    else if (year <= 1900 && date.month <= 2) {\n      epoch = 25568;\n    }\n    else if (year < 10000) {\n      epoch = 25569;\n    }\n    const value = (Date.UTC(year, date.month - 1, date.day) / 864e5) + epoch + (date.time || 0);\n    if (value >= 0 && value <= 2958465) {\n      const lead0 = (\n        // either has a leading zero\n        (date._mon[0] === '0' || date.day[0] === '0') ||\n        // both are 2-digits long\n        (date._mon.length === 2 && date.day.length === 2)\n      );\n      // console.error(date.path);\n      const format = date.path.replace(/[jdlDnmMFyYx-]/g, a => {\n        if (a === 'j' || a === 'd') {\n          return lead0 ? 'dd' : 'd';\n        }\n        if (a === 'D') { return 'ddd'; }\n        if (a === 'l') { return 'dddd'; }\n        if (a === 'n' || a === 'm') {\n          return lead0 ? 'mm' : 'm';\n        }\n        if (a === 'M') { return 'mmm'; }\n        if (a === 'F') { return 'mmmm'; }\n        if (a === 'y') { return 'yy'; }\n        if (a === 'x') { return date.tf || ''; }\n        if (a === 'Y') { return 'yyyy'; }\n        return a;\n      });\n      if (opts && opts.nativeDate) {\n        return { v: dateFromSerial(value, opts), z: format };\n      }\n      return { v: value, z: format };\n    }\n  }\n  return null;\n}\n\nexport function parseTime (str) {\n  const parts = /^\\s*([10]?\\d|2[0-4])(?::([0-5]\\d|\\d))?(?::([0-5]\\d|\\d))?(\\.\\d{1,10})?(?:\\s*([AP])M?)?\\s*$/i.exec(str);\n  if (parts) {\n    const [ , h, m, s, f, am ] = parts;\n    // don't allow milliseconds without seconds\n    if (f && !s) {\n      return null;\n    }\n    // single number must also include AM/PM part\n    if (!am && !m && !s) {\n      return null;\n    }\n    // AM/PM part must align with hours\n    let hrs = (h || 0) * 1;\n    if (am) {\n      // 00:00 AM - 12:00 AM\n      if (hrs >= 13) {\n        return null;\n      }\n      if (am[0] === 'p' || am[0] === 'P') {\n        hrs += 12;\n      }\n    }\n    const min = (m || 0) * 1;\n    const sec = (s || 0) * 1;\n    const mss = (f || 0) * 1;\n    return {\n      v: ((hrs * 60 * 60) + (min * 60) + sec + mss) / (60 * 60 * 24),\n      z: (\n        (h.length === 2 ? 'hh' : 'h') +\n        ':mm' +\n        (s ? ':ss' : '') +\n        (am ? ' AM/PM' : '')\n      )\n    };\n  }\n  return null;\n}\n\nexport function parseBool (str) {\n  if (/^\\s*true\\s*$/i.test(str)) {\n    return { v: true };\n  }\n  if (/^\\s*false\\s*$/i.test(str)) {\n    return { v: false };\n  }\n  return null;\n}\n\nexport function parseValue (s, opts) {\n  return parseNumber(s) ?? parseDate(s, opts) ?? parseTime(s) ?? parseBool(s);\n}\n","import { getLocale, parseLocale, addLocale } from './locale.js';\nimport round from './round.js';\nimport dec2frac from './dec2frac.js';\nimport options from './options.js';\nimport codeToLocale from './codeToLocale.js';\nimport { parsePattern, parseCatch } from './parsePattern.js';\nimport { dateToSerial, dateFromSerial } from './serialDate.js';\nimport { color, formatNumber } from './formatNumber.js';\nimport { info } from './formatInfo.js';\nimport { parseNumber, parseDate, parseTime, parseBool, parseValue } from './parseValue.js';\n\nconst _cache = {};\n\nfunction getFormatter (parseData, initOpts) {\n  const { pattern, partitions, locale } = parseData;\n\n  const getRuntimeOptions = opts => {\n    const runOpts = Object.assign({}, options(), initOpts, opts);\n    if (locale) {\n      runOpts.locale = locale;\n    }\n    return runOpts;\n  };\n\n  const formatter = (value, opts) => {\n    const o = getRuntimeOptions(opts);\n    return formatNumber(dateToSerial(value, o), partitions, o);\n  };\n  formatter.color = (value, opts) => {\n    const o = getRuntimeOptions(opts);\n    return color(dateToSerial(value, o), partitions);\n  };\n  formatter.info = info(partitions, (initOpts || {}).currency);\n  formatter.isPercent = () => formatter.info.isPercent;\n  formatter.isDate = () => formatter.info.isDate;\n  formatter.isText = () => formatter.info.isText;\n  formatter.pattern = pattern;\n  if (parseData.error) {\n    formatter.error = parseData.error;\n  }\n  formatter.options = getRuntimeOptions;\n  formatter.locale = locale || (initOpts && initOpts.locale) || '';\n  return Object.freeze(formatter);\n}\n\nfunction numfmt (pattern, opts) {\n  if (!pattern) {\n    pattern = 'General';\n  }\n  let parseData = null;\n  if (_cache[pattern]) {\n    parseData = _cache[pattern];\n  }\n  else {\n    const constructOpts = Object.assign({}, options(), opts);\n    parseData = constructOpts.throws\n      ? parsePattern(pattern)\n      : parseCatch(pattern);\n    if (!parseData.error) {\n      _cache[pattern] = parseData;\n    }\n  }\n  return getFormatter(parseData, opts);\n}\n\nnumfmt.isDate = d => {\n  // run parser in robust mode: malformed format code is not a date\n  return numfmt(d, { throws: false }).isDate();\n};\n\nnumfmt.isPercent = d => {\n  // run parser in robust mode: malformed format code is not a percent\n  return numfmt(d, { throws: false }).isPercent();\n};\n\nnumfmt.isText = d => {\n  // run parser in robust mode: malformed format code is not a percent\n  return numfmt(d, { throws: false }).isText();\n};\n\nnumfmt.info = (d, opts) => {\n  return numfmt(d, { ...opts, throws: false, ...opts }).info || null;\n};\n\nnumfmt.dateToSerial = dateToSerial;\nnumfmt.dateFromSerial = dateFromSerial;\nnumfmt.options = options;\nnumfmt.dec2frac = dec2frac;\nnumfmt.round = round;\n\nnumfmt.codeToLocale = codeToLocale;\nnumfmt.parseLocale = parseLocale;\nnumfmt.getLocale = getLocale;\nnumfmt.addLocale = (options, l4e) => {\n  const c = parseLocale(l4e);\n  // when locale is changed, expire all cached patterns\n  delete _cache[c.lang];\n  delete _cache[c.language];\n  return addLocale(options, c);\n};\n\n// SSF interface compatibility\nfunction format (pattern, value, l4e, noThrows = false) {\n  const opts = (l4e && typeof l4e === 'object') ? l4e : { locale: l4e, throws: !noThrows };\n  return numfmt(pattern, opts)(dateToSerial(value, opts), opts);\n}\nnumfmt.format = format;\nnumfmt.is_date = numfmt.isDate;\n\nnumfmt.parseNumber = parseNumber;\nnumfmt.parseDate = parseDate;\nnumfmt.parseTime = parseTime;\nnumfmt.parseBool = parseBool;\nnumfmt.parseValue = parseValue;\n\nexport default numfmt;\n"],"names":["codeToLocale","1078","1052","1118","5121","15361","3073","2049","11265","13313","12289","4097","6145","8193","16385","1025","10241","7169","14337","9217","1067","1101","2092","1068","1069","1059","2117","1093","5146","1026","1109","1027","2052","3076","5124","4100","1028","1050","1029","1030","1125","2067","1043","1126","3081","10249","4105","9225","2057","16393","6153","8201","5129","13321","7177","11273","1033","12297","1061","1071","1080","1065","1124","1035","2060","11276","3084","9228","12300","1036","5132","13324","6156","14348","10252","4108","7180","1122","2108","1084","1110","1079","3079","1031","5127","4103","2055","1032","1140","1095","1279","1037","1081","1038","1039","1136","1057","1040","2064","1041","1099","1120","1087","1107","1111","1042","1088","1108","1142","1062","1063","2110","1086","1100","1082","1112","1153","1102","1104","2128","1121","1044","2068","1096","1045","1046","2070","1094","1047","2072","1048","1049","2073","1083","1103","3098","2074","1072","1074","1113","1115","1051","1060","1143","1070","11274","16394","13322","9226","5130","7178","12298","17418","4106","18442","2058","19466","6154","15370","10250","20490","1034","14346","8202","1089","2077","1053","1114","1064","1097","1092","1098","1054","1105","1073","1055","1090","1058","1056","2115","1091","1075","1066","1106","1076","1085","1077","re_locale","locales","defaultData","group","decimal","positive","negative","percent","exponent","nan","infinity","ampm","mmmm6","mmm6","mmmm","mmm","dddd","ddd","parseLocale","l4e","lm","exec","lang","language","territory","codeset","modifier","SyntaxError","resolveLocale","wincode","parseInt","isFinite","test","getLocale","tag","let","obj","c","createLocale","data","Object","assign","addLocale","options","id","defaultLocale","round","value","places","p","Math","isDefault","PRECISION","dec2frac","val","maxdigits_num","maxdigits_de","sign","maxdigits_n","maxdigits_d","z","abs","last_d","tmp","curr_n","curr_d","r","floor","last_n","defaultOptions","overflow","dateErrorThrows","dateErrorNumber","dateSpanLarge","leap1900","nbsp","throws","invalid","locale","ignoreTimezone","globalOptions","opts","key","u_YEAR","u_MONTH","u_DAY","u_HOUR","u_MIN","u_SEC","u_DSEC","u_CSEC","u_MSEC","MIN_S_DATE","MAX_S_DATE","MIN_L_DATE","MAX_L_DATE","EPOCH_1904","EPOCH_1900","EPOCH_1317","_numchars","#","0","?","_sp_chars","@","-","+","indexColors","minMaxPad","str","part","prefix","length","replace","_pattcache","patternToPadding","ss","nch","chars","m","repeat","i","charAt","join","add","s","tokens","type","push","parsePart","pattern","scale","text","date","date_eval","date_system","sec_decimals","general","clock","int_pattern","frac_pattern","man_pattern","den_pattern","num_pattern","current_pattern","part_over","last_number_chunk","date_chunks","last","have_locale","num","fractions","pop","followed_by_num","slice","token","toLowerCase","tok","bit","size","raw","pad","last_date_chunk","used","indeterminate","short","dec","max","decimals","condition","parseFloat","bits","split","code","currency","color","dec_fractions","exponential","exp_plus","plus","concat","parens","ipatt","sl","grouping","indexOf","si","group_pri","group_sec","num_pat","den_pat","enforce_padded","int_padding","man_padding","num_padding","den_padding","denominator","integer","forEach","next","rule","Error","parsePattern","partitions","conditional","l10n_override","text_partition","more","conditions","pi","pl","splice","generated","unshift","volatile","parseCatch","err","errPart","error","message","toYMD_1900","ord","l","n","j","nDay","nMonth","toYMD_1904","toYMD_1317","cyc","toYMD","system","int","DAYSIZE","dateToSerial","ts","d","hh","mm","Array","isArray","y","Date","UTC","getTimezoneOffset","dateFromSerial","t","time","x","nativeDate","dt","setUTCFullYear","setUTCHours","clamp","number","ceil","log10","mag","zero","total","period","frac","numdec","incl_sign","v","signSize","intPart","intSize","periodSize","fracSize","String","f","digits","fixLocale","l10n","ret","showSign","exp","num_dig","getExp","o","toPrecision","toFixed","short_to_long","man","den","dateOverflows","bigRange","runPart","l10n_","mantissa","numerator","fraction","year","month","day","weekday","hour","minute","second","subsec","int_max","m_sign","frac_max","gtmp","ipos","have_fraction","_dec","frt","num_max","Infinity","den_max","dout","minU","substring","integer_bits_counter","counter","ti","tl","len","num_min","den_min","c_s","c_e","padStart","h","idx","getPart","parts","operator","operand","cond","default_text","default_color","formatNumber","text_part","loc","isNaN","isPercent","isDate","isText","part1","part2","part3","part4","level","datetime","grouped","scientific","dateCodes","reCurrencySymbols","info","currencyId","partPos","partNeg","maxDecimals","parentheses","isCurrency","some","codeType","codeNum","min","codeParens","codeDash","haveTime","haveDate","order","startsWith","find","freeze","okDateFormats","dateTrie","packDate","node","char","$","fmt","monthsM","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","monthsF","january","february","march","april","june","july","august","september","october","november","december","days","sunday","monday","tuesday","wednesday","thursday","friday","saturday","sun","mon","tue","wed","thu","fri","sat","currentYear","getUTCFullYear","parseNumber","numpart","suffix","format","minus","openParen","closeParen","dollar","dollarTailing","includes","isValidDate","nextToken","path","matchOrder","keys","_mon","parseTime","tf","parseDate","trim","_date$year","epoch","lead0","a","am","hrs","parseBool","parseValue","_parseNumber","_cache","getFormatter","parseData","initOpts","getRuntimeOptions","runOpts","formatter","numfmt","constructOpts","is_date"],"mappings":"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"}